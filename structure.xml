<?xml version="1.0" encoding="utf-8"?>
<project title="ProdigyView Documentation" version="2.9.1">
  <partials/>
  <file path="data/PVStaticApplication.php" generated-path="data.PVStaticApplication.html" hash="9cbdc25c2f2b5ab0d5543c4e4801cf66" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="true" namespace="" line="30" package="Default">
      <extends>\PVStaticObject</extends>
      <name>PVStaticApplication</name>
      <full_name>\PVStaticApplication</full_name>
      <docblock line="30">
        <description>PVStaticObjectt is an extendable class used to enhance an object with static methods.</description>
        <long-description>ProdigyView comes with the ability to implement adapters, intercepting filters and observers. Extending this class to a child class will give the child class the ability to use those design patterns along with a collection that can assign and retrieve values using magic functions.
```php
Example:

//Create the class
class Example extends PVObject {
  	public static function testMe($string) {
			echo $string;

			//An observer
			$this-&gt;_notify(get_class() . '::' . __FUNCTION__, $string);
		}
	}

//Add to its collection
Example::set('foo','bar');
echo Example::get('foo');

//Add a dynamic method
Example::addMethod('fiz', function($text) {
		return 'fiz ' . $text;
});

echo Example::fizz('Bop');


//Add Observer
Example::addObserver('Example::testMe', 'test_closure', function($string) {
  	echo "\nLine 2 \n"
		echo $string;

}, array('type' =&gt; 'closure'));

//Will call test me and the observer attached
Example::testMe('Testing String ');
```</long-description>
        <tag name="package" line="30" description="Default"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="42" package="Default">
        <name>commandInterpreter</name>
        <full_name>\PVStaticApplication::commandInterpreter()</full_name>
        <docblock line="42">
          <description>Takes in a command and arguements and if the command exist, will pass that command to
a function with the same name.</description>
          <long-description></long-description>
          <tag name="param" line="42" description="&lt;p&gt;The name of the function to be called&lt;/p&gt;" type="string" variable="$command">
            <type>string</type>
          </tag>
          <tag name="param" line="42" description="&lt;p&gt;An infinate amount of parameters that can be passed. to a function.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="42" description="$return Returns the value of the function that is called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="42" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$command</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="" line="74" package="Default">
        <name>defaultFunction</name>
        <full_name>\PVStaticApplication::defaultFunction()</full_name>
        <docblock line="74">
          <description>The default function that must be implemented. If the commandIntepreter cannot find a correspoding
function, this function will be called.</description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="30" code="PPC:ERR-50005">No summary for class \PVStaticApplication</error>
      <notice line="42" code="PPC:ERR-50013">Parameter $args could not be found in commandInterpreter()</notice>
      <error line="74" code="PPC:ERR-50015">Argument $params is missing from the Docblock of defaultFunction</error>
    </parse_markers>
  </file>
  <file path="media/PVAudio.php" generated-path="media.PVAudio.html" hash="f2c6108d95453ebdfebaea5882ac287b" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="26" package="media">
      <extends>\PVStaticObject</extends>
      <name>PVAudio</name>
      <full_name>\PVAudio</full_name>
      <docblock line="26">
        <description>PVAudio is a class designed to manipulate audio files and transcoding to various formats.</description>
        <long-description>PVAudio works with all kinds of audio files: mp3, wave, real audio, etc. It utilizes command tools like FFMPEG to do the transcoding and will return the results from the command line.

Example:
```php
//Set the file to be converted
$old_file = '/path/to/file/audio.wav';

//Set the path of the new file
$new_file =  '/path/to/file/audio.mp3';

//Options to pass to the FFmpeg or other conversion tools
//The following will place a -f infront of the input
$options = array('input_f' =&gt; '');

//Run the conversion
PVAudio::init();
PVAudio::convertAudioFile($old_file, $new_file , $options );
```</long-description>
        <tag name="package" line="26" description="media"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="31" package="media">
        <name>$converter</name>
        <full_name>\PVAudio::$converter</full_name>
        <default>'ffmpeg'</default>
        <docblock line="31">
          <description>The type of convet to use, default is ffmpeg</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="43" package="media">
        <name>init</name>
        <full_name>\PVAudio::init()</full_name>
        <docblock line="43">
          <description>Initialize the static class. Currently can be used for modifying the default converter
tool and its location, which is simply ffmpeg.</description>
          <long-description></long-description>
          <tag name="param" line="43" description="&lt;p&gt;An array of configurations&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The converter tool and its location. Default is ffmpeg&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="43" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="43" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="77" package="media">
        <name>convertAudioFile</name>
        <full_name>\PVAudio::convertAudioFile()</full_name>
        <docblock line="77">
          <description>Converts a sound file from one format to a different one or one with different attribute. The convert is
executed on the command line and by default is set to use ffmpeg.</description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The location of the current file to be converted.&lt;/p&gt;" type="string" variable="$current_file_location">
            <type>string</type>
          </tag>
          <tag name="param" line="77" description="&lt;p&gt;The location to output the new file once converted.&lt;/p&gt;" type="string" variable="$new_file_location">
            <type>string</type>
          </tag>
          <tag name="param" line="77" description="&lt;p&gt;Options that can control how the conversion takes place.&#10;'conveter' &lt;em&gt;string&lt;/em&gt;: The convert to be used and the location. Default is ffmpeg. To further define&#10;either added the path to the converter +ffmpeg or path to another converter besides ffmpeg.&#10;'input&lt;em&gt;' array: Should be an array that of options for how to treat the input file. The options&#10;should be the same options passed through the setEncodingOptions except the prefix should have 'input&lt;/em&gt;'.&#10;For example if the option is 'ar' as in setEncodingOptions, add 'input&lt;em&gt;ar' as the option key.&#10;'output&lt;/em&gt;' array: Should be an array that of options for how to treat the output file. The options&#10;should be the same options passed through the setEncodingOptions except the prefix should have 'output_'.&#10;For example if the option is 'ar' as in setEncodingOptions, add 'input_ar' as the option key.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="77" description="The output is not returned but a new file will be created if the conversion succeeded" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="77" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$current_file_location</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$new_file_location</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="120" package="media">
        <name>setEncodingOptions</name>
        <full_name>\PVAudio::setEncodingOptions()</full_name>
        <docblock line="120">
          <description>The encoding options on how to encode a file using FFMPPEG. The options should be run in a command line
formated.</description>
          <long-description></long-description>
          <tag name="see" line="120" description="" link="http://www.ffmpeg.org/ffmpeg.html"/>
          <tag name="see" line="120" description="" link="http://www.ffmpeg.org/ffmpeg.html#Audio-Options"/>
          <tag name="see" line="120" description="" link="http://www.ffmpeg.org/ffmpeg.html#Advanced-Audio-options_003a"/>
          <tag name="param" line="120" description="&lt;p&gt;Defined options to be used in the conversion. Options relate to those passed in a normal&#10;&#9;&#9;  FFMPEG command line fashion.The key of the array corresponds the command and the value responds to the command&#10;&#9;&#9;  value.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="120" description="&lt;p&gt;If the options have a prefix in front of the key, the prefix should be defined either.&lt;/p&gt;" type="string" variable="$input_type">
            <type>string</type>
          </tag>
          <tag name="return" line="120" description="$options A string of options that should be used on the command line with ffmpeg" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="120" description="public"/>
          <tag name="todo" line="120" description="find ffmpeg documentation and use isset to remove notices"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$input_type</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="214" package="media">
        <name>getDuration</name>
        <full_name>\PVAudio::getDuration()</full_name>
        <docblock line="214">
          <description>Get the duration of an audio file.</description>
          <long-description></long-description>
          <tag name="param" line="214" description="&lt;p&gt;The location of the audio file to calculate the duration of&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="return" line="214" description="$duration The duration of the audio file" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="214" description="public"/>
          <tag name="todo" line="214" description="Add in options of choosing the converter"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="120">find ffmpeg documentation and use isset to remove notices</todo>
      <todo line="214">Add in options of choosing the converter</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="data/PVCollection.php" generated-path="data.PVCollection.html" hash="1f92674de490692b7291cf8b216ce5b9" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="18" package="data">
      <extends/>
      <implements>\IteratorAggregate</implements>
      <name>PVCollection</name>
      <full_name>\PVCollection</full_name>
      <docblock line="18">
        <description>The PVCollection class acts as a repository for data to be stored, retrieved and iterated over.</description>
        <long-description>The collection class is a simple way of storing and getting information with key, value pairs, Any information can be stored and retrieved including strings, array, and objects. Some example use cases:
```php
//Add data and increment over fit
$collection = new PVCollection();
$collection -&gt; add('Apples');
$collection -&gt; add('Oranges');

foreach($collection as $key =&gt; $value) {
	echo $value;
}
```</long-description>
        <tag name="package" line="18" description="data"/>
      </docblock>
      <property static="false" visibility="private" namespace="" line="22" package="data">
        <name>$dataset</name>
        <full_name>\PVCollection::$dataset</full_name>
        <default>array()</default>
        <docblock line="22">
          <description>The items stored in the collection, key=&gt;value pair</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="27" package="data">
        <name>$count</name>
        <full_name>\PVCollection::$count</full_name>
        <default>0</default>
        <docblock line="27">
          <description>The number of items in the collection</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="38" package="data">
        <name>__construct</name>
        <full_name>\PVCollection::__construct()</full_name>
        <docblock line="38">
          <description>The constructor of this class takes in an array and passes
it to the collection as the initial data.</description>
          <long-description></long-description>
          <tag name="param" line="38" description="&lt;p&gt;An array of data&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="38" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="38" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="49" package="data">
        <name>getIterator</name>
        <full_name>\PVCollection::getIterator()</full_name>
        <docblock line="49">
          <description>Returns an iterable object that can iteratered over in a loop.</description>
          <long-description></long-description>
          <tag name="return" line="49" description="$iterable An iterable object" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
          <tag name="access" line="49" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="62" package="data">
        <name>add</name>
        <full_name>\PVCollection::add()</full_name>
        <docblock line="62">
          <description>Adds the passed data to an index in the collection that can be
retrieved later.</description>
          <long-description></long-description>
          <tag name="param" line="62" description="&lt;p&gt;Passed data can be an array, object and any other value.&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="62" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="62" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="79" package="data">
        <name>__get</name>
        <full_name>\PVCollection::__get()</full_name>
        <docblock line="79">
          <description>PHP magic function that returns an index if it is in the collection.</description>
          <long-description></long-description>
          <tag name="param" line="79" description="&lt;p&gt;An index/key that will be used to find the value, if present&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="79" description="The returned value if found in the index" type="\$value">
            <type>\$value</type>
          </tag>
          <tag name="access" line="79" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="91" package="data">
        <name>get</name>
        <full_name>\PVCollection::get()</full_name>
        <docblock line="91">
          <description>Same as the magic function __get.</description>
          <long-description></long-description>
          <tag name="param" line="91" description="&lt;p&gt;An index/key that will be used to find the value, if present&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="see" line="91" description="" link="\get"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="106" package="data">
        <name>addWithName</name>
        <full_name>\PVCollection::addWithName()</full_name>
        <docblock line="106">
          <description>Adds a value to the collection but also defines the index/key in which the value
will be placed at.</description>
          <long-description></long-description>
          <tag name="param" line="106" description="&lt;p&gt;The name/index/key that will be associated with the passed value&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="106" description="&lt;p&gt;The data the will be story associated with thhat key.&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="106" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="106" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="125" package="data">
        <name>remove</name>
        <full_name>\PVCollection::remove()</full_name>
        <docblock line="125">
          <description>Remove a value from the collection based on the key/index.</description>
          <long-description></long-description>
          <tag name="param" line="125" description="&lt;p&gt;The index can either be a int or string&lt;/p&gt;" type="mixed" variable="$index">
            <type>mixed</type>
          </tag>
          <tag name="return" line="125" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="125" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="133" package="data">
        <name>getData</name>
        <full_name>\PVCollection::getData()</full_name>
        <docblock line="133">
          <description>Returns all the data</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="" line="142" package="Default">
      <extends/>
      <implements>\Iterator</implements>
      <name>PVIterator</name>
      <full_name>\PVIterator</full_name>
      <docblock line="142">
        <description>A class used for iterating over items in loops.</description>
        <long-description></long-description>
        <tag name="package" line="142" description="Default"/>
      </docblock>
      <property static="false" visibility="private" namespace="" line="147" package="Default">
        <name>$data</name>
        <full_name>\PVIterator::$data</full_name>
        <default>array()</default>
        <docblock line="147">
          <description>The items to iterate over</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="158" package="Default">
        <name>__construct</name>
        <full_name>\PVIterator::__construct()</full_name>
        <docblock line="158">
          <description>Initializes the iterater of information to
iterate through.</description>
          <long-description></long-description>
          <tag name="param" line="158" description="&lt;p&gt;An array of information to make iterable&lt;/p&gt;" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="158" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="158" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="170" package="Default">
        <name>rewind</name>
        <full_name>\PVIterator::rewind()</full_name>
        <docblock line="170">
          <description>Sets the pointer to the first index in the array</description>
          <long-description></long-description>
          <tag name="return" line="170" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="170" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="181" package="Default">
        <name>last</name>
        <full_name>\PVIterator::last()</full_name>
        <docblock line="181">
          <description>Moves the pointer to the last index in the array and returns
the value of the last index</description>
          <long-description></long-description>
          <tag name="return" line="181" description="$value The value of the last index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="181" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="191" package="Default">
        <name>current</name>
        <full_name>\PVIterator::current()</full_name>
        <docblock line="191">
          <description>Returns the value of the current index in the array.</description>
          <long-description></long-description>
          <tag name="return" line="191" description="$value The data stored in the current index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="191" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="202" package="Default">
        <name>key</name>
        <full_name>\PVIterator::key()</full_name>
        <docblock line="202">
          <description>Returns the key value of the current index</description>
          <long-description></long-description>
          <tag name="return" line="202" description="$key" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="213" package="Default">
        <name>next</name>
        <full_name>\PVIterator::next()</full_name>
        <docblock line="213">
          <description>Returns the value of the next pointer in the array</description>
          <long-description></long-description>
          <tag name="return" line="213" description="$value The data at the location of the next pointer" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="213" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="224" package="Default">
        <name>previous</name>
        <full_name>\PVIterator::previous()</full_name>
        <docblock line="224">
          <description>Returns the value of the previous pointer in the array</description>
          <long-description></long-description>
          <tag name="return" line="224" description="$value The data at the location of the previous pointer" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="224" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="235" package="Default">
        <name>valid</name>
        <full_name>\PVIterator::valid()</full_name>
        <docblock line="235">
          <description>Determines if the key exist, and then returns the associated data</description>
          <long-description></long-description>
          <tag name="return" line="235" description="$value The validated data" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="235" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="247" package="Default">
        <name>count</name>
        <full_name>\PVIterator::count()</full_name>
        <docblock line="247">
          <description>Counts the number of elements currently in the iterator.</description>
          <long-description></long-description>
          <tag name="return" line="247" description="count" type="integer">
            <type>integer</type>
          </tag>
          <tag name="access" line="247" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="255" package="Default">
        <name>getData</name>
        <full_name>\PVIterator::getData()</full_name>
        <docblock line="255">
          <description>Returns the data as stored in the object</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="system/PVLibraries.php" generated-path="system.PVLibraries.html" hash="4e6cd6a8406efb15a1a78180ac70c237" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="24" package="system">
      <extends>\PVStaticObject</extends>
      <name>PVLibraries</name>
      <full_name>\PVLibraries</full_name>
      <docblock line="24">
        <description>PVLibraries is designed to load external libraries into the system, especially those that are not in a management service like Composer.</description>
        <long-description>While tools like composer make including and accessing libraries easy, not every library is on the service nor does every project want to manage their 3rd parties libraries in the same way. PVLibraries primary focus is the loading of external libraries to be used in your application.

Example:
```php
//Initialize the class
PVLibraries::init();

//Add an external library
PVLibraries::addLibrary('MailLoader', array('path' =&gt; '/absolute/path/to/library/1', 'explicit_load' =&gt; true));

//Add a library with name spaces
PVLibraries::addLibrary('Facebook', array('path' =&gt; '/absolute/path/to/library/2', 'namespaced' =&gt; true));

//To your application to load these libraries for use
PVLibraries::loadLibraries();
```</long-description>
        <tag name="package" line="24" description="system"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="private" namespace="" line="29" package="system">
        <name>$javascript_libraries_array</name>
        <full_name>\PVLibraries::$javascript_libraries_array</full_name>
        <default></default>
        <docblock line="29">
          <description>Javascript libraries</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="36" package="system">
        <name>$jquery_libraries_array</name>
        <full_name>\PVLibraries::$jquery_libraries_array</full_name>
        <default></default>
        <docblock line="36">
          <description>JQuery Libraries.</description>
          <long-description></long-description>
          <tag name="deprecated" line="36" description="To remove"/>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="43" package="system">
        <name>$prototype_libraries_array</name>
        <full_name>\PVLibraries::$prototype_libraries_array</full_name>
        <default></default>
        <docblock line="43">
          <description>Prototype Libraries.</description>
          <long-description></long-description>
          <tag name="deprecated" line="43" description="To remove"/>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="50" package="system">
        <name>$motools_libraries_array</name>
        <full_name>\PVLibraries::$motools_libraries_array</full_name>
        <default></default>
        <docblock line="50">
          <description>Mootools Librares</description>
          <long-description></long-description>
          <tag name="deprecated" line="50" description="To remove"/>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="55" package="system">
        <name>$css_files_array</name>
        <full_name>\PVLibraries::$css_files_array</full_name>
        <default></default>
        <docblock line="55">
          <description>CSS files to load</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="60" package="system">
        <name>$open_javascript</name>
        <full_name>\PVLibraries::$open_javascript</full_name>
        <default></default>
        <docblock line="60">
          <description>Javascript that is not a file</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="65" package="system">
        <name>$libraries</name>
        <full_name>\PVLibraries::$libraries</full_name>
        <default></default>
        <docblock line="65">
          <description>PHP libraries</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="70" package="system">
        <name>$_autoloadClasses</name>
        <full_name>\PVLibraries::$_autoloadClasses</full_name>
        <default></default>
        <docblock line="70">
          <description>An array of classes to autoload</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="75" package="system">
        <name>$_namespaced</name>
        <full_name>\PVLibraries::$_namespaced</full_name>
        <default></default>
        <docblock line="75">
          <description>Signals if namespace is on by default for all classes</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="88" package="system">
        <name>init</name>
        <full_name>\PVLibraries::init()</full_name>
        <docblock line="88">
          <description>Initialize the library class in preparotion for loading libraries. Needs to be configured if namespaces
are going to be used.</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;A configuration that can be used for setting how the class works&#10;-'namespaced' &lt;em&gt;boolean&lt;/em&gt;: Default is false. If set to true, classes will be treated and react as if they are namespaced&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="88" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="88" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="121" package="system">
        <name>enqueueJavascript</name>
        <full_name>\PVLibraries::enqueueJavascript()</full_name>
        <docblock line="121">
          <description>Adds javascript files to a queue of javascript files. The name of the
file should be unique and set the path of the file or the url of the file.</description>
          <long-description></long-description>
          <tag name="param" line="121" description="&lt;p&gt;The name of script to be added. The name of script acts as key for accessing the script and the location of the script.&lt;/p&gt;" type="string" variable="$script">
            <type>string</type>
          </tag>
          <tag name="return" line="121" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="121" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$script</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="140" package="system">
        <name>enqueueJquery</name>
        <full_name>\PVLibraries::enqueueJquery()</full_name>
        <docblock line="140">
          <description>Adds jquery files to a queue of jquery files. The name of the
file should be unique and set the path of the file or the url of the file.</description>
          <long-description></long-description>
          <tag name="param" line="140" description="&lt;p&gt;The name of script to be added. The name of script acts as key for accessing the script and the location of the script.&lt;/p&gt;" type="string" variable="$script">
            <type>string</type>
          </tag>
          <tag name="return" line="140" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="140" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$script</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="159" package="system">
        <name>enqueuePrototype</name>
        <full_name>\PVLibraries::enqueuePrototype()</full_name>
        <docblock line="159">
          <description>Adds prototype files to a queue of prototype files. The name of the
file should be unique and set the path of the file or the url of the file.</description>
          <long-description></long-description>
          <tag name="param" line="159" description="&lt;p&gt;The name of script to be added. The name of script acts as key for accessing the script and the location of the script.&lt;/p&gt;" type="string" variable="$script">
            <type>string</type>
          </tag>
          <tag name="return" line="159" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="159" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$script</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="178" package="system">
        <name>enqueueMootools</name>
        <full_name>\PVLibraries::enqueueMootools()</full_name>
        <docblock line="178">
          <description>Adds mootools files to a queue of mootools files. The name of the
file should be unique and set the path of the file or the url of the file.</description>
          <long-description></long-description>
          <tag name="param" line="178" description="&lt;p&gt;The name of script to be added. The name of script acts as key for accessing the script and the location of the script.&lt;/p&gt;" type="string" variable="$script">
            <type>string</type>
          </tag>
          <tag name="return" line="178" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="178" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$script</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="197" package="system">
        <name>enqueueCss</name>
        <full_name>\PVLibraries::enqueueCss()</full_name>
        <docblock line="197">
          <description>Adds css files to a queue of css files. The name of the
file should be unique and set the path of the file or the url of the file.</description>
          <long-description></long-description>
          <tag name="param" line="197" description="&lt;p&gt;The name of script to be added. The name of script acts as key for accessing the script and the location of the script.&lt;/p&gt;" type="string" variable="$script">
            <type>string</type>
          </tag>
          <tag name="return" line="197" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="197" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$script</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="217" package="system">
        <name>enqueueOpenscript</name>
        <full_name>\PVLibraries::enqueueOpenscript()</full_name>
        <docblock line="217">
          <description>Adds a script directly into a queue to be outputted later.The script should be inputted with opening
and closing tags as it would appear when the output occurs</description>
          <long-description></long-description>
          <tag name="param" line="217" description="&lt;p&gt;The string to be added to a queue. The string does not have a key and cannot be removed once added.&lt;/p&gt;" type="string" variable="$script">
            <type>string</type>
          </tag>
          <tag name="return" line="217" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="217" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$script</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="234" package="system">
        <name>getJavascriptQueue</name>
        <full_name>\PVLibraries::getJavascriptQueue()</full_name>
        <docblock line="234">
          <description>Returns javascript file locations that have been inserted
into the queue.</description>
          <long-description></long-description>
          <tag name="return" line="234" description="$script Returns an array of scripts. The key =&gt; value are the same and should present the location of the script" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="234" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="252" package="system">
        <name>getJqueryQueue</name>
        <full_name>\PVLibraries::getJqueryQueue()</full_name>
        <docblock line="252">
          <description>Returns JQuery file locations that have been inserted
into the queue.</description>
          <long-description></long-description>
          <tag name="return" line="252" description="$script Returns an array of scripts. The key =&gt; value are the same and should present the location of the script" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="252" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="270" package="system">
        <name>getPrototypeQueue</name>
        <full_name>\PVLibraries::getPrototypeQueue()</full_name>
        <docblock line="270">
          <description>Returns Prototype file locations that have been inserted
into the queue.</description>
          <long-description></long-description>
          <tag name="return" line="270" description="$script Returns an array of scripts. The key =&gt; value are the same and should present the location of the script" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="270" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="288" package="system">
        <name>getMootoolsQueue</name>
        <full_name>\PVLibraries::getMootoolsQueue()</full_name>
        <docblock line="288">
          <description>Returns mootools file locations that have been inserted
into the queue.</description>
          <long-description></long-description>
          <tag name="return" line="288" description="$script Returns an array of scripts. The key =&gt; value are the same and should present the location of the script" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="288" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="306" package="system">
        <name>getCssQueue</name>
        <full_name>\PVLibraries::getCssQueue()</full_name>
        <docblock line="306">
          <description>Returns css file locations that have been inserted
into the queue.</description>
          <long-description></long-description>
          <tag name="return" line="306" description="$script Returns an array of scripts. The key =&gt; value are the same and should present the location of the script" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="306" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="323" package="system">
        <name>getOpenscriptQueue</name>
        <full_name>\PVLibraries::getOpenscriptQueue()</full_name>
        <docblock line="323">
          <description>Returns the open scripts that were previously added to the open script queue.</description>
          <long-description></long-description>
          <tag name="return" line="323" description="$script The scripts added will be returned in one unified string" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="323" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="349" package="system">
        <name>addLibrary</name>
        <full_name>\PVLibraries::addLibrary()</full_name>
        <docblock line="349">
          <description>Add a library that will be auto loaded when loadLibraries is called. The libraries
added will be available through the class.</description>
          <long-description></long-description>
          <tag name="param" line="349" description="&lt;p&gt;The name of folder that contains the library. By default the folder should be in the PV_Libraries&#10;&#9;&#9;  DEFINE location. Also acts as the library name when being referenced&lt;/p&gt;" type="\folder_name" variable="$folder_name">
            <type>\folder_name</type>
          </tag>
          <tag name="param" line="349" description="&lt;p&gt;Options than can be used to configure the library that will be loaded&#10;-'path' &lt;em&gt;string&lt;/em&gt;: The path to the library. The default path is PV_LIBRARIES.$folder_name.DS&#10;-'auto_load' &lt;em&gt;boolean&lt;/em&gt;: When true, library will become part of the spl_autoload. Default is true. Other the library will not be auto_loaded&#10;-'explicit_load' &lt;em&gt;boolean&lt;/em&gt;: Default is false. If set to false&#10;-'extensions' &lt;em&gt;array&lt;/em&gt;: An array of allowed file extensions that will be included when the library loads. Default is .php&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="349" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="349" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$folder_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="372" package="system">
        <name>loadLibraries</name>
        <full_name>\PVLibraries::loadLibraries()</full_name>
        <docblock line="372">
          <description>Looks through any libraries that have been added through addLibrary function. If there ae libraries
and their autoload is set to true, the library's file and folders will be included and made accessible.</description>
          <long-description></long-description>
          <tag name="return" line="372" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="372" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="401" package="system">
        <name>loadLibrary</name>
        <full_name>\PVLibraries::loadLibrary()</full_name>
        <docblock line="401">
          <description>Explicity loads a specfic library, even if autoload is set to false. If the library is already loaded, the files that have already
been included WILL NOT be re-included.</description>
          <long-description></long-description>
          <tag name="param" line="401" description="&lt;p&gt;The name of the library to be load. Will be the same name passed when addLibrary was used.&lt;/p&gt;" type="string" variable="$library_name">
            <type>string</type>
          </tag>
          <tag name="return" line="401" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="401" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$library_name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="431" package="system">
        <name>_loadLibrary</name>
        <full_name>\PVLibraries::_loadLibrary()</full_name>
        <docblock line="431">
          <description>Loads the library that is passed through. Uses include_once when including a file.</description>
          <long-description></long-description>
          <tag name="param" line="431" description="&lt;p&gt;An array of the library that contains directores, files, and file information&lt;/p&gt;" type="array" variable="$library">
            <type>array</type>
          </tag>
          <tag name="param" line="431" description="&lt;p&gt;The allowed extensions&lt;/p&gt;" type="array" variable="$allow_extensions">
            <type>array</type>
          </tag>
          <tag name="return" line="431" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="431" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$library</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$allow_extensions</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="468" package="system">
        <name>_buildAutoLoads</name>
        <full_name>\PVLibraries::_buildAutoLoads()</full_name>
        <docblock line="468">
          <description>Build an array of the classes to autoload through spl_autoload if thec classes are not automatically included.</description>
          <long-description></long-description>
          <tag name="return" line="468" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="468" description="public"/>
          <tag name="todo" line="468" description="Find a faster method for autloading"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="512" package="system">
        <name>_autoload</name>
        <full_name>\PVLibraries::_autoload()</full_name>
        <docblock line="512">
          <description>Will attempt to autoload the classes if a class cannot be found. Works with namespaced classes also.</description>
          <long-description></long-description>
          <tag name="param" line="512" description="&lt;p&gt;The name of the class to autoload&lt;/p&gt;" type="" variable="$classname"/>
          <tag name="return" line="512" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="512" description="protected"/>
          <tag name="todo" line="512" description="Fix for dealing with namespaces"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$classname</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="468">Find a faster method for autloading</todo>
      <todo line="512">Fix for dealing with namespaces</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="media/PVImage.php" generated-path="media.PVImage.html" hash="43a887e0fb6cc021cd77a90131343222" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="9" package="media">
      <extends>\PVStaticObject</extends>
      <name>PVImage</name>
      <full_name>\PVImage</full_name>
      <docblock line="9">
        <description>PVImage is a class for handling the processing and format of all image files.</description>
        <long-description>PVImage has various functions built into it such as adding watermarks, resizing, cropping and more. By default, the class will use Imagick but can be set to use other image processing tools.</long-description>
        <tag name="package" line="9" description="media"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="14" package="media">
        <name>$_converter</name>
        <full_name>\PVImage::$_converter</full_name>
        <default>'imagick'</default>
        <docblock line="14">
          <description>The tool used to process images, default imagic but can be GD or another class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="19" package="media">
        <name>$_write_image</name>
        <full_name>\PVImage::$_write_image</full_name>
        <default>false</default>
        <docblock line="19">
          <description>Boolean to automatically an image to file, setup in the PV_IMAGE constant.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="24" package="media">
        <name>$_write_image_location</name>
        <full_name>\PVImage::$_write_image_location</full_name>
        <default>PV_IMAGE</default>
        <docblock line="24">
          <description>If write_image is set to true, the location to write the image</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="29" package="media">
        <name>$_display_image</name>
        <full_name>\PVImage::$_display_image</full_name>
        <default>false</default>
        <docblock line="29">
          <description>Boolean to display the image once processed. Will add image headers.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="34" package="media">
        <name>$_add_extension</name>
        <full_name>\PVImage::$_add_extension</full_name>
        <default>true</default>
        <docblock line="34">
          <description>For processed images, will automatically add the correct extenison to the image</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="39" package="media">
        <name>$_return</name>
        <full_name>\PVImage::$_return</full_name>
        <default>'image_object'</default>
        <docblock line="39">
          <description>For processed images, can return various types including the Imagick Object, string of bytes, or the location if written to file.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="56" package="media">
        <name>init</name>
        <full_name>\PVImage::init()</full_name>
        <docblock line="56">
          <description>Initalize the PVImage class with default variables for image conversion</description>
          <long-description></long-description>
          <tag name="param" line="56" description="&lt;p&gt;@config An array of options to set as the default&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The tool to be used for conversion. Default is Imagick&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Specifies to write the image to file. Default is true&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The default location to write the image to. Default is PV_ROOT.PV_IMAGE defines.&#10;-'display_image' &lt;em&gt;boolean&lt;/em&gt;: The default boolean to display the image in a header after processing of method is complete. Default is false.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Will add an extension to then of the file if it is written. The extension will be the image type&#10;-'return' &lt;em&gt;string&lt;/em&gt;: The default return. The default set is image_location to return the location of the written image file. The&#10;other option is 'image_object' which return the object to manipuate the image or 'image_bytes' which will return the image in a string of bytes&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="56" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="56" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="90" package="media">
        <name>resizeImageGD</name>
        <full_name>\PVImage::resizeImageGD()</full_name>
        <docblock line="90">
          <description>Resizes the image use GD, not Imagick</description>
          <long-description></long-description>
          <tag name="param" line="90" description="&lt;p&gt;The location and name of the file&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="90" description="&lt;p&gt;The name an location of the new file&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="param" line="90" description="&lt;p&gt;The new width to resize too&lt;/p&gt;" type="double" variable="$new_w">
            <type>double</type>
          </tag>
          <tag name="param" line="90" description="&lt;p&gt;The new height to resize too&lt;/p&gt;" type="double" variable="$new_h">
            <type>double</type>
          </tag>
          <tag name="return" line="90" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="todo" line="90" description="revisit implementation"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$new_w</name>
          <default>150</default>
          <type>double</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$new_h</name>
          <default>150</default>
          <type>double</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="149" package="media">
        <name>cropImage</name>
        <full_name>\PVImage::cropImage()</full_name>
        <docblock line="149">
          <description>Crops the image</description>
          <long-description></long-description>
          <tag name="param" line="149" description="&lt;p&gt;The name and location of the file to crop&lt;/p&gt;" type="string" variable="$src">
            <type>string</type>
          </tag>
          <tag name="param" line="149" description="&lt;p&gt;The location to output the new file&lt;/p&gt;" type="string" variable="$output">
            <type>string</type>
          </tag>
          <tag name="param" line="149" description="&lt;p&gt;The width of the file&lt;/p&gt;" type="double" variable="$width">
            <type>double</type>
          </tag>
          <tag name="param" line="149" description="&lt;p&gt;The hieght of the file&lt;/p&gt;" type="double" variable="$height">
            <type>double</type>
          </tag>
          <tag name="return" line="149" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="todo" line="149" description="redo and finish, output is never being called"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$src</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$output</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$width</name>
          <default></default>
          <type>double</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$height</name>
          <default></default>
          <type>double</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="187" package="media">
        <name>watermarkImageWithText</name>
        <full_name>\PVImage::watermarkImageWithText()</full_name>
        <docblock line="187">
          <description>Add's a watermark to an image. By default use imagick but if that is not installed,
the default will be gd.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="&lt;p&gt;The value passed in can either be the location on a file system or the images in bytes. If&#10;the image is bytes, the options 'type' = blob my be set.&lt;/p&gt;" type="mixed" variable="$image">
            <type>mixed</type>
          </tag>
          <tag name="param" line="187" description="&lt;p&gt;The the text to add as a watermark&lt;/p&gt;" type="string" variable="$watermark">
            <type>string</type>
          </tag>
          <tag name="param" line="187" description="&lt;p&gt;Options that can be used for further configuring the dropshadow&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function.&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'display_image' &lt;em&gt;boolean&lt;/em&gt;: Determines if the image is to be displayed automatically in a header. Default is false.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is png.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The format the image is in before manipulation. If a blob fo byties is being passed set type to 'blob', otherwise type will be file.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="187" description="$return The data to be returned. The type of data that is returned is set in the options" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="187" description="public"/>
          <tag name="todo" line="187" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$image</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$watermark</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="306" package="media">
        <name>watermarkImageWithImage</name>
        <full_name>\PVImage::watermarkImageWithImage()</full_name>
        <docblock line="306">
          <description>Creates a watermark over an image with another image</description>
          <long-description></long-description>
          <tag name="param" line="306" description="&lt;p&gt;The value passed in can either be the location on a file system or the images in bytes. If&#10;the image is bytes, the options 'type' = blob my be set.&lt;/p&gt;" type="mixed" variable="$image">
            <type>mixed</type>
          </tag>
          <tag name="param" line="306" description="&lt;p&gt;The location of the image or base the image in as a blob&lt;/p&gt;" type="string" variable="$watermark">
            <type>string</type>
          </tag>
          <tag name="param" line="306" description="&lt;p&gt;Options that can be used for further configuring the dropshadow&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function.&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'display_image' &lt;em&gt;boolean&lt;/em&gt;: Determines if the image is to be displayed automatically in a header. Default is false.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is png.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The format the image is in before manipulation. If a blob fo byties is being passed set type to 'blob', otherwise type will be file.&#10;-'offest_x' &lt;em&gt;int&lt;/em&gt;: The offset on the x_coordinate when placing the drop shadow. Default is 0&#10;-'offeset_y' &lt;em&gt;int&lt;/em&gt;: The offset on the y_coordinate when placing the drop shadow. Default is 0.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="306" description="$return The data to be returned. The type of data that is returned is set in the options" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="306" description="public"/>
          <tag name="todo" line="306" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$image</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$watermark</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="417" package="media">
        <name>convertImageFormat</name>
        <full_name>\PVImage::convertImageFormat()</full_name>
        <docblock line="417">
          <description>Converts an image to another format.</description>
          <long-description></long-description>
          <tag name="param" line="417" description="&lt;p&gt;The image can either be the location of an image on a server or a bytes of an image. If the passed variable is&#10;bytes, remember to set the option type to 'blob'&lt;/p&gt;" type="mixed" variable="$image">
            <type>mixed</type>
          </tag>
          <tag name="param" line="417" description="&lt;p&gt;The format to change the image into. The most common are png, gif and jpeg.&lt;/p&gt;" type="string" variable="$format">
            <type>string</type>
          </tag>
          <tag name="param" line="417" description="&lt;p&gt;Options that can alter the conversion process&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is gif.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="417" description="$value The value return is set by the option. Either the location to the file is return or the object for creating the image." type="\$mixed">
            <type>\$mixed</type>
          </tag>
          <tag name="access" line="417" description="public"/>
          <tag name="todo" line="417" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$image</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$format</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="505" package="media">
        <name>scaleImage</name>
        <full_name>\PVImage::scaleImage()</full_name>
        <docblock line="505">
          <description>Scale an image to a new size based on the passed width and height.</description>
          <long-description></long-description>
          <tag name="param" line="505" description="&lt;p&gt;Either pass the location of the file on a server or the image as bytes. If the image is passed as bytes,&#10;set the options type to 'blob'&lt;/p&gt;" type="mixed" variable="$image">
            <type>mixed</type>
          </tag>
          <tag name="param" line="505" description="&lt;p&gt;The width to scale the image too&lt;/p&gt;" type="double" variable="$width">
            <type>double</type>
          </tag>
          <tag name="param" line="505" description="&lt;p&gt;The height to scale the image too.&lt;/p&gt;" type="double" variable="$height">
            <type>double</type>
          </tag>
          <tag name="param" line="505" description="&lt;p&gt;Options that control the animating of images&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is gif.&#10;-'bestfit' &lt;em&gt;boolean&lt;/em&gt;: Scales image to the best fit. Default is false.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="505" description="$value The value return is set by the option. Either the location to the file is return or the object for creating the image." type="\$mixed">
            <type>\$mixed</type>
          </tag>
          <tag name="access" line="505" description="public"/>
          <tag name="todo" line="505" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$image</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$width</name>
          <default></default>
          <type>double</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$height</name>
          <default></default>
          <type>double</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="582" package="media">
        <name>getImageWidth</name>
        <full_name>\PVImage::getImageWidth()</full_name>
        <docblock line="582">
          <description>Returns the width image of the image. By default, Imagick will be used if it installed,
otherwise the GD libraries will be used.</description>
          <long-description></long-description>
          <tag name="param" line="582" description="&lt;p&gt;The location of the image&lt;/p&gt;" type="string" variable="$image">
            <type>string</type>
          </tag>
          <tag name="param" line="582" description="" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="582" description="$width The width of the image" type="integer">
            <type>integer</type>
          </tag>
          <tag name="access" line="582" description="public"/>
          <tag name="todo" line="582" description="implement with GD functions"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$image</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="630" package="media">
        <name>getImageHeight</name>
        <full_name>\PVImage::getImageHeight()</full_name>
        <docblock line="630">
          <description>Returns the height image of the image. By default, Imagick will be used if it installed,
otherwise the GD libraries will be used.</description>
          <long-description></long-description>
          <tag name="param" line="630" description="&lt;p&gt;The location of the image&lt;/p&gt;" type="string" variable="$image">
            <type>string</type>
          </tag>
          <tag name="param" line="630" description="" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="630" description="$height The height of the image" type="integer">
            <type>integer</type>
          </tag>
          <tag name="access" line="630" description="public"/>
          <tag name="todo" line="630" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$image</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="688" package="media">
        <name>animateImage</name>
        <full_name>\PVImage::animateImage()</full_name>
        <docblock line="688">
          <description>Takes an array of images and put them into an animated gif. The method accepts images as blobs/bytes,
locations to a file, or an imagick object that is holding an image.</description>
          <long-description></long-description>
          <tag name="param" line="688" description="&lt;p&gt;The day is the array of images to be passed in. The data at each index can either be&#10;a blog/bytes, location to a file, or an imagick object with animage&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="688" description="&lt;p&gt;Options that control the animating of images&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is gif.&#10;-'image_delay' &lt;em&gt;integer&lt;/em&gt;: The delay between the images, default is 30&#10;-'image_width' &lt;em&gt;integer&lt;/em&gt;: The width of the images&#10;-'image_height' &lt;em&gt;integer&lt;/em&gt;: The height of the images&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="688" description="$value The value return is set by the option. Either the location to the file is return or the object for creating the image." type="\$mixed">
            <type>\$mixed</type>
          </tag>
          <tag name="access" line="688" description="public"/>
          <tag name="todo" line="688" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="797" package="media">
        <name>animateText</name>
        <full_name>\PVImage::animateText()</full_name>
        <docblock line="797">
          <description>Combines an array of strings together to create an image of animated text.</description>
          <long-description></long-description>
          <tag name="param" line="797" description="&lt;p&gt;The array of strings. Each index in the array should be a different string&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="797" description="&lt;p&gt;An array of options that can determine how the string will be animated&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function.&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'display_image' &lt;em&gt;boolean&lt;/em&gt;: Determines if the image is to be displayed automatically in a header. Default is false.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is gif.&#10;-'image_delay' &lt;em&gt;integer&lt;/em&gt;: The delay between the images, default is 30&#10;-'image_width' &lt;em&gt;integer&lt;/em&gt;: The width of the images&#10;-'image_height' &lt;em&gt;integer&lt;/em&gt;: The height of the images&#10;-'font' &lt;em&gt;string&lt;/em&gt;: The font to be used when writing text. Defaultis Helvetica&#10;-'font_size' &lt;em&gt;int&lt;/em&gt;: The size of the font to be used. Default is 20&#10;-'font_color' &lt;em&gt;string&lt;/em&gt;: The color of the font. Default is black.&#10;-'font_style' &lt;em&gt;int&lt;/em&gt;: The style of the font. Default is Imagick::Style_Normal&#10;-'fill_alpha' _double: The number between 0 and 1 on how transparent the text is. Default is 1.&#10;-'position_x' &lt;em&gt;int&lt;/em&gt;: The starting position of the text on the x-coordinate. Default is 0.&#10;-'position_y' &lt;em&gt;int&lt;/em&gt;: The starting position of the text on the y-coordinate. Default is 0.&#10;-'rotation' &lt;em&gt;int&lt;/em&gt;: The number of degress to rotate the text. Default is 0.&#10;-'gravity' &lt;em&gt;int&lt;/em&gt;: The imagick defined constant on the gravity of the text. Default is Imagick::GRAVITY_CENTER&#10;-'pixel_color' &lt;em&gt;string&lt;/em&gt;: Serves as the background color the text will be placed on. Default is white&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="797" description="$return The data to be return. Return is set in the options" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="797" description="public"/>
          <tag name="todo" line="797" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="916" package="media">
        <name>textToImage</name>
        <full_name>\PVImage::textToImage()</full_name>
        <docblock line="916">
          <description>Converts a string of text into an image</description>
          <long-description></long-description>
          <tag name="param" line="916" description="&lt;p&gt;The string to be converted into an image&lt;/p&gt;" type="array" variable="$string">
            <type>array</type>
          </tag>
          <tag name="param" line="916" description="&lt;p&gt;An array of options that can determine how the string will be animated&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function.&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'display_image' &lt;em&gt;boolean&lt;/em&gt;: Determines if the image is to be displayed automatically in a header. Default is false.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is gif.&#10;-'image_delay' &lt;em&gt;integer&lt;/em&gt;: The delay between the images, default is 30&#10;-'image_width' &lt;em&gt;integer&lt;/em&gt;: The width of the images&#10;-'image_height' &lt;em&gt;integer&lt;/em&gt;: The height of the images&#10;-'font' &lt;em&gt;string&lt;/em&gt;: The font to be used when writing text. Defaultis Helvetica&#10;-'font_size' &lt;em&gt;int&lt;/em&gt;: The size of the font to be used. Default is 20&#10;-'font_color' &lt;em&gt;string&lt;/em&gt;: The color of the font. Default is black.&#10;-'font_style' &lt;em&gt;int&lt;/em&gt;: The style of the font. Default is Imagick::Style_Normal&#10;-'fill_alpha' _double: The number between 0 and 1 on how transparent the text is. Default is 1.&#10;-'position_x' &lt;em&gt;int&lt;/em&gt;: The starting position of the text on the x-coordinate. Default is 0.&#10;-'position_y' &lt;em&gt;int&lt;/em&gt;: The starting position of the text on the y-coordinate. Default is 0.&#10;-'rotation' &lt;em&gt;int&lt;/em&gt;: The number of degress to rotate the text. Default is 0.&#10;-'gravity' &lt;em&gt;int&lt;/em&gt;: The imagick defined constant on the gravity of the text. Default is Imagick::GRAVITY_CENTER&#10;-'pixel_color' &lt;em&gt;string&lt;/em&gt;: Serves as the background color the text will be placed on. Default is white&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="916" description="$return The data to be returned. The type of data that is returned is set in the options" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="916" description="public"/>
          <tag name="todo" line="916" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1022" package="media">
        <name>drawImage</name>
        <full_name>\PVImage::drawImage()</full_name>
        <docblock line="1022">
          <description>Creates an rectangular image.</description>
          <long-description></long-description>
          <tag name="param" line="1022" description="&lt;p&gt;The width of the image&lt;/p&gt;" type="integer" variable="$width">
            <type>integer</type>
          </tag>
          <tag name="param" line="1022" description="&lt;p&gt;The height of the image&lt;/p&gt;" type="integer" variable="$height">
            <type>integer</type>
          </tag>
          <tag name="param" line="1022" description="&lt;p&gt;The color of the image&lt;/p&gt;" type="string" variable="$color">
            <type>string</type>
          </tag>
          <tag name="param" line="1022" description="&lt;p&gt;Options that can be used to configure the drawing of the shape&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function.&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'display_image' &lt;em&gt;boolean&lt;/em&gt;: Determines if the image is to be displayed automatically in a header. Default is false.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is png.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1022" description="$return The data to be returned. The type of data that is returned is set in the options" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="1022" description="public"/>
          <tag name="todo" line="1022" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$width</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$height</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$color</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1105" package="media">
        <name>drawEllipse</name>
        <full_name>\PVImage::drawEllipse()</full_name>
        <docblock line="1105">
          <description>Draws an ellipse shape based on the passed values.</description>
          <long-description></long-description>
          <tag name="param" line="1105" description="&lt;p&gt;The width of the ellipse&lt;/p&gt;" type="double" variable="$width">
            <type>double</type>
          </tag>
          <tag name="param" line="1105" description="&lt;p&gt;The height of the ellipse&lt;/p&gt;" type="double" variable="$height">
            <type>double</type>
          </tag>
          <tag name="param" line="1105" description="&lt;p&gt;The color of the ellipse&lt;/p&gt;" type="string" variable="$color">
            <type>string</type>
          </tag>
          <tag name="param" line="1105" description="&lt;p&gt;Options that can be used for further configuring the ellipse&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function.&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'display_image' &lt;em&gt;boolean&lt;/em&gt;: Determines if the image is to be displayed automatically in a header. Default is false.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is png.&#10;-'offest_x' &lt;em&gt;int&lt;/em&gt;: The offset on the x_coordinate when drawing the ellipse. Default is the width/2&#10;-'offeset_y' &lt;em&gt;int&lt;/em&gt;: The offset on the y_coordinate when drawign the ellipse. Default is height/2&#10;-'radius_x' &lt;em&gt;int&lt;/em&gt;: Default is width/2&#10;-'radius_y' &lt;em&gt;int&lt;/em&gt;: Default height /2&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1105" description="$return The data to be returned. The type of data that is returned is set in the options" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="1105" description="public"/>
          <tag name="todo" line="1105" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$width</name>
          <default></default>
          <type>double</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$height</name>
          <default></default>
          <type>double</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$color</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1199" package="media">
        <name>drawDropShadow</name>
        <full_name>\PVImage::drawDropShadow()</full_name>
        <docblock line="1199">
          <description>Creates a drop shadown behind an image.</description>
          <long-description></long-description>
          <tag name="param" line="1199" description="&lt;p&gt;The value passed in can either be the location on a file system or the images in bytes. If&#10;the image is bytes, the options 'type' = blob my be set.&lt;/p&gt;" type="mixed" variable="$image">
            <type>mixed</type>
          </tag>
          <tag name="param" line="1199" description="&lt;p&gt;Options that can be used for further configuring the dropshadow&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The default converter set by the init function.&#10;-'write_image' &lt;em&gt;boolean&lt;/em&gt;: Write the image out to file. Default is true.&#10;-'write_image_location' &lt;em&gt;string&lt;/em&gt;: The location to save the image. Default is the save location set in the init&#10;-'write_image_name' &lt;em&gt;string&lt;/em&gt;: A name to save the image as. Default is a random string.&#10;-'display_image' &lt;em&gt;boolean&lt;/em&gt;: Determines if the image is to be displayed automatically in a header. Default is false.&#10;-'add_extension' &lt;em&gt;boolean&lt;/em&gt;: Add a file extension to the write_image_name. Default is true.&#10;-'return' &lt;em&gt;string&lt;/em&gt;: Specifiy to return an object or file location. Default is set in the init()&#10;-'format' &lt;em&gt;string&lt;/em&gt;: The format to save the image in. Default is png.&#10;-'offest_x' &lt;em&gt;int&lt;/em&gt;: The offset on the x_coordinate when placing the drop shadow. Default is 0&#10;-'offeset_y' &lt;em&gt;int&lt;/em&gt;: The offset on the y_coordinate when placing the drop shadow. Default is 0.&#10;-'radius_x' &lt;em&gt;int&lt;/em&gt;: Default is width/2&#10;-'radius_y' &lt;em&gt;int&lt;/em&gt;: Default height /2&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1199" description="$return The data to be returned. The type of data that is returned is set in the options" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="1199" description="public"/>
          <tag name="todo" line="1199" description="add GD support"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$image</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="90">revisit implementation</todo>
      <todo line="149">redo and finish, output is never being called</todo>
      <todo line="187">add GD support</todo>
      <todo line="306">add GD support</todo>
      <todo line="417">add GD support</todo>
      <todo line="505">add GD support</todo>
      <todo line="582">implement with GD functions</todo>
      <todo line="630">add GD support</todo>
      <todo line="688">add GD support</todo>
      <todo line="797">add GD support</todo>
      <todo line="916">add GD support</todo>
      <todo line="1022">add GD support</todo>
      <todo line="1105">add GD support</todo>
      <todo line="1199">add GD support</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="util/PVMathematics.php" generated-path="util.PVMathematics.html" hash="3b57537ca6913e9660808b59897a727a" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="9" package="util">
      <extends>\PVStaticObject</extends>
      <name>PVMathematics</name>
      <full_name>\PVMathematics</full_name>
      <docblock line="9">
        <description>PVMathematics is a class for doing computations.</description>
        <long-description>The class is relatively incomplete and could use more important functions to ease development.</long-description>
        <tag name="package" line="9" description="util"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="22" package="util">
        <name>convertTimeIntoSeconds</name>
        <full_name>\PVMathematics::convertTimeIntoSeconds()</full_name>
        <docblock line="22">
          <description>Converts a given time into seconds.</description>
          <long-description></long-description>
          <tag name="param" line="22" description="&lt;p&gt;The number of days to convert&lt;/p&gt;" type="integer" variable="$days">
            <type>integer</type>
          </tag>
          <tag name="param" line="22" description="&lt;p&gt;The number of hours to convert&lt;/p&gt;" type="integer" variable="$hours">
            <type>integer</type>
          </tag>
          <tag name="param" line="22" description="&lt;p&gt;The number of minutes to convert&lt;/p&gt;" type="integer" variable="$minutes">
            <type>integer</type>
          </tag>
          <tag name="param" line="22" description="&lt;p&gt;The number of seconds to converts&lt;/p&gt;" type="integer" variable="$seconds">
            <type>integer</type>
          </tag>
          <tag name="return" line="22" description="$seconds Returns the total number of seconds based upon passed arguements" type="integer">
            <type>integer</type>
          </tag>
          <tag name="access" line="22" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$days</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$hours</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$minutes</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$seconds</name>
          <default>0</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="60" package="util">
        <name>convertSecondsToHours</name>
        <full_name>\PVMathematics::convertSecondsToHours()</full_name>
        <docblock line="60">
          <description>Converts the number of seconds page into hours</description>
          <long-description></long-description>
          <tag name="param" line="60" description="&lt;p&gt;The amount of seconds&lt;/p&gt;" type="integer" variable="$seconds">
            <type>integer</type>
          </tag>
          <tag name="return" line="60" description="$hours The number of hours converted by the past seconds" type="double">
            <type>double</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$seconds</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="72" package="util">
        <name>convertSecondsToMinutes</name>
        <full_name>\PVMathematics::convertSecondsToMinutes()</full_name>
        <docblock line="72">
          <description>Converts Seconds into minutes</description>
          <long-description></long-description>
          <tag name="param" line="72" description="&lt;p&gt;The amount of seconds&lt;/p&gt;" type="integer" variable="$seconds">
            <type>integer</type>
          </tag>
          <tag name="return" line="72" description="$minutes The number of minutes" type="double">
            <type>double</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$seconds</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="84" package="util">
        <name>convertSecondsToDays</name>
        <full_name>\PVMathematics::convertSecondsToDays()</full_name>
        <docblock line="84">
          <description>Converts the number of seconds into days</description>
          <long-description></long-description>
          <tag name="param" line="84" description="&lt;p&gt;The amount of seconds&lt;/p&gt;" type="integer" variable="$seconds">
            <type>integer</type>
          </tag>
          <tag name="return" line="84" description="$days The number of days derived from those seconds" type="double">
            <type>double</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$seconds</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="96" package="util">
        <name>convertSecondsIntoElapsedTime</name>
        <full_name>\PVMathematics::convertSecondsIntoElapsedTime()</full_name>
        <docblock line="96">
          <description>Converts the seconds between two periods in an elasped time</description>
          <long-description></long-description>
          <tag name="param" line="96" description="&lt;p&gt;The number of seconds&lt;/p&gt;" type="integer" variable="$seconds">
            <type>integer</type>
          </tag>
          <tag name="return" line="96" description="$timeElasped" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$seconds</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="_classLoader.php" generated-path="_classLoader.html" hash="388bc68cb7150322bcbfac234ac38fbb" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <function namespace="" line="12" package="Default">
      <name>systemLoader</name>
      <full_name>\systemLoader()</full_name>
      <docblock line="12">
        <description>Load the system classes</description>
        <long-description></long-description>
        <tag name="package" line="12" description="Default"/>
        <tag name="param" line="12" description="&lt;p&gt;The name of the class to load&lt;/p&gt;" type="string" variable="$class">
          <type>string</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$class</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="29" package="Default">
      <name>templateLoader</name>
      <full_name>\templateLoader()</full_name>
      <docblock line="29">
        <description>Load the template classes</description>
        <long-description></long-description>
        <tag name="package" line="29" description="Default"/>
        <tag name="param" line="29" description="&lt;p&gt;The name of the class to load&lt;/p&gt;" type="string" variable="$class">
          <type>string</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$class</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="46" package="Default">
      <name>utilLoader</name>
      <full_name>\utilLoader()</full_name>
      <docblock line="46">
        <description>Load the utility classes</description>
        <long-description></long-description>
        <tag name="package" line="46" description="Default"/>
        <tag name="param" line="46" description="&lt;p&gt;The name of the class to load&lt;/p&gt;" type="string" variable="$class">
          <type>string</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$class</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="63" package="Default">
      <name>dataLoader</name>
      <full_name>\dataLoader()</full_name>
      <docblock line="63">
        <description>Load the data classes</description>
        <long-description></long-description>
        <tag name="package" line="63" description="Default"/>
        <tag name="param" line="63" description="&lt;p&gt;The name of the class to load&lt;/p&gt;" type="string" variable="$class">
          <type>string</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$class</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="80" package="Default">
      <name>mediaLoader</name>
      <full_name>\mediaLoader()</full_name>
      <docblock line="80">
        <description>Load the media classes</description>
        <long-description></long-description>
        <tag name="package" line="80" description="Default"/>
        <tag name="param" line="80" description="&lt;p&gt;The name of the class to load&lt;/p&gt;" type="string" variable="$class">
          <type>string</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$class</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <function namespace="" line="97" package="Default">
      <name>networkLoader</name>
      <full_name>\networkLoader()</full_name>
      <docblock line="97">
        <description>Load the network classes</description>
        <long-description></long-description>
        <tag name="package" line="97" description="Default"/>
        <tag name="param" line="97" description="&lt;p&gt;The name of the class to load&lt;/p&gt;" type="string" variable="$class">
          <type>string</type>
        </tag>
      </docblock>
      <argument line="0" by_reference="false">
        <name>$class</name>
        <default></default>
        <type>string</type>
      </argument>
    </function>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="network/PVRouter.php" generated-path="network.PVRouter.html" hash="0bacdceb7e0345a0050262f5945e04d3" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="9" package="network">
      <extends>\PVStaticObject</extends>
      <name>PVRouter</name>
      <full_name>\PVRouter</full_name>
      <docblock line="9">
        <description>PVRouter is responsible for parsing the URL setting up the ability for routing within your application.</description>
        <long-description>Applications, especially with Frontend Controller Design Pattern, may require routing to get a user to their destination correctly. This class can take rules, route and correctly navigate the user to their destination.</long-description>
        <tag name="package" line="9" description="network"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="private" namespace="" line="14" package="network">
        <name>$routes</name>
        <full_name>\PVRouter::$routes</full_name>
        <default></default>
        <docblock line="14">
          <description>A list of routes that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="19" package="network">
        <name>$route_parameters</name>
        <full_name>\PVRouter::$route_parameters</full_name>
        <default></default>
        <docblock line="19">
          <description>Items within a route, after is has been parsed</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="24" package="network">
        <name>$route_options</name>
        <full_name>\PVRouter::$route_options</full_name>
        <default></default>
        <docblock line="24">
          <description>Configurationoptions around a route</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="29" package="network">
        <name>$seo_urls</name>
        <full_name>\PVRouter::$seo_urls</full_name>
        <default></default>
        <docblock line="29">
          <description>Attempt to make Seo friendy urls</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="34" package="network">
        <name>$default_rule_replace</name>
        <full_name>\PVRouter::$default_rule_replace</full_name>
        <default>'/:([a-z]+)/'</default>
        <docblock line="34">
          <description>Specifies what to look for when defining a parameter in a router</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="39" package="network">
        <name>$default_route_replace</name>
        <full_name>\PVRouter::$default_route_replace</full_name>
        <default>'(?P&lt;\1&gt;[^/]+)'</default>
        <docblock line="39">
          <description>When a rule is found, speficies what to replace it with before parsing</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="54" package="network">
        <name>init</name>
        <full_name>\PVRouter::init()</full_name>
        <docblock line="54">
          <description>Initializes the router and sets up default parameters and default rules
for using the router. Seo urls is the ability to create and use easily
readabable urls.</description>
          <long-description></long-description>
          <tag name="param" line="54" description="&lt;p&gt;The configuration to add to the router.&#10;-'seo_urls' &lt;em&gt;boolean&lt;/em&gt;: Defaulted to true, specifiy to always make the urls appear seo friendly&#10;-'default_rule_replace' &lt;em&gt;string&lt;/em&gt;: Specifies what to look for when defining a parameter in a router&#10;-'default_route_replace' &lt;em&gt;string&lt;/em&gt; : When a rule is found, speficies what to replace it with before parsing&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="54" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="54" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="92" package="network">
        <name>activateSSL</name>
        <full_name>\PVRouter::activateSSL()</full_name>
        <docblock line="92">
          <description>Checks the HTTPS is currently on. If its not then nothiing
is done, else it will redirect to an SSL connection.</description>
          <long-description></long-description>
          <tag name="param" line="92" description="&lt;p&gt;An Optional parameter to be redirected to.&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="return" line="92" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="92" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="121" package="network">
        <name>deactivateSSL</name>
        <full_name>\PVRouter::deactivateSSL()</full_name>
        <docblock line="121">
          <description>If the current url is open on an SSL connection,
the url will be made into a normal connectin.</description>
          <long-description></long-description>
          <tag name="param" line="121" description="&lt;p&gt;url: An option parameter of defing where to redirect too&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="159" package="network">
        <name>addRouteRule</name>
        <full_name>\PVRouter::addRouteRule()</full_name>
        <docblock line="159">
          <description>Adds a rule to the router. The rule determines how the
router will react.</description>
          <long-description>.</long-description>
          <tag name="param" line="159" description="&lt;p&gt;Can a string that merely sets a rule or an array with configuration information for rule.&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;'rule' &lt;em&gt;string&lt;/em&gt;: A rule to follow that will be matched using a preg_match.&lt;/li&gt;&#10;&lt;li&gt;'redirect' &lt;em&gt;string&lt;/em&gt;: A location to redirect if the uri matches the rule&lt;/li&gt;&#10;&lt;li&gt;'access_level' &lt;em&gt;int&lt;/em&gt;: A level of access required for the matching rule.&lt;/li&gt;&#10;&lt;li&gt;'access_level_redirect' &lt;em&gt;string&lt;/em&gt;: The location to be redirected too if the route matches and&#10;the access level was not high enough.&lt;/li&gt;&#10;&lt;li&gt;'user_roles' &lt;em&gt;array&lt;/em&gt;: An array of user roles that are allowed to access this location&lt;/li&gt;&#10;&lt;li&gt;'user_roles_redirect' &lt;em&gt;string&lt;/em&gt;: A location to be redirected to if the route matches and the&#10;required role was not present.&lt;/li&gt;&#10;&lt;/ul&gt;" type="mixed" variable="$route">
            <type>mixed</type>
          </tag>
          <tag name="return" line="159" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$route</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="196" package="network">
        <name>setRoute</name>
        <full_name>\PVRouter::setRoute()</full_name>
        <docblock line="196">
          <description>Sets the current uri. If the uri is empty, the default uri will be used. How the uri
will react depends on how the route rules are specified. If redirects are set and the uri
matches a rule, a redirect will be automatically instantied.</description>
          <long-description></long-description>
          <tag name="param" line="196" description="&lt;p&gt;uri: The uri to set.&lt;/p&gt;" type="string" variable="$uri">
            <type>string</type>
          </tag>
          <tag name="return" line="196" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="196" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$uri</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="324" package="network">
        <name>getRouteVariable</name>
        <full_name>\PVRouter::getRouteVariable()</full_name>
        <docblock line="324">
          <description>Gets the variable if specified in a rule.</description>
          <long-description>Example:
PVRouter::addRouteRule('/:controller/:action/:id');

PVRouter::setRoute(/post/view/3124);

$id=PVRouter::getRouteVariable('id');
echo $id
//Should print 3124</long-description>
          <tag name="param" line="324" description="&lt;p&gt;A variable to retrieve that is in the url&lt;/p&gt;" type="string" variable="$parameter">
            <type>string</type>
          </tag>
          <tag name="return" line="324" description="$variable Gets the variable, if it exist." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="324" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameter</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="345" package="network">
        <name>getRouteVariables</name>
        <full_name>\PVRouter::getRouteVariables()</full_name>
        <docblock line="345">
          <description>Returns all the variables that are specified in a route.</description>
          <long-description></long-description>
          <tag name="return" line="345" description="" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="345" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="368" package="network">
        <name>getRouteParameter</name>
        <full_name>\PVRouter::getRouteParameter()</full_name>
        <docblock line="368">
          <description>Returns a parameter that is embeed within the route.</description>
          <long-description></long-description>
          <tag name="param" line="368" description="&lt;p&gt;The parameter being looked for&lt;/p&gt;" type="string" variable="$parameter">
            <type>string</type>
          </tag>
          <tag name="return" line="368" description="The found value, if any" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$parameter</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="379" package="network">
        <name>getRoute</name>
        <full_name>\PVRouter::getRoute()</full_name>
        <docblock line="379">
          <description>Returns the current options associated with the route,
if they have been set.</description>
          <long-description></long-description>
          <tag name="return" line="379" description="options: The options associated with the set route" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="379" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="409" package="network">
        <name>url</name>
        <full_name>\PVRouter::url()</full_name>
        <docblock line="409">
          <description>If SEO Urls is on and the url has query data present,
the data will be converted to search engine friendly
urls.</description>
          <long-description>Example:
$url = PVRouter::url(index.php?id=gohard&amp;option=gohome);
echo $url

//Will print out /gohard/gohome</long-description>
          <tag name="param" line="409" description="&lt;p&gt;A url to be parsed&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="param" line="409" description="" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="409" description="$url Returns the url" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="409" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="459" package="network">
        <name>redirect</name>
        <full_name>\PVRouter::redirect()</full_name>
        <docblock line="459">
          <description>If the url is a valid url, such as another site, the url will be point to that site.</description>
          <long-description>Otherwise it is run through the router and actions are taken if needed.</long-description>
          <tag name="param" line="459" description="&lt;p&gt;A url to be redirected too.&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="param" line="459" description="&lt;p&gt;Exit script after header is set&lt;/p&gt;" type="boolean" variable="$exit">
            <type>boolean</type>
          </tag>
          <tag name="return" line="459" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="459" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$exit</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="484" package="network">
        <name>isSecureConnection</name>
        <full_name>\PVRouter::isSecureConnection()</full_name>
        <docblock line="484">
          <description>Determines of the connection is secure behind SSL to TLS. Default
functionality utilizes the server.</description>
          <long-description></long-description>
          <tag name="return" line="484" description="Return true is secure, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="util/PVCache.php" generated-path="util.PVCache.html" hash="bc57e3faef98bcdd1b9abddb810b404f" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="27" package="util">
      <extends>\PVStaticObject</extends>
      <name>PVCache</name>
      <full_name>\PVCache</full_name>
      <docblock line="27">
        <description>PVCache is a system for caching data and retrieving cached data.</description>
        <long-description>The default system uses a file cache for caching data. But the system through the adapter pattern is extendable to use any caching system attached to the application.

Example:
```php
//Init The Cache
PVCache::init();

$data = array('Apples', 'Oranges', 'Bananas');

//Check if cache has expired
if(PVCache::hasExpired('mycache')):
	 //Store The Cache
	 PVCache::writeCache('mycache', $data);
endif;

$data = PVCache::readCache('mycache');

print_r($data);
```</long-description>
        <tag name="package" line="27" description="util"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="32" package="util">
        <name>$_cache_location</name>
        <full_name>\PVCache::$_cache_location</full_name>
        <default>'/tmp/'</default>
        <docblock line="32">
          <description>File location to store the cache</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="37" package="util">
        <name>$_cache_format</name>
        <full_name>\PVCache::$_cache_format</full_name>
        <default>'Y-m-d H:i:s'</default>
        <docblock line="37">
          <description>The date format for storing the cache</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="42" package="util">
        <name>$_cache_format_search</name>
        <full_name>\PVCache::$_cache_format_search</full_name>
        <default>'/\d{4}\-\d{2}\-\d{2} \d{2}:\d{2}:\d{2}/'</default>
        <docblock line="42">
          <description>The regular expression for searching for cache</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="47" package="util">
        <name>$_cache_name</name>
        <full_name>\PVCache::$_cache_name</full_name>
        <default>'cache:'</default>
        <docblock line="47">
          <description>The name to preprend to cache</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="52" package="util">
        <name>$_enclosing_tags</name>
        <full_name>\PVCache::$_enclosing_tags</full_name>
        <default>array('{', '}')</default>
        <docblock line="52">
          <description>How to wrap the the cache</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="57" package="util">
        <name>$_memcache</name>
        <full_name>\PVCache::$_memcache</full_name>
        <default>null</default>
        <docblock line="57">
          <description>Memcache connection</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="62" package="util">
        <name>$_cache_expire</name>
        <full_name>\PVCache::$_cache_expire</full_name>
        <default>300</default>
        <docblock line="62">
          <description>Default time to live for the cache</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="79" package="util">
        <name>init</name>
        <full_name>\PVCache::init()</full_name>
        <docblock line="79">
          <description>Initalize PVCache by setting the location to save cached files and initialize
memchace servers</description>
          <long-description></long-description>
          <tag name="param" line="79" description="&lt;p&gt;An array of configuration options. Options will be the defaults for other options.&#10;-'cache_format' &lt;em&gt;string&lt;/em&gt;: The date/time format used when caching&#10;-'cache_format_search' &lt;em&gt;string&lt;/em&gt;: The preg_match to use when searching for the cache date/time&#10;-'enclosing_tags' &lt;em&gt;array&lt;/em&gt;: Tags that will encase the files to be caches&#10;-'cache_location' &lt;em&gt;string&lt;/em&gt;: The location the cached is saved&#10;-'cache_name' &lt;em&gt;string&lt;/em&gt;: The name to assign to the cache when both writing and reading it&#10;-'cache_expire' &lt;em&gt;int&lt;/em&gt;: Ovveride the default expiration time by setting your own&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="79" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="79" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="150" package="util">
        <name>writeCache</name>
        <full_name>\PVCache::writeCache()</full_name>
        <docblock line="150">
          <description>Write the content to cache out to file</description>
          <long-description></long-description>
          <tag name="param" line="150" description="&lt;p&gt;The key to be used accessing the cache&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="150" description="&lt;p&gt;The content to be cached&lt;/p&gt;" type="string" variable="$content">
            <type>string</type>
          </tag>
          <tag name="param" line="150" description="&lt;p&gt;Options that define how the files are cached&#10;-'cache_format' &lt;em&gt;string&lt;/em&gt;: The date/time format used when caching&#10;-'cache_format_search' &lt;em&gt;string&lt;/em&gt;: The preg_match to use when searching for the cache date/time&#10;-'enclosing_tags' &lt;em&gt;array&lt;/em&gt;: Tags that will encase the files to be caches&#10;-'cache_location' &lt;em&gt;string&lt;/em&gt;: The location the cached is saved&#10;-'cache_name' &lt;em&gt;string&lt;/em&gt;: The name to assign to the cache when both writing and reading it&#10;-'cache_expire' &lt;em&gt;int&lt;/em&gt;: Ovveride the default expiration time by setting your own&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="150" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="150" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$content</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="201" package="util">
        <name>readCache</name>
        <full_name>\PVCache::readCache()</full_name>
        <docblock line="201">
          <description>Read the content of a cached file</description>
          <long-description></long-description>
          <tag name="param" line="201" description="&lt;p&gt;The key to be used to access the cached file&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="201" description="&lt;p&gt;Options that define how the files are cached&#10;-'cache_format' &lt;em&gt;string&lt;/em&gt;: The date/time format used when caching&#10;-'cache_format_search' &lt;em&gt;string&lt;/em&gt;: The preg_match to use when searching for the cache date/time&#10;-'enclosing_tags' &lt;em&gt;array&lt;/em&gt;: Tags that will encase the files to be caches&#10;-'cache_location' &lt;em&gt;string&lt;/em&gt;: The location the cached is saved&#10;-'cache_name' &lt;em&gt;string&lt;/em&gt;: The name to assign to the cache when both writing and reading it&#10;-'cache_expire' &lt;em&gt;int&lt;/em&gt;: Ovveride the default expiration time by setting your own&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="201" description="$content The cached content" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="201" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="252" package="util">
        <name>hasExpired</name>
        <full_name>\PVCache::hasExpired()</full_name>
        <docblock line="252">
          <description>Check to see if the current cache has expired. Returns true if it has, otherwise false.</description>
          <long-description></long-description>
          <tag name="param" line="252" description="&lt;p&gt;The key to search for the cache by&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="252" description="&lt;p&gt;Options that define how the cache is be found&#10;-'cache_format' &lt;em&gt;string&lt;/em&gt;: The date/time format used when caching&#10;-'cache_format_search' &lt;em&gt;string&lt;/em&gt;: The preg_match to use when searching for the cache date/time&#10;-'enclosing_tags' &lt;em&gt;array&lt;/em&gt;: Tags that will encase the cached tag&#10;-'cache_location' &lt;em&gt;string&lt;/em&gt;: The location the cached is saved&#10;-'cache_name' &lt;em&gt;string&lt;/em&gt;: The name to assign to the cache when both writing and reading it&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="252" description="$expired Returns true if expired, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="252" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="308" package="util">
        <name>getExpiration</name>
        <full_name>\PVCache::getExpiration()</full_name>
        <docblock line="308">
          <description>Get the expiration date of the cached file, if it exist.</description>
          <long-description></long-description>
          <tag name="param" line="308" description="&lt;p&gt;The key to search for the cache by&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="308" description="&lt;p&gt;Options that define how the cache date is be found&#10;-'cache_format' &lt;em&gt;string&lt;/em&gt;: The date/time format used when caching&#10;-'cache_format_search' &lt;em&gt;string&lt;/em&gt;: The preg_match to use when searching for the cache date/time&#10;-'enclosing_tags' &lt;em&gt;array&lt;/em&gt;: Tags that will encase the cached tag&#10;-'cache_location' &lt;em&gt;string&lt;/em&gt;: The location the cached is saved&#10;-'cache_name' &lt;em&gt;string&lt;/em&gt;: The name to assign to the cache when both writing and reading it&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="308" description="$expired Returns the date to expire, in string format" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="308" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="354" package="util">
        <name>deleteCache</name>
        <full_name>\PVCache::deleteCache()</full_name>
        <docblock line="354">
          <description>Delete the cached file, if it exist</description>
          <long-description></long-description>
          <tag name="param" line="354" description="&lt;p&gt;The key to search for the cache by&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="354" description="&lt;p&gt;Options that define how the cache data is deleted&#10;-'cache_location' &lt;em&gt;string&lt;/em&gt;: The location the cached is saved&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="354" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="354" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="385" package="util">
        <name>writeMemcache</name>
        <full_name>\PVCache::writeMemcache()</full_name>
        <docblock line="385">
          <description>Write content to memcache.</description>
          <long-description></long-description>
          <tag name="param" line="385" description="&lt;p&gt;The key that will be assoicated with the file&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="385" description="&lt;p&gt;The content that will be written to memcache&lt;/p&gt;" type="mixed" variable="$content">
            <type>mixed</type>
          </tag>
          <tag name="param" line="385" description="&lt;p&gt;Options that are used when defining memcache&#10;-'flag' &lt;em&gt;int&lt;/em&gt;: The flag used when writing to the memcache object&#10;-'cache_expire'&lt;em&gt;int&lt;/em&gt;: Override the default cache expire. Expiration is set in seconds&#10;-'add_only' &lt;em&gt;boolean&lt;/em&gt;: Only add to the cache if the key does not already exist&#10;-'replace' &lt;em&gt;boolean&lt;/em&gt;: Only add to the cache if the key does exit&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="385" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="385" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$content</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="util">
        <name>readMemcache</name>
        <full_name>\PVCache::readMemcache()</full_name>
        <docblock line="425">
          <description>Read content from mime cache</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;The key that is assoicated with the file&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="425" description="&lt;p&gt;Options that are used when defining memcache&#10;-'flag' &lt;em&gt;int&lt;/em&gt;: The flag used when reading from the memcache object&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="425" description="$content Content returned from the memcache object" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="456" package="util">
        <name>removeMemcache</name>
        <full_name>\PVCache::removeMemcache()</full_name>
        <docblock line="456">
          <description>Remove cached data from memcache</description>
          <long-description></long-description>
          <tag name="param" line="456" description="&lt;p&gt;The key that is assoicated with the file&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="456" description="&lt;p&gt;Options that are used when deleting a file&#10;-'flush' &lt;em&gt;boolean&lt;/em&gt;: Default is false, if set to true will delete all files in cache&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="456" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="456" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="484" package="util">
        <name>getMemcacheObject</name>
        <full_name>\PVCache::getMemcacheObject()</full_name>
        <docblock line="484">
          <description>Returns the memcache object</description>
          <long-description></long-description>
          <tag name="return" line="484" description="$memcache The memcache object" type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="484" description="pulbic"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="system/PVBootstrap.php" generated-path="system.PVBootstrap.html" hash="1a8d881f175f12a54566af7b021c12df" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="10" package="system">
      <extends>\PVStaticObject</extends>
      <name>PVBootstrap</name>
      <full_name>\PVBootstrap</full_name>
      <docblock line="10">
        <description>PVBootstrap is responsible for initializing the system the system by initializing all the classes.</description>
        <long-description>This class will have to be refactored, but it was designed to give base options for creating a secure environment based off of a configuration file that would be passed to it.</long-description>
        <tag name="TODO" line="10" description="rework this class and decide if still needed"/>
        <tag name="package" line="10" description="system"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="34" package="system">
        <name>bootSystem</name>
        <full_name>\PVBootstrap::bootSystem()</full_name>
        <docblock line="34">
          <description>Boot the ProdigyView system. Initilize variables, set logging,
sessions, etc. Many of the configuration settings are located in the xml
config file but can also be set here.</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;Arguments to pass that affect how ProdigyView will boot&#10;-'initialize_database' &lt;em&gt;boolean&lt;/em&gt;: Initialize the database and set the database to the default config&#10;-'initialize_libraries' &lt;em&gt;boolean&lt;/em&gt;: Initializes PBLibraries&#10;-'initialize_router' &lt;em&gt;boolean&lt;/em&gt;: Initializes PVRouter&#10;-'initialize_template' &lt;em&gt;boolean&lt;/em&gt;:Initializes PVTemplate&#10;-'initalize_validator' &lt;em&gt;boolean&lt;/em&gt;: Initializes PVValidator&#10;-'initalize_session' &lt;em&gt;boolean&lt;/em&gt;: Initializes PVSession&#10;-'initalize_security' &lt;em&gt;boolean&lt;/em&gt;: Initializes PVSecurity&#10;-'load_plugins' &lt;em&gt;boolean&lt;/em&gt;: Loads the plug-ins at boot.&#10;-'load_libraries' &lt;em&gt;boolean&lt;/em&gt;: Loads the libraries that have been added&#10;-'load_configuration' &lt;em&gt;boolean&lt;/em&gt;: Loads the xml configuration file&#10;-'load_database' &lt;em&gt;boolean&lt;/em&gt;: Opens up a connection to the database.&#10;-'load_database_profile' &lt;em&gt;mixed&lt;/em&gt;: Connects to the specified database that the option 'load_database' connects too.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="34" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="34" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="185" package="system">
        <name>setErrorReporting</name>
        <full_name>\PVBootstrap::setErrorReporting()</full_name>
        <docblock line="185">
          <description>Sets the rror errporting in ProdigyView. The levels are numberic.</description>
          <long-description>0. No errors reported
1. Report major and minor errors
2. Report fatal, notices and warnings
3. Report everything except notices
4. Report everything

Or the values such as E_ALL, E_ALL ^ NOTICE, etc can be passed in.

In your xml configuration, look for these tags.
&lt;report_errors&gt;1&lt;/report_errors&gt; 1 for displaying errors, 0 for not displaying errors
&lt;log_errors&gt;1&lt;/log_errors&gt; 1 for loggin errors to file, 0 for not logging errors to file
&lt;error_report_level&gt;4&lt;/error_report_level&gt; Setting the error repporting level</long-description>
          <tag name="param" line="185" description="&lt;p&gt;Set to true, errors will be displayed&lt;/p&gt;" type="boolean" variable="$report_errors">
            <type>boolean</type>
          </tag>
          <tag name="param" line="185" description="&lt;p&gt;Set to true, errors will be log in the defined log&lt;/p&gt;" type="boolean" variable="$log_errors">
            <type>boolean</type>
          </tag>
          <tag name="param" line="185" description="&lt;p&gt;Set the level errors will b shown&lt;/p&gt;" type="mixed" variable="$$error_report_level">
            <type>mixed</type>
          </tag>
          <tag name="return" line="185" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="185" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$report_errors</name>
          <default>FALSE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$log_errors</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$error_report_level</name>
          <default>E_ALL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="233" package="system">
        <name>unsetGlobalVariable</name>
        <full_name>\PVBootstrap::unsetGlobalVariable()</full_name>
        <docblock line="233">
          <description>Unsets a global at launch. Use for removing data from $_GET, $_SESSION
$_POST, $_COOKIE, $_REQUEST, $_ENV.</description>
          <long-description></long-description>
          <tag name="param" line="233" description="&lt;p&gt;The global variable to unset&lt;/p&gt;" type="string" variable="$global">
            <type>string</type>
          </tag>
          <tag name="return" line="233" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="233" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$global</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="256" package="system">
        <name>stripSlashesRecursive</name>
        <full_name>\PVBootstrap::stripSlashesRecursive()</full_name>
        <docblock line="256">
          <description>Strips the slashes from an array</description>
          <long-description></long-description>
          <tag name="param" line="256" description="&lt;p&gt;The array to modify&lt;/p&gt;" type="array" variable="$array">
            <type>array</type>
          </tag>
          <tag name="return" line="256" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$array</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="269" package="system">
        <name>removeMagicQuotes</name>
        <full_name>\PVBootstrap::removeMagicQuotes()</full_name>
        <docblock line="269">
          <description>Magic Quoutes should be disabled on your system. But if it is on, this function
will remove from any variables in the $_GET, POST, COOKIE, and $_REQUEST.</description>
          <long-description></long-description>
          <tag name="return" line="269" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="269" description="void"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="294" package="system">
        <name>setHeaderExpires</name>
        <full_name>\PVBootstrap::setHeaderExpires()</full_name>
        <docblock line="294">
          <description>At boot, set in what amount of time the header will expire in. Should be
set in munutes. The configuration for this file can be changed in the xml
configuration file in the &lt;cache_time&gt;x&lt;/cache_time&gt; tags.</description>
          <long-description></long-description>
          <tag name="param" line="294" description="&lt;p&gt;The amount of minutes in with the header will expire&lt;/p&gt;" type="integer" variable="$expirationMinutes">
            <type>integer</type>
          </tag>
          <tag name="return" line="294" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="294" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$expirationMinutes</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="185" code="PPC:ERR-50014">Name of argument $error_report_level does not match with the DocBlock's name $$error_report_level in setErrorReporting()</error>
      <notice line="185" code="PPC:ERR-50013">Parameter $$error_report_level could not be found in setErrorReporting()</notice>
    </parse_markers>
  </file>
  <file path="template/PVTemplate.php" generated-path="template.PVTemplate.html" hash="51d3d78f55c022f88efc99a5ba348d45" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="8" package="template">
      <extends>\PVStaticObject</extends>
      <name>PVTemplate</name>
      <full_name>\PVTemplate</full_name>
      <docblock line="8">
        <description>PVTemplate is a generic template wrapper class that is used as a basis for creating a templating system.</description>
        <long-description>ProdigyView comes with the ability to implement adapters, intercepting filters and observers. Extending this class to a child class will give the child class the ability to use those design patterns along with a collection that can assign and retrieve values using magic functions.
```php
Example:

//Create the class
class Example extends PVObject {
  	public static function testMe($string) {
			echo $string;

			//An observer
			$this-&gt;_notify(get_class() . '::' . __FUNCTION__, $string);
		}
	}

//Add to its collection
Example::set('foo','bar');
echo Example::get('foo');

//Add a dynamic method
Example::addMethod('fiz', function($text) {
		return 'fiz ' . $text;
});

echo Example::fizz('Bop');


//Add Observer
Example::addObserver('Example::testMe', 'test_closure', function($string) {
  	echo "\nLine 2 \n"
		echo $string;

}, array('type' =&gt; 'closure'));

//Will call test me and the observer attached
Example::testMe('Testing String ');
```</long-description>
        <tag name="package" line="8" description="template"/>
        <tag name="todo" line="8" description="Remove Mootools, JQuery etc method. Update to do better parse and potentialy integrate with templating system"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="private" namespace="" line="13" package="template">
        <name>$siteTitle</name>
        <full_name>\PVTemplate::$siteTitle</full_name>
        <default></default>
        <docblock line="13">
          <description>The title of the site</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="18" package="template">
        <name>$siteMetaTags</name>
        <full_name>\PVTemplate::$siteMetaTags</full_name>
        <default></default>
        <docblock line="18">
          <description>Meta tags to go in the header</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="23" package="template">
        <name>$siteMetaDescription</name>
        <full_name>\PVTemplate::$siteMetaDescription</full_name>
        <default></default>
        <docblock line="23">
          <description>Description of the site</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="28" package="template">
        <name>$siteKeywords</name>
        <full_name>\PVTemplate::$siteKeywords</full_name>
        <default></default>
        <docblock line="28">
          <description>Site keywords</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="41" package="template">
        <name>init</name>
        <full_name>\PVTemplate::init()</full_name>
        <docblock line="41">
          <description>Initilize the class and set the variables for the template.</description>
          <long-description></long-description>
          <tag name="param" line="41" description="&lt;p&gt;The configuration variables for the template&#10;-'site_name' &lt;em&gt;string&lt;/em&gt;: The name of the site&#10;-'meta_keywords' &lt;em&gt;string&lt;/em&gt;: The meta keywords for the site&#10;-'meta_description' &lt;em&gt;string&lt;/em&gt;: The meta descriptiong for the site&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="41" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="41" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="65" package="template">
        <name>getSiteTitle</name>
        <full_name>\PVTemplate::getSiteTitle()</full_name>
        <docblock line="65">
          <description>Returns the title set for the site
Modify the tags in &lt;site_name&gt;&lt;/site_name&gt; to change the site title.</description>
          <long-description></long-description>
          <tag name="return" line="65" description="siteTitle: The sets title." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="65" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="83" package="template">
        <name>getSiteKeywords</name>
        <full_name>\PVTemplate::getSiteKeywords()</full_name>
        <docblock line="83">
          <description>Returns the site keywords.</description>
          <long-description>Modify the keywords attribute</long-description>
          <tag name="return" line="83" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="83" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="101" package="template">
        <name>getSiteMetaDescription</name>
        <full_name>\PVTemplate::getSiteMetaDescription()</full_name>
        <docblock line="101">
          <description>Returns the title set for the site.</description>
          <long-description>Modify the tags in &lt;site_name&gt;&lt;/site_name&gt; to change the site title.</long-description>
          <tag name="return" line="101" description="siteTitle: The sets title." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="101" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="119" package="template">
        <name>getSiteMetaTags</name>
        <full_name>\PVTemplate::getSiteMetaTags()</full_name>
        <docblock line="119">
          <description>Returns the meta descroption  set for the site.</description>
          <long-description>Modify the tags in &lt;meta_description&gt;&lt;/meta_description&gt; to change the meta description.</long-description>
          <tag name="return" line="119" description="meta_tags: The sets title." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="119" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="136" package="template">
        <name>setSiteTitle</name>
        <full_name>\PVTemplate::setSiteTitle()</full_name>
        <docblock line="136">
          <description>Ovveride the title of the site.</description>
          <long-description></long-description>
          <tag name="param" line="136" description="&lt;p&gt;title: Site title&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="access" line="136" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="152" package="template">
        <name>setSiteKeywords</name>
        <full_name>\PVTemplate::setSiteKeywords()</full_name>
        <docblock line="152">
          <description>Sets the site keywords</description>
          <long-description></long-description>
          <tag name="param" line="152" description="&lt;p&gt;keywords: Site keywords&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="access" line="152" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="170" package="template">
        <name>appendSiteTitle</name>
        <full_name>\PVTemplate::appendSiteTitle()</full_name>
        <docblock line="170">
          <description>Append to the site title</description>
          <long-description></long-description>
          <tag name="param" line="170" description="&lt;p&gt;title: Site title&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="170" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="170" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="188" package="template">
        <name>setSiteMetaTags</name>
        <full_name>\PVTemplate::setSiteMetaTags()</full_name>
        <docblock line="188">
          <description>Ovveride the meta tags of the site.</description>
          <long-description></long-description>
          <tag name="param" line="188" description="&lt;p&gt;meta_tags: Set the meta tags&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="188" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="188" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="205" package="template">
        <name>appendSiteMetaTags</name>
        <full_name>\PVTemplate::appendSiteMetaTags()</full_name>
        <docblock line="205">
          <description>Adds to the sites Meta Tags to be displayed</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;The string to append&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="205" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="template">
        <name>setSiteMetaDescription</name>
        <full_name>\PVTemplate::setSiteMetaDescription()</full_name>
        <docblock line="223">
          <description>Ovveride the meta description of the site.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The string that will be set as the site meta description&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="241" package="template">
        <name>appendSiteMetaDescription</name>
        <full_name>\PVTemplate::appendSiteMetaDescription()</full_name>
        <docblock line="241">
          <description>Append text to the site meta description</description>
          <long-description></long-description>
          <tag name="param" line="241" description="&lt;p&gt;The text to be appened to the site meta description&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="return" line="241" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="241" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="262" package="template">
        <name>errorMessage</name>
        <full_name>\PVTemplate::errorMessage()</full_name>
        <docblock line="262">
          <description>Displays a message that alerts the user when a error action has taken place.</description>
          <long-description></long-description>
          <tag name="see" line="262" description="" link="\PVHtml::div()"/>
          <tag name="param" line="262" description="&lt;p&gt;The message to be displayed&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="param" line="262" description="&lt;p&gt;Options that define the parameters. The options will form&#10;a div and will be the same options used in PVHtml::div()&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="262" description="$div Returns a div with the error message inside." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="262" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="292" package="template">
        <name>successMessage</name>
        <full_name>\PVTemplate::successMessage()</full_name>
        <docblock line="292">
          <description>Displays a message that alerts the user when a succesful action has taken place.</description>
          <long-description></long-description>
          <tag name="see" line="292" description="" link="\PVHtml::div()"/>
          <tag name="param" line="292" description="&lt;p&gt;The message to be displayed&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="param" line="292" description="&lt;p&gt;Options that define the parameters. The options will form&#10;a div and will be the same options used in PVHtml::div()&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="292" description="$div Returns a div with the success message inside." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="292" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="329" package="template">
        <name>updateHeader</name>
        <full_name>\PVTemplate::updateHeader()</full_name>
        <docblock line="329">
          <description>Used for updating a string/buffer, generally a header that ob_flush returns. Inputs the libraries
and meta description into the header based upon the dates passed</description>
          <long-description></long-description>
          <tag name="param" line="329" description="&lt;p&gt;The string/buffer that will contain the tags to be replaced&lt;/p&gt;" type="string" variable="$buffer">
            <type>string</type>
          </tag>
          <tag name="param" line="329" description="&lt;p&gt;The options that define how the header will output&#10;-'site_title' &lt;em&gt;string&lt;/em&gt;: The text will be searched for in the passed string and replaced with the title of the site.&#10;-'site_keywords' &lt;em&gt;string&lt;/em&gt;: The text will be searched for in the passed string and replaced with the keywords of the site.&#10;-'site_description' &lt;em&gt;string&lt;/em&gt;: The text will be searched for in the passed string and replaced with the description of the site.&#10;-'header_addition' &lt;em&gt;string&lt;/em&gt;: The text will be searched for in the passed string and replaced with the libraries found.&#10;-'version' &lt;em&gt;double&lt;/em&gt;: A version for the file to differinate versions of the same file&#10;-'append_url' &lt;em&gt;boolean&lt;/em&gt;: Append the sites url the location of the script&#10;-'libraries' &lt;em&gt;string&lt;/em&gt;: A string of other libraries that these libraries will be added to and returned&#10;-'url' &lt;em&gt;string&lt;/em&gt;: A url to speficy the location of the libraries&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="329" description="$buffer The buffer with the tags replaced" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="329" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$buffer</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="379" package="template">
        <name>getHeader</name>
        <full_name>\PVTemplate::getHeader()</full_name>
        <docblock line="379">
          <description>Retrieves information that would typically be present in a header. Includes all the libraries(javascript, prototype, etc)
and css.</description>
          <long-description></long-description>
          <tag name="param" line="379" description="&lt;p&gt;Options that can determine how the site files are displayed&#10;-'version' &lt;em&gt;double&lt;/em&gt;: A version for the file to differinate versions of the same file&#10;-'append_url' &lt;em&gt;boolean&lt;/em&gt;: Append the sites url the location of the script&#10;-'libraries' &lt;em&gt;string&lt;/em&gt;: A string of other libraries that these libraries will be added to and returned&#10;-'url' &lt;em&gt;string&lt;/em&gt;: A url to speficy the location of the libraries&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="379" description="$libraries &lt;script /&gt; string with the libraries found" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="379" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="462" package="template">
        <name>getJavaScriptHeader</name>
        <full_name>\PVTemplate::getJavaScriptHeader()</full_name>
        <docblock line="462">
          <description>Retrieves the queued javascript libraries in PVLibaries and adds them to a script take to be placed in
a template.</description>
          <long-description></long-description>
          <tag name="param" line="462" description="&lt;p&gt;Options that can determine how the site files are displayed&#10;-'version' &lt;em&gt;double&lt;/em&gt;: A version for the file to differinate versions of the same file&#10;-'append_url' &lt;em&gt;boolean&lt;/em&gt;: Append the sites url the location of the script&#10;-'libraries' &lt;em&gt;string&lt;/em&gt;: A string of other libraries that these libraries will be added to and returned&#10;-'url' &lt;em&gt;string&lt;/em&gt;: A url to speficy the location of the libraries&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="462" description="$libraries &lt;script /&gt; string with the libraries found" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="462" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="505" package="template">
        <name>getMootoolsHeader</name>
        <full_name>\PVTemplate::getMootoolsHeader()</full_name>
        <docblock line="505">
          <description>Retrieves the queued mootools libraries in PVLibaries and adds them to a script take to be placed in
a template.</description>
          <long-description></long-description>
          <tag name="param" line="505" description="&lt;p&gt;Options that can determine how the site files are displayed&#10;-'version' &lt;em&gt;double&lt;/em&gt;: A version for the file to differinate versions of the same file&#10;-'append_url' &lt;em&gt;boolean&lt;/em&gt;: Append the sites url the location of the script&#10;-'libraries' &lt;em&gt;string&lt;/em&gt;: A string of other libraries that these libraries will be added to and returned&#10;-'url' &lt;em&gt;string&lt;/em&gt;: A url to speficy the location of the libraries&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="505" description="$libraries &lt;script /&gt; string with the libraries found" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="505" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="549" package="template">
        <name>getPrototypeHeader</name>
        <full_name>\PVTemplate::getPrototypeHeader()</full_name>
        <docblock line="549">
          <description>Retrieves the queued prototype libraries in PVLibaries and adds them to a script take to be placed in
a template.</description>
          <long-description></long-description>
          <tag name="param" line="549" description="&lt;p&gt;Options that can determine how the site files are displayed&#10;-'version' &lt;em&gt;double&lt;/em&gt;: A version for the file to differinate versions of the same file&#10;-'append_url' &lt;em&gt;boolean&lt;/em&gt;: Append the sites url the location of the script&#10;-'libraries' &lt;em&gt;string&lt;/em&gt;: A string of other libraries that these libraries will be added to and returned&#10;-'url' &lt;em&gt;string&lt;/em&gt;: A url to speficy the location of the libraries&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="549" description="$libraries &lt;script /&gt; string with the libraries found" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="549" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="592" package="template">
        <name>getJQueryHeader</name>
        <full_name>\PVTemplate::getJQueryHeader()</full_name>
        <docblock line="592">
          <description>Retrieves the queued prototype libraries in PVLibaries and adds them to a script take to be placed in
a template.</description>
          <long-description></long-description>
          <tag name="param" line="592" description="&lt;p&gt;Options that can determine how the site files are displayed&#10;-'version' &lt;em&gt;double&lt;/em&gt;: A version for the file to differinate versions of the same file&#10;-'append_url' &lt;em&gt;boolean&lt;/em&gt;: Append the sites url the location of the script&#10;-'libraries' &lt;em&gt;string&lt;/em&gt;: A string of other libraries that these libraries will be added to and returned&#10;-'url' &lt;em&gt;string&lt;/em&gt;: A url to speficy the location of the libraries&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="592" description="$libraries &lt;script /&gt; string with the libraries found" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="592" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="636" package="template">
        <name>getCSSHeader</name>
        <full_name>\PVTemplate::getCSSHeader()</full_name>
        <docblock line="636">
          <description>Retrieves the queued css libraries in PVLibaries and adds them to a script take to be placed in
a template.</description>
          <long-description></long-description>
          <tag name="param" line="636" description="&lt;p&gt;Options that can determine how the site files are displayed&#10;-'version' &lt;em&gt;double&lt;/em&gt;: A version for the file to differinate versions of the same file&#10;-'append_url' &lt;em&gt;boolean&lt;/em&gt;: Append the sites url the location of the script&#10;-'libraries' &lt;em&gt;string&lt;/em&gt;: A string of other libraries that these libraries will be added to and returned&#10;-'url' &lt;em&gt;string&lt;/em&gt;: A url to speficy the location of the libraries&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="636" description="$libraries &lt;script /&gt; string with the libraries found" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="636" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="8">Remove Mootools, JQuery etc method. Update to do better parse and potentialy integrate with templating system</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="data/PVApplication.php" generated-path="data.PVApplication.html" hash="24419589c51cffd8d2ec0486cfa32748" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="true" namespace="" line="30" package="Default">
      <extends>\PVObject</extends>
      <name>PVApplication</name>
      <full_name>\PVApplication</full_name>
      <docblock line="30">
        <description>PVObject is an extendable class used to enhance an object that can be instantiated.</description>
        <long-description>ProdigyView comes with the ability to implement adapters, intercepting filters and observers. Extending this class to a child class will give the child class the ability to use those design patterns along with a collection that can assign and retrieve values using magic functions.

Example:
```php
//Create the class
class Example extends PVObject {
  	public function testMe($string) {
			echo $string;

			//An observer
			$this-&gt;_notify(get_class() . '::' . __FUNCTION__, $string);
		}
	}

//Add to its collection
$example = new Example();
$example-&gt;foo='bar';
echo $example-&gt; foo;

//Add a dynamic method
$example -&gt; addMethod('fiz', function($text) {
		return 'fiz ' . $text;
});

echo $example -&gt; fizz('Bop');


//Add Observer
Example::addObserver('Example::testMe', 'test_closure', function($string) {
  	echo "\nLine 2 \n"
		echo $string;

}, array('type' =&gt; 'closure'));

//Will call the instance and the attached observer
$example-&gt;testMe('Testing String ');
```</long-description>
        <tag name="package" line="30" description="Default"/>
        <tag name="inherited_from" description="\PVObject" refers="\PVObject" link="/classes/PVObject.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>Collection of items</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>Dynamically added methods</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been stored</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been stored</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Get stores instance f singletons</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Filters that have been stored</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>The boolean for following and printing out adapters as they are called</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and printing out filters as they are called</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>The Boolean for following and printing out observers as they are called</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="42" package="Default">
        <name>commandInterpreter</name>
        <full_name>\PVApplication::commandInterpreter()</full_name>
        <docblock line="42">
          <description>Takes in a command and arguements and if the command exist, will pass that command to
a function with the same name. Otherwise, the default function is called.</description>
          <long-description></long-description>
          <tag name="param" line="42" description="&lt;p&gt;The name of the method to be called&lt;/p&gt;" type="string" variable="$command">
            <type>string</type>
          </tag>
          <tag name="param" line="42" description="&lt;p&gt;An infinite amount of parameters that can be passed to a method.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="42" description="$return Returns a value the the called method returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="42" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$command</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="true" static="false" visibility="public" namespace="" line="74" package="Default">
        <name>defaultFunction</name>
        <full_name>\PVApplication::defaultFunction()</full_name>
        <docblock line="74">
          <description>The default function and abstract that must be implemented. If the commandIntepreter cannot find a correspoding
function, this function will be called.</description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="68" package="data">
        <name>__set</name>
        <full_name>\PVObject::__set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be any type&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="93" package="data">
        <name>__get</name>
        <full_name>\PVObject::__get()</full_name>
        <docblock line="93">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="93" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="93" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="93" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="123" package="data">
        <name>__call</name>
        <full_name>\PVObject::__call()</full_name>
        <docblock line="123">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="123" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="123" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="152" package="data">
        <name>addToCollection</name>
        <full_name>\PVObject::addToCollection()</full_name>
        <docblock line="152">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="152" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="152" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="152" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
          <tag name="access" line="199" description="public"/>
        </docblock>
        <inherited_from>\PVObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="66" package="data">
        <name>addAdapter</name>
        <full_name>\PVPatterns::addAdapter()</full_name>
        <docblock line="66">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="66" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="66" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="66" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="96" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVPatterns::addClassAdapter()</full_name>
        <docblock line="96">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="96" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="96" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="96" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="96" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="96" description="public"/>
          <tag name="todo" line="96" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="135" package="data">
        <name>_callAdapter</name>
        <full_name>\PVPatterns::_callAdapter()</full_name>
        <docblock line="135">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="135" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="&lt;p&gt;The name of the method that is being adapted.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="&lt;p&gt;An infinite amout of parameters to passed to this method.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="135" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="135" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="171" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVPatterns::_hasAdapter()</full_name>
        <docblock line="171">
          <description>Checks if an adapter is set in a class, method combination.</description>
          <long-description></long-description>
          <tag name="param" line="171" description="&lt;p&gt;The associated class to check if it has an adapter&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="171" description="&lt;p&gt;The associated method to check if it has an adapter&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="171" description="$hasAdapter Returns true if it has an adapter or false if it does not" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="171" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="187" package="data">
        <name>removeAdapter</name>
        <full_name>\PVPatterns::removeAdapter()</full_name>
        <docblock line="187">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="187" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="187" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="199" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVPatterns::removeClassAdapter()</full_name>
        <docblock line="199">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="199" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="220" package="data">
        <name>addObserver</name>
        <full_name>\PVPatterns::addObserver()</full_name>
        <docblock line="220">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="220" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="220" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="220" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="242" package="data">
        <name>_notify</name>
        <full_name>\PVPatterns::_notify()</full_name>
        <docblock line="242">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="242" description="&lt;p&gt;The name of the event that will trigger notifiers&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="242" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="242" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="279" package="data">
        <name>clearObservers</name>
        <full_name>\PVPatterns::clearObservers()</full_name>
        <docblock line="279">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="279" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="279" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="279" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="301" package="data">
        <name>addFilter</name>
        <full_name>\PVPatterns::addFilter()</full_name>
        <docblock line="301">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interupt the normal flow within the method(IE: They should not be used as adapters).</description>
          <long-description></long-description>
          <tag name="param" line="301" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="301" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="301" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="333" package="data">
        <name>_applyFilter</name>
        <full_name>\PVPatterns::_applyFilter()</full_name>
        <docblock line="333">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="333" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="333" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="333" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="370" package="data">
        <name>_hasFilter</name>
        <full_name>\PVPatterns::_hasFilter()</full_name>
        <docblock line="370">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="370" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="370" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="385" package="data">
        <name>clearFilters</name>
        <full_name>\PVPatterns::clearFilters()</full_name>
        <docblock line="385">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="385" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="385" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="385" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="385" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="396" package="data">
        <name>getInstance</name>
        <full_name>\PVPatterns::getInstance()</full_name>
        <docblock line="396">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="396" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="396" description="public"/>
        </docblock>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="418" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVPatterns::setAdapterTrace()</full_name>
        <docblock line="418">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="418" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="418" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="418" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="431" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVPatterns::setFilterTrace()</full_name>
        <docblock line="431">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="431" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="431" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="431" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="444" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVPatterns::setObserverTrace()</full_name>
        <docblock line="444">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="444" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="444" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="444" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="459" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVPatterns::_invokeMethod()</full_name>
        <docblock line="459">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="459" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="459" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="459" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="459" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="459" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="500" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVPatterns::_invokeStaticMethod()</full_name>
        <docblock line="500">
          <description>Calls a methods that is a method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="500" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="500" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="500" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="500" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="500" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="535" package="data">
        <name>_logAdapter</name>
        <full_name>\PVPatterns::_logAdapter()</full_name>
        <docblock line="535">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="535" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="535" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="535" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="548" package="data">
        <name>_logFilter</name>
        <full_name>\PVPatterns::_logFilter()</full_name>
        <docblock line="548">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="548" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="548" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="548" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="561" package="data">
        <name>_logObserver</name>
        <full_name>\PVPatterns::_logObserver()</full_name>
        <docblock line="561">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="561" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="561" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="561" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="574" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVPatterns::_prepareLogData()</full_name>
        <docblock line="574">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="574" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="574" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="574" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="30" code="PPC:ERR-50005">No summary for class \PVApplication</error>
      <notice line="42" code="PPC:ERR-50013">Parameter $args could not be found in commandInterpreter()</notice>
      <error line="74" code="PPC:ERR-50015">Argument $params is missing from the Docblock of defaultFunction</error>
    </parse_markers>
  </file>
  <file path="network/PVRequestAuth.php" generated-path="network.PVRequestAuth.html" hash="84febfcc50cadd8ee6247e330cec3433" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="30" package="Default">
      <extends/>
      <name>PVRequestAuth</name>
      <full_name>\PVRequestAuth</full_name>
      <docblock line="30">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="30" description="Default"/>
      </docblock>
      <property static="false" visibility="protected" namespace="" line="32" package="Default">
        <name>$_username</name>
        <full_name>\PVRequestAuth::$_username</full_name>
        <default></default>
        <docblock line="32">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="34" package="Default">
        <name>$_password</name>
        <full_name>\PVRequestAuth::$_password</full_name>
        <default></default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="36" package="Default">
        <name>$_realm</name>
        <full_name>\PVRequestAuth::$_realm</full_name>
        <default></default>
        <docblock line="36">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="38" package="Default">
        <name>$_digest</name>
        <full_name>\PVRequestAuth::$_digest</full_name>
        <default></default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="40" package="Default">
        <name>$_server_auth_digest</name>
        <full_name>\PVRequestAuth::$_server_auth_digest</full_name>
        <default></default>
        <docblock line="40">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="42" package="Default">
        <name>$_server_auth_user</name>
        <full_name>\PVRequestAuth::$_server_auth_user</full_name>
        <default></default>
        <docblock line="42">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="44" package="Default">
        <name>$_server_auth_password</name>
        <full_name>\PVRequestAuth::$_server_auth_password</full_name>
        <default></default>
        <docblock line="44">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="51" package="Default">
        <name>__construct</name>
        <full_name>\PVRequestAuth::__construct()</full_name>
        <docblock line="51">
          <description>The constructor called when initializing the object</description>
          <long-description></long-description>
          <tag name="param" line="51" description="&lt;p&gt;Options used to help&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="86" package="Default">
        <name>processAuth</name>
        <full_name>\PVRequestAuth::processAuth()</full_name>
        <docblock line="86">
          <description>This methods sets up the digest, username, and password for the class. The digest, username, and password
are server variables and are associated with http_auth_digest, server_auth_user, server_auther password
set in the construct. This method is called automatically by the constructor.</description>
          <long-description></long-description>
          <tag name="return" line="86" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="86" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="105" package="Default">
        <name>authenticate</name>
        <full_name>\PVRequestAuth::authenticate()</full_name>
        <docblock line="105">
          <description>Authenticate takes place by validating credentials passed in against the username and password
retrieved during the processAuth method.</description>
          <long-description></long-description>
          <tag name="param" line="105" description="&lt;p&gt;An array that should contain the username and password to check against&lt;/p&gt;" type="array" variable="$credentials">
            <type>array</type>
          </tag>
          <tag name="return" line="105" description="$authenticated Returns true if the variables match, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="105" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$credentials</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="119" package="Default">
        <name>getCredentials</name>
        <full_name>\PVRequestAuth::getCredentials()</full_name>
        <docblock line="119">
          <description>Returns the username and password set in the processAuth Method.</description>
          <long-description></long-description>
          <tag name="return" line="119" description="$credtentials" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="119" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="131" package="Default">
        <name>setCredentials</name>
        <full_name>\PVRequestAuth::setCredentials()</full_name>
        <docblock line="131">
          <description>Set the credentials to be stored in the class as protected variables.</description>
          <long-description></long-description>
          <tag name="param" line="131" description="&lt;p&gt;Takes in the 'username' and 'password' in an array&lt;/p&gt;" type="\arry" variable="$credentiials">
            <type>\arry</type>
          </tag>
          <tag name="return" line="131" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="131" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$credentials</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="146" package="Default">
        <name>setRealm</name>
        <full_name>\PVRequestAuth::setRealm()</full_name>
        <docblock line="146">
          <description>Set the realm</description>
          <long-description></long-description>
          <tag name="param" line="146" description="&lt;p&gt;The realm to be used&lt;/p&gt;" type="string" variable="$realm">
            <type>string</type>
          </tag>
          <tag name="return" line="146" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="146" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$realm</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="156" package="Default">
        <name>getRealm</name>
        <full_name>\PVRequestAuth::getRealm()</full_name>
        <docblock line="156">
          <description>Returns the realm that is currently set.</description>
          <long-description></long-description>
          <tag name="return" line="156" description="$realm" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="156" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="168" package="Default">
        <name>_parseDigest</name>
        <full_name>\PVRequestAuth::_parseDigest()</full_name>
        <docblock line="168">
          <description>Parses the digest retrieved from the server variable.</description>
          <long-description></long-description>
          <tag name="param" line="168" description="&lt;p&gt;The digest data retrieved from the server application&lt;/p&gt;" type="string" variable="$digest">
            <type>string</type>
          </tag>
          <tag name="return" line="168" description="$value Returns the digest in array if all the parts are available, otherwirse false" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="168" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$digest</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="30" code="PPC:ERR-50005">No summary for class \PVRequestAuth</error>
      <error line="131" code="PPC:ERR-50014">Name of argument $credentials does not match with the DocBlock's name $credentiials in setCredentials()</error>
      <notice line="131" code="PPC:ERR-50013">Parameter $credentiials could not be found in setCredentials()</notice>
      <error line="32" code="PPC:ERR-50007">No summary for property $_username</error>
      <error line="34" code="PPC:ERR-50007">No summary for property $_password</error>
      <error line="36" code="PPC:ERR-50007">No summary for property $_realm</error>
      <error line="38" code="PPC:ERR-50007">No summary for property $_digest</error>
      <error line="40" code="PPC:ERR-50007">No summary for property $_server_auth_digest</error>
      <error line="42" code="PPC:ERR-50007">No summary for property $_server_auth_user</error>
      <error line="44" code="PPC:ERR-50007">No summary for property $_server_auth_password</error>
    </parse_markers>
  </file>
  <file path="data/PVStaticInstance.php" generated-path="data.PVStaticInstance.html" hash="a81104fdc7c12bf1d5122f8274a11f3f" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="29" package="Default">
      <extends>\PVStaticPatterns</extends>
      <name>PVStaticInstance</name>
      <full_name>\PVStaticInstance</full_name>
      <docblock line="29">
        <description>PVPatterns is the parent class for implementing Adapters, Observers, Intercepting Filters and Singletons on static methods.</description>
        <long-description>Prodgiyview comes with  4 design patterns that can be extended to any object: Adapters, Observers, Intercepting Filters and Singletons. By extending this class to any object that uses static methods, they will have the capability of using these design patterns.</long-description>
        <tag name="package" line="29" description="Default"/>
        <tag name="inherited_from" description="\PVStaticPatterns" refers="\PVStaticPatterns" link="/classes/PVStaticPatterns.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="" line="34" package="Default">
        <name>$_collection</name>
        <full_name>\PVStaticInstance::$_collection</full_name>
        <default>null</default>
        <docblock line="34">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="39" package="Default">
        <name>$_methods</name>
        <full_name>\PVStaticInstance::$_methods</full_name>
        <default>array()</default>
        <docblock line="39">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="52" package="Default">
        <name>__set</name>
        <full_name>\PVStaticInstance::__set()</full_name>
        <docblock line="52">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="52" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="52" description="&lt;p&gt;A mixed value that can be any type&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="52" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="52" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="77" package="Default">
        <name>__get</name>
        <full_name>\PVStaticInstance::__get()</full_name>
        <docblock line="77">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="77" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="77" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="107" package="Default">
        <name>__call</name>
        <full_name>\PVStaticInstance::__call()</full_name>
        <docblock line="107">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="107" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="107" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="107" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="107" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="136" package="Default">
        <name>addToCollection</name>
        <full_name>\PVStaticInstance::addToCollection()</full_name>
        <docblock line="136">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="136" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="136" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="136" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="161" package="Default">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticInstance::addToCollectionWithName()</full_name>
        <docblock line="161">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="161" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="161" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="161" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="161" description="public"/>
          <tag name="todo" line="161" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="183" package="Default">
        <name>getIterator</name>
        <full_name>\PVStaticInstance::getIterator()</full_name>
        <docblock line="183">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="183" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="203" package="Default">
        <name>addMethod</name>
        <full_name>\PVStaticInstance::addMethod()</full_name>
        <docblock line="203">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="203" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="203" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="203" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="203" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="161">check the relevance of get and set</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="29" code="PPC:ERR-50005">No summary for class \PVStaticInstance</error>
    </parse_markers>
  </file>
  <file path="_BootCoreComponents.php" generated-path="_BootCoreComponents.html" hash="ada0129f7e803efa176832793ac27e9d" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="util/PVFileManager.php" generated-path="util.PVFileManager.html" hash="515d95c799dde76e1a58fe70d28ab924" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="20" package="util">
      <extends>\PVStaticObject</extends>
      <name>PVFileManager</name>
      <full_name>\PVFileManager</full_name>
      <docblock line="20">
        <description>PVFileManager allows easy manipulation of the file system such as making directories or getting mime types.</description>
        <long-description>The class has various functions that make file manipulation reasonably easy.
```php
Examples:
//Count the number of files in a directory
echo PVFileManager::getFilesInDirectory('/path/to/directry');

//Get Mime Type
echo PVFileManager::getFileMimeType('image.jpg');

//Write To File
PVFileManager::getFileMimeType('/path/to/file', 'Hello World!');
```</long-description>
        <tag name="package" line="20" description="util"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="27" package="util">
        <name>phpFileUpload</name>
        <full_name>\PVFileManager::phpFileUpload()</full_name>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag name="params" line="27" description="File information to upload"/>
          <tag name="todo" line="27" description="figure out a point for this function. So do not use in the mean time."/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$params</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="75" package="util">
        <name>deleteDirectory</name>
        <full_name>\PVFileManager::deleteDirectory()</full_name>
        <docblock line="75">
          <description>Deletes an enitre directory on the server.</description>
          <long-description></long-description>
          <tag name="param" line="75" description="&lt;p&gt;Can either be an array of directories or a single directory.&lt;/p&gt;" type="mixed" variable="$directory">
            <type>mixed</type>
          </tag>
          <tag name="return" line="75" description="$deleted" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="75" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$directory</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="117" package="util">
        <name>getFileSize_NTFS</name>
        <full_name>\PVFileManager::getFileSize_NTFS()</full_name>
        <docblock line="117">
          <description>Returns the file size based on an NFTS file system.</description>
          <long-description></long-description>
          <tag name="param" line="117" description="&lt;p&gt;The location of the file to get the size of&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="return" line="117" description="$size Returns the size of the file" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="117" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="137" package="util">
        <name>getFileSize_PERL</name>
        <full_name>\PVFileManager::getFileSize_PERL()</full_name>
        <docblock line="137">
          <description>Returns the file size using perl</description>
          <long-description></long-description>
          <tag name="param" line="137" description="&lt;p&gt;The location of the file to get the size of&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="return" line="137" description="$size Returns the size of the file" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="137" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="163" package="util">
        <name>getFilesInDirectory</name>
        <full_name>\PVFileManager::getFilesInDirectory()</full_name>
        <docblock line="163">
          <description>Scans a directory and geths all the folders, files and subfolder and files in that
directory. Has a verbose mode that can give detailed information about the directory.</description>
          <long-description></long-description>
          <tag name="param" line="163" description="&lt;p&gt;The directory to be scanned&lt;/p&gt;" type="string" variable="$directory">
            <type>string</type>
          </tag>
          <tag name="param" line="163" description="&lt;p&gt;Options that can alter how the directory is scanned&#10;-'verbose' &lt;em&gt;boolean&lt;/em&gt;: Enabling this mode will return everything in array of arrays. The array will contain&#10;more detailed information such as mime_type, extension, base name, etc. Default is false.&#10;-'magic_file' &lt;em&gt;string&lt;/em&gt;: If finfo is installed and verbose is set to true, use this option to specifiy the magic&#10;file to use when getting the mime type of the file. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="163" description="$files An array of subdirectories and fules" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="163" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$directory</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="218" package="util">
        <name>getFileMimeType</name>
        <full_name>\PVFileManager::getFileMimeType()</full_name>
        <docblock line="218">
          <description>Get the mime type of a file. Function is designed to degrade to other options if finfo_open or
mime_content_type functions are not available.</description>
          <long-description></long-description>
          <tag name="param" line="218" description="&lt;p&gt;The name and location of the file&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="param" line="218" description="&lt;p&gt;Options that can alter how the mime type is found&#10;-'magic_file' &lt;em&gt;string&lt;/em&gt;: If finfo_open is installed, the magic file can be set for&#10;retreiving the mime type. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="218" description="$mime_type The mime type of the file." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="218" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="263" package="util">
        <name>readFile</name>
        <full_name>\PVFileManager::readFile()</full_name>
        <docblock line="263">
          <description>Read a file's contents on disk into a string.</description>
          <long-description></long-description>
          <tag name="param" line="263" description="&lt;p&gt;The location of the file&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="param" line="263" description="&lt;p&gt;The mode to be used reading the file&lt;/p&gt;" type="string" variable="$mode">
            <type>string</type>
          </tag>
          <tag name="param" line="263" description="&lt;p&gt;The encoding to convert the file to. Optional.&lt;/p&gt;" type="string" variable="$encoding">
            <type>string</type>
          </tag>
          <tag name="param" line="263" description="&lt;p&gt;The option to stream a file byte by byte&lt;/p&gt;" type="boolean" variable="$stream">
            <type>boolean</type>
          </tag>
          <tag name="return" line="263" description="$contents The contents read from the file" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="263" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>'r'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$encoding</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$stream</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="314" package="util">
        <name>writeFile</name>
        <full_name>\PVFileManager::writeFile()</full_name>
        <docblock line="314">
          <description>Write contents to a file on the server.</description>
          <long-description></long-description>
          <tag name="param" line="314" description="&lt;p&gt;The path to the file that will be writteen out too&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="param" line="314" description="&lt;p&gt;The content to be written to the file&lt;/p&gt;" type="string" variable="$content">
            <type>string</type>
          </tag>
          <tag name="param" line="314" description="&lt;p&gt;The mode to be used when writing the file. Default is 'w'.&lt;/p&gt;" type="string" variable="$mode">
            <type>string</type>
          </tag>
          <tag name="param" line="314" description="&lt;p&gt;An encoding to be used when writing the file. Optional.&lt;/p&gt;" type="string" variable="$encoding">
            <type>string</type>
          </tag>
          <tag name="return" line="314" description="$written Returns true if the file was written, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="314" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$content</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>'w'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$encoding</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="353" package="util">
        <name>writeNewFile</name>
        <full_name>\PVFileManager::writeNewFile()</full_name>
        <docblock line="353">
          <description>Write contents to a file on the server only if the file does NOT already exist</description>
          <long-description></long-description>
          <tag name="param" line="353" description="&lt;p&gt;The path to the file that will be writteen out too&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="param" line="353" description="&lt;p&gt;The content to be written to the file&lt;/p&gt;" type="string" variable="$content">
            <type>string</type>
          </tag>
          <tag name="param" line="353" description="&lt;p&gt;The mode to be used when writing the file. Default is 'w'.&lt;/p&gt;" type="string" variable="$mode">
            <type>string</type>
          </tag>
          <tag name="param" line="353" description="&lt;p&gt;An encoding to be used when writing the file. Optional.&lt;/p&gt;" type="string" variable="$encoding">
            <type>string</type>
          </tag>
          <tag name="return" line="353" description="$written Returns true if the file was written, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="353" description="public"/>
          <tag name="todo" line="353" description="Defaults for mode, content and encoding, Add a way for encoding file."/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$content</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>'w'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$encoding</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="381" package="util">
        <name>rewriteNewFile</name>
        <full_name>\PVFileManager::rewriteNewFile()</full_name>
        <docblock line="381">
          <description>Write contents to a file on the server only if the file does exist</description>
          <long-description></long-description>
          <tag name="param" line="381" description="&lt;p&gt;The path to the file that will be writteen out too&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="param" line="381" description="&lt;p&gt;The content to be written to the file&lt;/p&gt;" type="string" variable="$content">
            <type>string</type>
          </tag>
          <tag name="param" line="381" description="&lt;p&gt;The mode to be used when writing the file. Default is 'w'.&lt;/p&gt;" type="string" variable="$mode">
            <type>string</type>
          </tag>
          <tag name="param" line="381" description="&lt;p&gt;An encoding to be used when writing the file. Optional.&lt;/p&gt;" type="string" variable="$encoding">
            <type>string</type>
          </tag>
          <tag name="return" line="381" description="$written Returns true if the file was written, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="381" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$content</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mode</name>
          <default>'w'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$encoding</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="407" package="util">
        <name>copyFile</name>
        <full_name>\PVFileManager::copyFile()</full_name>
        <docblock line="407">
          <description>Copy a file to another location</description>
          <long-description></long-description>
          <tag name="param" line="407" description="&lt;p&gt;The location of the current file to be copied&lt;/p&gt;" type="string" variable="$currentFile">
            <type>string</type>
          </tag>
          <tag name="param" line="407" description="&lt;p&gt;The location of the new file to be copied&lt;/p&gt;" type="string" variable="$newFile">
            <type>string</type>
          </tag>
          <tag name="return" line="407" description="$copied Returns true if the file was succesfully copied" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="407" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$currentFile</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$newFile</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="441" package="util">
        <name>copyNewFile</name>
        <full_name>\PVFileManager::copyNewFile()</full_name>
        <docblock line="441">
          <description>Copy a file to another location only if the file DOES NOT exist</description>
          <long-description></long-description>
          <tag name="param" line="441" description="&lt;p&gt;The location of the current file to be copied&lt;/p&gt;" type="string" variable="$currentFile">
            <type>string</type>
          </tag>
          <tag name="param" line="441" description="&lt;p&gt;The location of the new file to be copied&lt;/p&gt;" type="string" variable="$newFile">
            <type>string</type>
          </tag>
          <tag name="return" line="441" description="$copied Returns true if the file was succesfully copied" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="441" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$currentFile</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$newFile</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="465" package="util">
        <name>copyDirectory</name>
        <full_name>\PVFileManager::copyDirectory()</full_name>
        <docblock line="465">
          <description>Copy an entire directory from one location to another location.</description>
          <long-description></long-description>
          <tag name="param" line="465" description="&lt;p&gt;The location of the old directory&lt;/p&gt;" type="string" variable="$oldDirectory">
            <type>string</type>
          </tag>
          <tag name="param" line="465" description="&lt;p&gt;The location of the new directory&lt;/p&gt;" type="string" variable="$newDirectory">
            <type>string</type>
          </tag>
          <tag name="return" line="465" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="465" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$oldDirectory</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$newDirectory</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="522" package="util">
        <name>copyNewDirectory</name>
        <full_name>\PVFileManager::copyNewDirectory()</full_name>
        <docblock line="522">
          <description>Copy an entire directory from one location to another location but only if the directory does not exist</description>
          <long-description></long-description>
          <tag name="param" line="522" description="&lt;p&gt;The location of the old directory&lt;/p&gt;" type="string" variable="$oldDirectory">
            <type>string</type>
          </tag>
          <tag name="param" line="522" description="&lt;p&gt;The location of the new directory&lt;/p&gt;" type="string" variable="$newDirectory">
            <type>string</type>
          </tag>
          <tag name="return" line="522" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="522" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$oldDirectory</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$newDirectory</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="546" package="util">
        <name>copyFileFromUrl</name>
        <full_name>\PVFileManager::copyFileFromUrl()</full_name>
        <docblock line="546">
          <description>Copy a file from a url to a destination on the server.</description>
          <long-description></long-description>
          <tag name="param" line="546" description="&lt;p&gt;The url in which the file to copy exist&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="param" line="546" description="&lt;p&gt;The location the server to copy the file to&lt;/p&gt;" type="string" variable="$destination">
            <type>string</type>
          </tag>
          <tag name="param" line="546" description="&lt;p&gt;An optional name to assign the file&lt;/p&gt;" type="string" variable="$filename">
            <type>string</type>
          </tag>
          <tag name="return" line="546" description="$success Returns true if the file was succesfully copied" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$destination</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filename</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="587" package="util">
        <name>getLastestFileInDirectory</name>
        <full_name>\PVFileManager::getLastestFileInDirectory()</full_name>
        <docblock line="587">
          <description>Returns the file that was last modified with a directory.</description>
          <long-description></long-description>
          <tag name="param" line="587" description="&lt;p&gt;The directory to search through when looking for the file&lt;/p&gt;" type="string" variable="$directory">
            <type>string</type>
          </tag>
          <tag name="return" line="587" description="$file The file that was modified in that directory" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="587" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$directory</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="613" package="util">
        <name>deleteFile</name>
        <full_name>\PVFileManager::deleteFile()</full_name>
        <docblock line="613">
          <description>Delete's a file if the file exist.</description>
          <long-description></long-description>
          <tag name="param" line="613" description="&lt;p&gt;The location of the file to be deleted&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="return" line="613" description="$deleted Returns true if the file was successfully deleted. Otherwise false." type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="613" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="27">figure out a point for this function. So do not use in the mean time.</todo>
      <todo line="353">Defaults for mode, content and encoding, Add a way for encoding file.</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="27" code="PPC:ERR-50015">Argument $params is missing from the Docblock of phpFileUpload</error>
      <error line="27" code="PPC:ERR-50008">No summary for method phpFileUpload()</error>
    </parse_markers>
  </file>
  <file path="util/PVTools.php" generated-path="util.PVTools.html" hash="cc5c680354f31097c2aa1ff3c17fd627" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="26" package="util">
      <extends>\PVStaticObject</extends>
      <name>PVTools</name>
      <full_name>\PVTools</full_name>
      <docblock line="26">
        <description>PVTools is a class that has random tools to be utilized in an application.</description>
        <long-description>The tools in this class do not have a direct affiliation with any other class and can be considered more of general tools.

Example:
```php
//Create random string of capital letters A -F that is 10 letters long
$string = PVTools::generateRandomString( 10, $chars = 'ABCDEF');

//Search a recursive array
$data = array(
	'fruits' =&gt; array('Strawberries', 'Oranges')
	'vegetables' =&gt; array('celery', 'salad'),
	'meat' =&gt; array(
		'white' =&gt; array('chicken', 'turkey'),
		'red' =&gt; array('beef', 'goat')
	)
);

$item = PVTools::arraySearchRecursive('turkey', $data);
```</long-description>
        <tag name="package" line="26" description="util"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="38" package="util">
        <name>generateRandomString</name>
        <full_name>\PVTools::generateRandomString()</full_name>
        <docblock line="38">
          <description>Generates a random string of lettters and numbers. String can be customized on the length
and the characters used to generate the string.</description>
          <long-description></long-description>
          <tag name="param" line="38" description="&lt;p&gt;The length of characters the string will be. Default is 15 chars&lt;/p&gt;" type="integer" variable="$char_count">
            <type>integer</type>
          </tag>
          <tag name="param" line="38" description="&lt;p&gt;The characters that will be used to make up the string. Default is 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'&lt;/p&gt;" type="string" variable="$chars">
            <type>string</type>
          </tag>
          <tag name="return" line="38" description="$string The auto generated string" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="38" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$char_count</name>
          <default>15</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$chars</name>
          <default>'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="78" package="util">
        <name>truncateText</name>
        <full_name>\PVTools::truncateText()</full_name>
        <docblock line="78">
          <description>Truncates a strings of text to a certain length and applies trailing characters. Generally used for
creating 'Read More.</description>
          <long-description>..' text descrptions.</long-description>
          <tag name="param" line="78" description="&lt;p&gt;The string to truncate&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="param" line="78" description="&lt;p&gt;The length to truncate the string too. Default is 10 characters.&lt;/p&gt;" type="integer" variable="$length">
            <type>integer</type>
          </tag>
          <tag name="param" line="78" description="&lt;p&gt;Trailing text to add at the end of string once it is truncated. Default text is '...'&lt;/p&gt;" type="string" variable="$trailing">
            <type>string</type>
          </tag>
          <tag name="param" line="78" description="&lt;p&gt;Strips out any html tags. Default is true.&lt;/p&gt;" type="boolean" variable="$strip_tags">
            <type>boolean</type>
          </tag>
          <tag name="param" line="78" description="&lt;p&gt;Tags to allow if strip_tags is set to true.&lt;/p&gt;" type="string" variable="$allowed_tags">
            <type>string</type>
          </tag>
          <tag name="return" line="78" description="$truncated A The string when truncated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="78" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$length</name>
          <default>10</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trailing</name>
          <default>'...'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$strip_tags</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$allowed_tags</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="115" package="util">
        <name>getCurrentUrl</name>
        <full_name>\PVTools::getCurrentUrl()</full_name>
        <docblock line="115">
          <description>Returns the full url of the current page. Inclded in the return will be if the page is being https connect,
a port if any, and the uri.</description>
          <long-description></long-description>
          <tag name="return" line="115" description="$url Url of the current page." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="115" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="147" package="util">
        <name>getCurrentBaseUrl</name>
        <full_name>\PVTools::getCurrentBaseUrl()</full_name>
        <docblock line="147">
          <description>Returns the current url with the uri. The url at max will only be
www.example.com</description>
          <long-description></long-description>
          <tag name="return" line="147" description="$url The current url without the uri" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="147" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="179" package="util">
        <name>formUrlParameters</name>
        <full_name>\PVTools::formUrlParameters()</full_name>
        <docblock line="179">
          <description>Takes in an array and forms that array into a query string with ? &amp; =. Passing in array such as
array('arg1'='doo', 'arg2'=&gt;'sec''rae', 'arg3'=&gt;'me') with return '?$arg1=doo&amp;arg2=rae&amp;arg3=me'</description>
          <long-description></long-description>
          <tag name="param" line="179" description="&lt;p&gt;variables A string of variables to turn into a query string&lt;/p&gt;" type="array" variable="$variables">
            <type>array</type>
          </tag>
          <tag name="return" line="179" description="The array uri into string format" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="179" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$variables</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="214" package="util">
        <name>formUrlPath</name>
        <full_name>\PVTools::formUrlPath()</full_name>
        <docblock line="214">
          <description>Takes in an array and forms that array into a query string with /'s. Passing in array such as
array('arg1'='doo', 'arg2'=&gt;'sec''rae', 'arg3'=&gt;'me') with return 'doo/rae/me'</description>
          <long-description></long-description>
          <tag name="param" line="214" description="&lt;p&gt;variables A string of variables to turn into a query string&lt;/p&gt;" type="array" variable="$variables">
            <type>array</type>
          </tag>
          <tag name="return" line="214" description="The array uri into string format" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="214" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$variables</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="251" package="util">
        <name>arraySearchRecursive</name>
        <full_name>\PVTools::arraySearchRecursive()</full_name>
        <docblock line="251">
          <description>Searched for an value within another array recursively.</description>
          <long-description></long-description>
          <tag name="param" line="251" description="&lt;p&gt;The needle can either be a value or an array of values to be searched for&lt;/p&gt;" type="mixed" variable="$needle">
            <type>mixed</type>
          </tag>
          <tag name="param" line="251" description="&lt;p&gt;The array to be search in&lt;/p&gt;" type="array" variable="$haystack">
            <type>array</type>
          </tag>
          <tag name="param" line="251" description="&lt;p&gt;Sets if comparison is performed loosely or tightly&lt;/p&gt;" type="boolean" variable="$strict">
            <type>boolean</type>
          </tag>
          <tag name="param" line="251" description="&lt;p&gt;The path in the array in which the needle was found&lt;/p&gt;" type="array" variable="$path">
            <type>array</type>
          </tag>
          <tag name="return" line="251" description="$path Returns a path if the array was found, otherwise returns false" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="251" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$needle</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$haystack</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$strict</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$path</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="303" package="util">
        <name>parseSQLOperators</name>
        <full_name>\PVTools::parseSQLOperators()</full_name>
        <docblock line="303">
          <description>Parse a string into valid SQL WHERE CLAUSE based on passed parameters.</description>
          <long-description></long-description>
          <tag name="param" line="303" description="&lt;p&gt;A string of parameters to parse and derive a sql arguement from&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="param" line="303" description="&lt;p&gt;The parameters in the query that will relate to the values in the string&lt;/p&gt;" type="string" variable="$content_term">
            <type>string</type>
          </tag>
          <tag name="param" line="303" description="&lt;p&gt;Wrap the arguements in ()&lt;/p&gt;" type="boolean" variable="$encapsulate">
            <type>boolean</type>
          </tag>
          <tag name="param" line="303" description="&lt;p&gt;The syntax that will be used for parsing the string. Standrd uses ProdigyView implementation of marsk suchas&#10;',', '!','+' for parsing content. Otherwise a more sql way is used.&lt;/p&gt;" type="string" variable="$syntax">
            <type>string</type>
          </tag>
          <tag name="return" line="303" description="$string a SQL string to place in a where clause" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="303" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$content_term</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$encapsulate</name>
          <default>TRUE</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$syntax</name>
          <default>'standard'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="util/PVValidator.php" generated-path="util.PVValidator.html" hash="ced8999d4fa6a03b8c4c27b5ea163d5a" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="32" package="util">
      <extends>\PVStaticObject</extends>
      <name>PVValidator</name>
      <full_name>\PVValidator</full_name>
      <docblock line="32">
        <description>PVValidator is a dynamically extendable class used to validate inputs.</description>
        <long-description>The class can be used to check for a variety of inputs to validate data from mime types to correct syntax for a URL. The class is also extendable to add more validation rules.

Examples:
```php
//Check if a file is an integer

if(PVValidator::check('integer', '3.4')) {
	echo 'I am an integer';
}

if(PVValidator::check('url', 'http://www.google.com')) {
    echo 'I am a valid url';
}

//Add custom validation rule
PVValidator::addRule('is_currency', array('function' =&gt; function($number) {
    return preg_match("/^-?[0-9]+(?:\.[0-9]{1,2})?$/", $number);
}));

//Check against custom rule
if(PVValidator::check(‘is_currecny’, '$10.00')) {
	echo 'I am currency';
}
```</long-description>
        <tag name="package" line="32" description="util"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="private" namespace="" line="37" package="util">
        <name>$rules</name>
        <full_name>\PVValidator::$rules</full_name>
        <default></default>
        <docblock line="37">
          <description>An array of stored rules and the functions to validate those rules.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="49" package="util">
        <name>init</name>
        <full_name>\PVValidator::init()</full_name>
        <docblock line="49">
          <description>Initializes PVValidators and sets the default for checking rules. The defaults allows the function
PVValidator::check() to function propery.</description>
          <long-description></long-description>
          <tag name="param" line="49" description="&lt;p&gt;The configuration for init the class&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="49" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="49" description="public"/>
          <tag name="todo" line="49" description="consider extending the config optiont actually have it doing something"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="126" package="util">
        <name>addRule</name>
        <full_name>\PVValidator::addRule()</full_name>
        <docblock line="126">
          <description>Add a rule to the validator or modify a current one with the name name. Checks can either be closures(PHP 5.3)
or preg_match, or calls to other function.</description>
          <long-description></long-description>
          <tag name="param" line="126" description="&lt;p&gt;The name of the rule&lt;/p&gt;" type="string" variable="$rule">
            <type>string</type>
          </tag>
          <tag name="param" line="126" description="&lt;p&gt;Options that define the rule&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of validation to perform. There are currently 4 supported types.&lt;/p&gt;&#10;&lt;ol&gt;&#10;&lt;li&gt;'closures' If you are in php 5.3, a closure function can be passed and validated against&lt;/li&gt;&#10;&lt;li&gt;'preg_match' Validation will be peformoned using a preg_match. Rule must be passed in.&lt;/li&gt;&#10;&lt;li&gt;'function' A php function that is stores in a string and called. Create the function using 'create_function' method&lt;/li&gt;&#10;&lt;li&gt;'validator' Calls a function in the validator to be exectued&#10;-'rule' &lt;em&gt;string&lt;/em&gt;: A rule to be checked against if the type is a preg_match&#10;-'function' &lt;em&gt;mixed&lt;/em&gt;: Either a string that is a function or an annoymous function.&lt;/li&gt;&#10;&lt;/ol&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="126" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="126" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rule</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="152" package="util">
        <name>check</name>
        <full_name>\PVValidator::check()</full_name>
        <docblock line="152">
          <description>Checks a value passed to a rule if the rule exist. If there is no rule, true will be returned.</description>
          <long-description></long-description>
          <tag name="param" line="152" description="&lt;p&gt;The name of the rule to check against&lt;/p&gt;" type="string" variable="$rule">
            <type>string</type>
          </tag>
          <tag name="param" line="152" description="&lt;p&gt;The value to check against the rule&lt;/p&gt;" type="array" variable="$value">
            <type>array</type>
          </tag>
          <tag name="return" line="152" description="$validate Validates is generally a boolean and returns true or false" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="152" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$rule</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="200" package="util">
        <name>isInteger</name>
        <full_name>\PVValidator::isInteger()</full_name>
        <docblock line="200">
          <description>Checks if a value passed is of type int or an integer.</description>
          <long-description></long-description>
          <tag name="param" line="200" description="&lt;p&gt;The value to check if it is an integer&lt;/p&gt;" type="mixed" variable="$int">
            <type>mixed</type>
          </tag>
          <tag name="return" line="200" description="$valid Returns true if the value is an integer, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="200" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$int</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="228" package="util">
        <name>isDouble</name>
        <full_name>\PVValidator::isDouble()</full_name>
        <docblock line="228">
          <description>Checks if a value passed is of type int or an integer.</description>
          <long-description></long-description>
          <tag name="param" line="228" description="&lt;p&gt;The value to check if it is an double&lt;/p&gt;" type="mixed" variable="$double">
            <type>mixed</type>
          </tag>
          <tag name="return" line="228" description="$valid Returns true if the value is an integer, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="228" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$double</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="256" package="util">
        <name>isID</name>
        <full_name>\PVValidator::isID()</full_name>
        <docblock line="256">
          <description>Checks if a value passed is of type an ID. ID's are numeric are in the format of a MongoID</description>
          <long-description></long-description>
          <tag name="param" line="256" description="&lt;p&gt;The value to check if it is an id&lt;/p&gt;" type="mixed" variable="$id">
            <type>mixed</type>
          </tag>
          <tag name="return" line="256" description="$valid Returns true if the value is an id, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="256" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$id</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="util">
        <name>isAudioFile</name>
        <full_name>\PVValidator::isAudioFile()</full_name>
        <docblock line="282">
          <description>Checks if a value passed has an audio mime type.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The value to check if it is an audio mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="282" description="$valid Returns true if the value is an audio mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="310" package="util">
        <name>isMidiFile</name>
        <full_name>\PVValidator::isMidiFile()</full_name>
        <docblock line="310">
          <description>Checks if a value passed has a midi mime type.</description>
          <long-description></long-description>
          <tag name="param" line="310" description="&lt;p&gt;The value to check if it is a midi mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="310" description="$valid Returns true if the value is a midi mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="310" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="336" package="util">
        <name>isMpegAudioFile</name>
        <full_name>\PVValidator::isMpegAudioFile()</full_name>
        <docblock line="336">
          <description>Checks if a value passed has a mpeg audio mime type.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The value to check if it is a mpeg audio mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="336" description="$valid Returns true if the value is a mpeg audio mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="336" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="362" package="util">
        <name>isAiffFile</name>
        <full_name>\PVValidator::isAiffFile()</full_name>
        <docblock line="362">
          <description>Checks if a value passed has a aiff audio mime type.</description>
          <long-description></long-description>
          <tag name="param" line="362" description="&lt;p&gt;The value to check if it is a aiff audio mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="362" description="$valid Returns true if the value is a aiff audio mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="362" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="util">
        <name>isWavFile</name>
        <full_name>\PVValidator::isWavFile()</full_name>
        <docblock line="388">
          <description>Checks if a value passed has a wav audio mime type.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The value to check if it is a wav audio mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="388" description="$valid Returns true if the value is a wav audio mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="414" package="util">
        <name>isRealAudioFile</name>
        <full_name>\PVValidator::isRealAudioFile()</full_name>
        <docblock line="414">
          <description>Checks if a value passed has a real audio mime type.</description>
          <long-description></long-description>
          <tag name="param" line="414" description="&lt;p&gt;The value to check if it is a real audio mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="414" description="$valid Returns true if the value is a real audio mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="414" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="440" package="util">
        <name>isOGGAudioFile</name>
        <full_name>\PVValidator::isOGGAudioFile()</full_name>
        <docblock line="440">
          <description>Checks if a value passed has a ogg audio mime type.</description>
          <long-description></long-description>
          <tag name="param" line="440" description="&lt;p&gt;The value to check if it is a ogg audio mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="440" description="$valid Returns true if the value is a ogg audio mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="440" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="466" package="util">
        <name>isImageFile</name>
        <full_name>\PVValidator::isImageFile()</full_name>
        <docblock line="466">
          <description>Checks if a value passed has an imagemime type.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The value to check if it is an image mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="466" description="$valid Returns true if the value is an image mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="466" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="494" package="util">
        <name>isBmpFile</name>
        <full_name>\PVValidator::isBmpFile()</full_name>
        <docblock line="494">
          <description>Checks if a value passed has a bmp image mime type.</description>
          <long-description></long-description>
          <tag name="param" line="494" description="&lt;p&gt;The value to check if it is a bmp image mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="494" description="$valid Returns true if the value is a bmp image mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="494" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="520" package="util">
        <name>isGifFile</name>
        <full_name>\PVValidator::isGifFile()</full_name>
        <docblock line="520">
          <description>Checks if a value passed has a gif image mime type.</description>
          <long-description></long-description>
          <tag name="param" line="520" description="&lt;p&gt;The value to check if it is a gif image mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="520" description="$valid Returns true if the value is a gif image mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="520" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="546" package="util">
        <name>isIefFile</name>
        <full_name>\PVValidator::isIefFile()</full_name>
        <docblock line="546">
          <description>Checks if a value passed has a ief image mime type.</description>
          <long-description></long-description>
          <tag name="param" line="546" description="&lt;p&gt;The value to check if it is a ief image mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="546" description="$valid Returns true if the value is a ief image mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="546" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="572" package="util">
        <name>isJpegFile</name>
        <full_name>\PVValidator::isJpegFile()</full_name>
        <docblock line="572">
          <description>Checks if a value passed has a jpeg image mime type.</description>
          <long-description></long-description>
          <tag name="param" line="572" description="&lt;p&gt;The value to check if it is a jpeg image mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="572" description="$valid Returns true if the value is a jpeg image mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="572" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="598" package="util">
        <name>isPngFile</name>
        <full_name>\PVValidator::isPngFile()</full_name>
        <docblock line="598">
          <description>Checks if a value passed has a png image mime type.</description>
          <long-description></long-description>
          <tag name="param" line="598" description="&lt;p&gt;The value to check if it is a png image mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="598" description="$valid Returns true if the value is a png image mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="598" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="624" package="util">
        <name>isTiffFile</name>
        <full_name>\PVValidator::isTiffFile()</full_name>
        <docblock line="624">
          <description>Checks if a value passed has a tiff image mime type.</description>
          <long-description></long-description>
          <tag name="param" line="624" description="&lt;p&gt;The value to check if it is a tiff image mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="624" description="$valid Returns true if the value is a tiff image mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="624" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="650" package="util">
        <name>isVideoFile</name>
        <full_name>\PVValidator::isVideoFile()</full_name>
        <docblock line="650">
          <description>Checks if a value passed has a video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="650" description="&lt;p&gt;The value to check if it is a video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="650" description="$valid Returns true if the value is a video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="650" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="678" package="util">
        <name>isMpegVideoFile</name>
        <full_name>\PVValidator::isMpegVideoFile()</full_name>
        <docblock line="678">
          <description>Checks if a value passed has a mpeg video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="678" description="&lt;p&gt;The value to check if it is a mpeg video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="678" description="$valid Returns true if the value is a mpeg video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="678" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="704" package="util">
        <name>isWmvFile</name>
        <full_name>\PVValidator::isWmvFile()</full_name>
        <docblock line="704">
          <description>Checks if a value passed has a wmv video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="704" description="&lt;p&gt;The value to check if it is a wmv video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="704" description="$valid Returns true if the value is a wmv video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="704" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="730" package="util">
        <name>isMp4File</name>
        <full_name>\PVValidator::isMp4File()</full_name>
        <docblock line="730">
          <description>Checks if a value passed has a mp4 video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="730" description="&lt;p&gt;The value to check if it is a mp4 video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="730" description="$valid Returns true if the value is a mp4 video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="730" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="756" package="util">
        <name>isFlvFile</name>
        <full_name>\PVValidator::isFlvFile()</full_name>
        <docblock line="756">
          <description>Checks if a value passed has a flv video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="756" description="&lt;p&gt;The value to check if it is a flv video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="756" description="$valid Returns true if the value is a flv video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="756" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="782" package="util">
        <name>isQuickTimeFile</name>
        <full_name>\PVValidator::isQuickTimeFile()</full_name>
        <docblock line="782">
          <description>Checks if a value passed has a quick time video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="782" description="&lt;p&gt;The value to check if it is a quick time video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="782" description="$valid Returns true if the value is a quick time video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="782" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="808" package="util">
        <name>isMovFile</name>
        <full_name>\PVValidator::isMovFile()</full_name>
        <docblock line="808">
          <description>Checks if a value passed has a mov video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="808" description="&lt;p&gt;The value to check if it is a mov video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="808" description="$valid Returns true if the value is a mov video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="808" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="834" package="util">
        <name>isMxuFile</name>
        <full_name>\PVValidator::isMxuFile()</full_name>
        <docblock line="834">
          <description>Checks if a value passed has a mux video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="834" description="&lt;p&gt;The value to check if it is a mux video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="834" description="$valid Returns true if the value is a mux video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="834" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="860" package="util">
        <name>isAviFile</name>
        <full_name>\PVValidator::isAviFile()</full_name>
        <docblock line="860">
          <description>Checks if a value passed has a avi video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="860" description="&lt;p&gt;The value to check if it is a avi video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="860" description="$valid Returns true if the value is a avi video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="860" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="886" package="util">
        <name>isOGGVideoFile</name>
        <full_name>\PVValidator::isOGGVideoFile()</full_name>
        <docblock line="886">
          <description>Checks if a value passed has an ogg video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="886" description="&lt;p&gt;The value to check if it is an ogg video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="886" description="$valid Returns true if the value is an ogg video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="886" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="912" package="util">
        <name>isRealMediaFile</name>
        <full_name>\PVValidator::isRealMediaFile()</full_name>
        <docblock line="912">
          <description>Checks if a value passed has a real media video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="912" description="&lt;p&gt;The value to check if it is a real media video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="912" description="$valid Returns true if the value is a real media video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="912" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="938" package="util">
        <name>isAsfFile</name>
        <full_name>\PVValidator::isAsfFile()</full_name>
        <docblock line="938">
          <description>Checks if a value passed has a asf video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="938" description="&lt;p&gt;The value to check if it is a asf video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="938" description="$valid Returns true if the value is a asf video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="938" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="964" package="util">
        <name>isWebMFile</name>
        <full_name>\PVValidator::isWebMFile()</full_name>
        <docblock line="964">
          <description>Checks if a value passed has a webm video mime type.</description>
          <long-description></long-description>
          <tag name="param" line="964" description="&lt;p&gt;The value to check if it is a webm video mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="964" description="$valid Returns true if the value is a webm video mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="964" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="990" package="util">
        <name>isCompressedFile</name>
        <full_name>\PVValidator::isCompressedFile()</full_name>
        <docblock line="990">
          <description>Checks if a value passed has a compressed file(zip, tar, gtar) mime type.</description>
          <long-description></long-description>
          <tag name="param" line="990" description="&lt;p&gt;The value to check if it is a compressed file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="990" description="$valid Returns true if the value is a compressed file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="990" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1018" package="util">
        <name>isZipFile</name>
        <full_name>\PVValidator::isZipFile()</full_name>
        <docblock line="1018">
          <description>Checks if a value passed has a zip file mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1018" description="&lt;p&gt;The value to check if it is a zip file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1018" description="$valid Returns true if the value is a zip file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1018" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1044" package="util">
        <name>isGTarFile</name>
        <full_name>\PVValidator::isGTarFile()</full_name>
        <docblock line="1044">
          <description>Checks if a value passed has a gtar file mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1044" description="&lt;p&gt;The value to check if it is a gtar file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1044" description="$valid Returns true if the value is a gtar file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1044" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1070" package="util">
        <name>isTarFile</name>
        <full_name>\PVValidator::isTarFile()</full_name>
        <docblock line="1070">
          <description>Checks if a value passed has a tar file mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1070" description="&lt;p&gt;The value to check if it is a tar file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1070" description="$valid Returns true if the value is a tar file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1070" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1096" package="util">
        <name>isCssFile</name>
        <full_name>\PVValidator::isCssFile()</full_name>
        <docblock line="1096">
          <description>Checks if a value passed has a css (Cascading Style Sheet) file mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1096" description="&lt;p&gt;The value to check if it is a css file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1096" description="$valid Returns true if the value is a css file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1096" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1122" package="util">
        <name>isHtmlFile</name>
        <full_name>\PVValidator::isHtmlFile()</full_name>
        <docblock line="1122">
          <description>Checks if a value passed has a html file mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1122" description="&lt;p&gt;The value to check if it is a html file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1122" description="$valid Returns true if the value is a html file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1122" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1148" package="util">
        <name>isHtmFile</name>
        <full_name>\PVValidator::isHtmFile()</full_name>
        <docblock line="1148">
          <description>Checks if a value passed has a htm file mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1148" description="&lt;p&gt;The value to check if it is a htm file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1148" description="$valid Returns true if the value is a htm file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1148" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1174" package="util">
        <name>isAscFile</name>
        <full_name>\PVValidator::isAscFile()</full_name>
        <docblock line="1174">
          <description>Checks if a value passed has a gtar file mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1174" description="&lt;p&gt;The value to check if it is a gtar file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1174" description="$valid Returns true if the value is a gtar file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1174" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1200" package="util">
        <name>isTxtFile</name>
        <full_name>\PVValidator::isTxtFile()</full_name>
        <docblock line="1200">
          <description>Checks if a value passed has a text/.txt mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1200" description="&lt;p&gt;The value to check if it is a text/.txt file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1200" description="$valid Returns true if the value is a text/.txt file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1200" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1226" package="util">
        <name>isRtxFile</name>
        <full_name>\PVValidator::isRtxFile()</full_name>
        <docblock line="1226">
          <description>Checks if a value passed has a rich text mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1226" description="&lt;p&gt;The value to check if it is a rich text file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1226" description="$valid Returns true if the value is a rich textfile mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1226" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1252" package="util">
        <name>isMicrosoftWordFile</name>
        <full_name>\PVValidator::isMicrosoftWordFile()</full_name>
        <docblock line="1252">
          <description>Checks if a value passed has a MS Word mime type. This will check for both doc and docx files.</description>
          <long-description></long-description>
          <tag name="param" line="1252" description="&lt;p&gt;The value to check if it is a MS Word file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1252" description="$valid Returns true if the value is a MS Word file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1252" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1280" package="util">
        <name>isMicrosoftWordDocFile</name>
        <full_name>\PVValidator::isMicrosoftWordDocFile()</full_name>
        <docblock line="1280">
          <description>Checks if a value passed has a MS Word mime type. This will only check for .doc files.</description>
          <long-description></long-description>
          <tag name="param" line="1280" description="&lt;p&gt;The value to check if it is a MS Word file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1280" description="$valid Returns true if the value is a MS Word file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1280" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1306" package="util">
        <name>isMicrosoftWordDocxFile</name>
        <full_name>\PVValidator::isMicrosoftWordDocxFile()</full_name>
        <docblock line="1306">
          <description>Checks if a value passed has a MS Word mime type. This will check for only .docx files</description>
          <long-description></long-description>
          <tag name="param" line="1306" description="&lt;p&gt;The value to check if it is a MS Word file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1306" description="$valid Returns true if the value is a MS Word file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1306" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1332" package="util">
        <name>isMicrosoftExcelFile</name>
        <full_name>\PVValidator::isMicrosoftExcelFile()</full_name>
        <docblock line="1332">
          <description>Checks if a value passed has a MS Excel mime type. Checks for .xsl and .xsls files</description>
          <long-description></long-description>
          <tag name="param" line="1332" description="&lt;p&gt;The value to check if it is a MS Excel file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1332" description="$valid Returns true if the value is a MS Excel file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1332" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1360" package="util">
        <name>isMicrosoftExcelXLSFile</name>
        <full_name>\PVValidator::isMicrosoftExcelXLSFile()</full_name>
        <docblock line="1360">
          <description>Checks if a value passed has a MS Excel mime type. Checks only for .xsl file</description>
          <long-description></long-description>
          <tag name="param" line="1360" description="&lt;p&gt;The value to check if it is a MS Excel file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1360" description="$valid Returns true if the value is a MS Excel file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1360" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1386" package="util">
        <name>isMicrosoftExcelXLSXFile</name>
        <full_name>\PVValidator::isMicrosoftExcelXLSXFile()</full_name>
        <docblock line="1386">
          <description>Checks if a value passed has a MS Excel mime type. Checks only for .xslx files</description>
          <long-description></long-description>
          <tag name="param" line="1386" description="&lt;p&gt;The value to check if it is a MS Excel file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1386" description="$valid Returns true if the value is a MS Excel file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1386" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1412" package="util">
        <name>isMicrosoftPowerPointFile</name>
        <full_name>\PVValidator::isMicrosoftPowerPointFile()</full_name>
        <docblock line="1412">
          <description>Checks if a value passed has a MS PowerPoint mime type. Check for both .ppt and .pptx files</description>
          <long-description></long-description>
          <tag name="param" line="1412" description="&lt;p&gt;The value to check if it is a MS Powerpoint file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1412" description="$valid Returns true if the value is a MS Pwerpoint file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1412" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1440" package="util">
        <name>isMicrosoftPPTFile</name>
        <full_name>\PVValidator::isMicrosoftPPTFile()</full_name>
        <docblock line="1440">
          <description>Checks if a value passed has a MS PowerPoint mime type. Checks only for .ppt files</description>
          <long-description></long-description>
          <tag name="param" line="1440" description="&lt;p&gt;The value to check if it is a MS Powerpoint file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1440" description="$valid Returns true if the value is a MS Powerpoint file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1440" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1466" package="util">
        <name>isMicrosoftPPTXFile</name>
        <full_name>\PVValidator::isMicrosoftPPTXFile()</full_name>
        <docblock line="1466">
          <description>Checks if a value passed has a MS PowerPoint mime type. Checks only for .pptx files</description>
          <long-description></long-description>
          <tag name="param" line="1466" description="&lt;p&gt;The value to check if it is a MS PowerPoint file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1466" description="$valid Returns true if the value is a MS PowerPoint file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1466" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1492" package="util">
        <name>isPdfFile</name>
        <full_name>\PVValidator::isPdfFile()</full_name>
        <docblock line="1492">
          <description>Checks if a value passed has a PDF mime type.</description>
          <long-description></long-description>
          <tag name="param" line="1492" description="&lt;p&gt;The value to check if it is a PDF file mime type&lt;/p&gt;" type="mixed" variable="$mimetype">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1492" description="$valid Returns true if the value is a PDF file mime type, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1492" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$mimetype</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1518" package="util">
        <name>isValidEmail</name>
        <full_name>\PVValidator::isValidEmail()</full_name>
        <docblock line="1518">
          <description>Checks if a value passed has a valid email.</description>
          <long-description></long-description>
          <tag name="param" line="1518" description="&lt;p&gt;The value to check if it is a valid email.&lt;/p&gt;" type="mixed" variable="$email">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1518" description="$valid Returns true if the value is a valid email, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1518" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$email</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1544" package="util">
        <name>isValidUrl</name>
        <full_name>\PVValidator::isValidUrl()</full_name>
        <docblock line="1544">
          <description>Checks if a value passed has a valid url.</description>
          <long-description></long-description>
          <tag name="param" line="1544" description="&lt;p&gt;The value to check if it is a valid url.&lt;/p&gt;" type="mixed" variable="$url">
            <type>mixed</type>
          </tag>
          <tag name="return" line="1544" description="$valid Returns true if the value is a valid url, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1544" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1570" package="util">
        <name>isActiveUrl</name>
        <full_name>\PVValidator::isActiveUrl()</full_name>
        <docblock line="1570">
          <description>Attempts to check if the url is an active url. Response should be 200.</description>
          <long-description></long-description>
          <tag name="param" line="1570" description="&lt;p&gt;The url to check if active&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="return" line="1570" description="" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="todo" line="1570" description="rewrite with PVCommunicator"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1603" package="util">
        <name>checkFileMimeType</name>
        <full_name>\PVValidator::checkFileMimeType()</full_name>
        <docblock line="1603">
          <description>Checks a files mime type and returns true if the mime type is found, otherwise false.</description>
          <long-description></long-description>
          <tag name="param" line="1603" description="&lt;p&gt;The path to the file to be be checked&lt;/p&gt;" type="string" variable="$file">
            <type>string</type>
          </tag>
          <tag name="param" line="1603" description="&lt;p&gt;Some form of text that describes the mime type.&lt;/p&gt;" type="string" variable="$mime_text">
            <type>string</type>
          </tag>
          <tag name="param" line="1603" description="&lt;p&gt;Options that can customize how the mime type is to be found.&#10;-'search_method' &lt;em&gt;string&lt;/em&gt;: The search method can either be found using strpos or preg_match.&#10;The default is STRING_POSITION as the method, change to PREG_MATCH to use PREG_MATCH&#10;-'magic_file' &lt;em&gt;string&lt;/em&gt;: If you have phpinfo installed, it will be used for finding the mime_type. The&#10;default magic file is not set and will use the default in the PVFileManager.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1603" description="$found Returns true if the mime type was match, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="1603" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$mime_text</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="49">consider extending the config optiont actually have it doing something</todo>
      <todo line="1570">rewrite with PVCommunicator</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <notice line="152" code="PPC:ERR-50013">Parameter $value could not be found in check()</notice>
    </parse_markers>
  </file>
  <file path="data/PVConversions.php" generated-path="data.PVConversions.html" hash="44214f4d1d7d97af310c253da7e7430c" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="20" package="data">
      <extends/>
      <name>PVConversions</name>
      <full_name>\PVConversions</full_name>
      <docblock line="20">
        <description>PVConversions is a class used to convert one data type to another.</description>
        <long-description>Often there will be requirements for converting data such as array to objects, json to xml, etc. This class is designed to have built-in functions to make those conversations easy.

Example:
```php
//Create an array
$data = $array('Apple', 'Bananna', 'Orange');

//Convert the array to object
$data = PVConversions::arrayToObject($data);

//Will display an stdObject
print_r($data);
```</long-description>
        <tag name="package" line="20" description="data"/>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="30" package="data">
        <name>arrayToObject</name>
        <full_name>\PVConversions::arrayToObject()</full_name>
        <docblock line="30">
          <description>Converts an array to an object using the stdClass,</description>
          <long-description></long-description>
          <tag name="param" line="30" description="&lt;p&gt;An array of data&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="30" description="$data The return array in an object format" type="\stdClass">
            <type>\stdClass</type>
          </tag>
          <tag name="access" line="30" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="60" package="data">
        <name>objectToArray</name>
        <full_name>\PVConversions::objectToArray()</full_name>
        <docblock line="60">
          <description>Converts an object to type array. Keep in mind that that private and protected
variables may not be returned</description>
          <long-description></long-description>
          <tag name="param" line="60" description="&lt;p&gt;An object&lt;/p&gt;" type="object" variable="$object">
            <type>object</type>
          </tag>
          <tag name="return" line="60" description="$array, The passed object in array formart/" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="60" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$object</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="79" package="data">
        <name>xmlToArray</name>
        <full_name>\PVConversions::xmlToArray()</full_name>
        <docblock line="79">
          <description>Converts an xml document into an array.</description>
          <long-description></long-description>
          <tag name="param" line="79" description="&lt;p&gt;xml A string of xml to convert to an array&lt;/p&gt;" type="\@string" variable="$xml">
            <type>\@string</type>
          </tag>
          <tag name="return" line="79" description="$array The xml documented converted into an array" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="79" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$xml</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="93" package="data">
        <name>convertTextBoolean</name>
        <full_name>\PVConversions::convertTextBoolean()</full_name>
        <docblock line="93">
          <description>Converts a boolean that is passed a string to the boolean type true or false.</description>
          <long-description></long-description>
          <tag name="param" line="93" description="&lt;p&gt;The boolean as a string&lt;/p&gt;" type="string" variable="$boolean">
            <type>string</type>
          </tag>
          <tag name="return" line="93" description="" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$boolean</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="_BootMinusPlugins.php" generated-path="_BootMinusPlugins.html" hash="b75749c42190e268e43d158982f767c2" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="system/PVConfiguration.php" generated-path="system.PVConfiguration.html" hash="2f3d89ee6d6639d966e88f6c5bb4015b" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="31" package="system">
      <extends>\PVStaticObject</extends>
      <name>PVConfiguration</name>
      <full_name>\PVConfiguration</full_name>
      <docblock line="31">
        <description>The PVConfiguration acts a global registry for system-wide configuration options for the application.</description>
        <long-description>The configuration class is most notably used for setting variables that can be retrieved anywhere in your system with the setters and getters. There is also the option of setting different environment.

Example:
```php
//Init the class
PVConfiguration::init();

//Add An Example Configuration
$data = array(
	'host'=&gt;'localhost',
	'database' =&gt; 'test',
	'user'=&gt;'admin',
	'password'=&gt;'abc123'
);
PVConfiguration::addConfiguration('mysql',  $data);

//Retrieve and use that configuration
$mysql = PVConfiguration::getConfiguration('mysql');
echo $mysql-&gt;host;

//Set different configs for different environments
PVConfiguration::addConfiguration('mysql',  $data, array('environment' =&gt; 'production'));
```</long-description>
        <tag name="package" line="31" description="system"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="36" package="system">
        <name>$_environment</name>
        <full_name>\PVConfiguration::$_environment</full_name>
        <default>''</default>
        <docblock line="36">
          <description>The environment, ie production, staging, development, etc.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="41" package="system">
        <name>$_configurations</name>
        <full_name>\PVConfiguration::$_configurations</full_name>
        <default>''</default>
        <docblock line="41">
          <description>Configuration options that have been set.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="54" package="system">
        <name>init</name>
        <full_name>\PVConfiguration::init()</full_name>
        <docblock line="54">
          <description>Initializes the configuration class by adding values to the collection
available in the static parent object. Because the variable is added statically,
the information will be available anywhere on the site.</description>
          <long-description></long-description>
          <tag name="param" line="54" description="&lt;p&gt;Arguements to be added to the configuration&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="54" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="54" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="87" package="system">
        <name>addConfiguration</name>
        <full_name>\PVConfiguration::addConfiguration()</full_name>
        <docblock line="87">
          <description>Adds a configuration to the Configuration class based
upon a key and value.</description>
          <long-description></long-description>
          <tag name="param" line="87" description="&lt;p&gt;The Key to be used for accessing the configuration&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="87" description="&lt;p&gt;The string value to be stored in the configuration&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="87" description="&lt;p&gt;Options when setting the configuratuin&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;string &quot;environment&quot;: The environment to set the configuration for&lt;/li&gt;&#10;&lt;/ul&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="87" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="87" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="117" package="system">
        <name>getConfiguration</name>
        <full_name>\PVConfiguration::getConfiguration()</full_name>
        <docblock line="117">
          <description>Retrieves a stored configuration based upon the key that was
assigned to it.</description>
          <long-description></long-description>
          <tag name="param" line="117" description="&lt;p&gt;The key to the string stored&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="117" description="&lt;p&gt;Options can be be passed for retrieving the content.&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;string &quot;environment&quot;: The environment to set the configuration for&lt;/li&gt;&#10;&lt;/ul&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="117" description="$configuration" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="117" description="pulbic"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="148" package="system">
        <name>loadXMLConfigurationFromFile</name>
        <full_name>\PVConfiguration::loadXMLConfigurationFromFile()</full_name>
        <docblock line="148">
          <description>Outside of the standardrd xml file reading, a custom xml configuration
can be set in the xml file and read when needed.</description>
          <long-description></long-description>
          <tag name="param" line="148" description="&lt;p&gt;The parent node in the xml file in which all children with be read rom.&lt;/p&gt;" type="string" variable="$node_name">
            <type>string</type>
          </tag>
          <tag name="return" line="148" description="mixed $config Any infomration retrieved from that node" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="148" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$node_name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="188" package="system">
        <name>getSiteEmailConfiguration</name>
        <full_name>\PVConfiguration::getSiteEmailConfiguration()</full_name>
        <docblock line="188">
          <description>Retrieve the preferences in the sites xml
configuration. The configuration options retrieved will be
the elements betweeen the &lt;email&gt;&lt;/email&gt; tags.</description>
          <long-description></long-description>
          <tag name="return" line="188" description="email_options: Returns the email options in an array" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="188" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="226" package="system">
        <name>getSiteSessionConfiguration</name>
        <full_name>\PVConfiguration::getSiteSessionConfiguration()</full_name>
        <docblock line="226">
          <description>Retrieve the preferences in the sites xml
configuration. The configuration options retrieved will be
the elements betweeen the &lt;sessions&gt;&lt;/sessions&gt; tags.</description>
          <long-description></long-description>
          <tag name="return" line="226" description="$session_options Returns the session options in an array" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="226" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="264" package="system">
        <name>getSiteCompleteConfiguration</name>
        <full_name>\PVConfiguration::getSiteCompleteConfiguration()</full_name>
        <docblock line="264">
          <description>Retrieve the preferences in the sites xml
configuration. The configuration options retrieved will be
all the xml in the file.</description>
          <long-description></long-description>
          <tag name="return" line="264" description="options Returns all the options in an array" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="264" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="347" package="system">
        <name>getSiteGeneralConfiguration</name>
        <full_name>\PVConfiguration::getSiteGeneralConfiguration()</full_name>
        <docblock line="347">
          <description>Retrieve the preferences in the sites xml
configuration. The configuration options retrieved will be
the one elements betweeen the &lt;general&gt;&lt;/general&gt; and &lt;email&gt;&lt;/email&gt; tags.</description>
          <long-description></long-description>
          <tag name="return" line="347" description="$general_options Returns the general options in an array" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="347" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="397" package="system">
        <name>getSystemConfiguration</name>
        <full_name>\PVConfiguration::getSystemConfiguration()</full_name>
        <docblock line="397">
          <description>Retrieve the preferences in the sites xml
configuration. The configuration options retrieved will be
the one elements betweeen the &lt;system&gt;&lt;/system&gt; tags.</description>
          <long-description></long-description>
          <tag name="return" line="397" description="$system_options Returns the system options in an array" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="397" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="435" package="system">
        <name>getSiteConfiguration</name>
        <full_name>\PVConfiguration::getSiteConfiguration()</full_name>
        <docblock line="435">
          <description>Retrieve the preferences in the sites xml
configuration. The configuration options retrieved will be
the one elements betweeen the &lt;general&gt;&lt;/general&gt; tags.</description>
          <long-description></long-description>
          <tag name="return" line="435" description="site_options: Returns the site options in an array" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="435" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="473" package="system">
        <name>getServerConfiguration</name>
        <full_name>\PVConfiguration::getServerConfiguration()</full_name>
        <docblock line="473">
          <description>Retrieve the preferences in the sites xml
configuration. The configuration options retrieved will be
the one elements betweeen the &lt;server&gt;&lt;/server&gt; tags.</description>
          <long-description></long-description>
          <tag name="return" line="473" description="$sever_options Returns the site server in an array" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="473" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="template/PVForms.php" generated-path="template.PVForms.html" hash="51a03f7742ffa20afd1908aeb3ee2282" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="27" package="template">
      <extends>\PVStaticObject</extends>
      <name>PVForms</name>
      <full_name>\PVForms</full_name>
      <docblock line="27">
        <description>PVForms is a class that controls the creation and management of HTML form elements.</description>
        <long-description>The class can be tied in with other systems for creating of forms that can be generated by passing in dynamic elements.

Example:
```php
//Create Input Element
echo PVForms::creatInput('name', 'text');

//Create An Input with Bootstrap Element
echo PVForms::creatInput('name', 'text', array('class' =&gt; 'form-control'));

//Complete Form
echo PVForms::formBegin('my-form', array('method' =&gt; 'post', 'enctype' =&gt; 'multipart/form-data'));

echo PVForms::creatInput('name', 'text', array('class' =&gt; 'form-control', 'value' =&gt; 'My Name', 'placeholder' =&gt; 'Enter your name'));

echo PVForms::button('enter', array('type' =&gt; 'submit', 'class' =&gt; 'btn btn-success'));

echo formEnd();
```</long-description>
        <tag name="package" line="27" description="template"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="49" package="template">
        <name>input</name>
        <full_name>\PVForms::input()</full_name>
        <docblock line="49">
          <description>Creates an input that would correspond to any field that is an &lt;input&gt;.</description>
          <long-description></long-description>
          <tag name="see" line="49" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="49" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="49" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="49" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="49" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="49" description="&lt;p&gt;The type of input being generated&lt;/p&gt;" type="\sring" variable="$type">
            <type>\sring</type>
          </tag>
          <tag name="param" line="49" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="49" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="49" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="49" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default></default>
          <type>\sring</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="97" package="template">
        <name>button</name>
        <full_name>\PVForms::button()</full_name>
        <docblock line="97">
          <description>Creates a button input element with options passed to.</description>
          <long-description></long-description>
          <tag name="see" line="97" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="97" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="97" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="97" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="97" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="97" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="97" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="97" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="97" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="137" package="template">
        <name>checkbox</name>
        <full_name>\PVForms::checkbox()</full_name>
        <docblock line="137">
          <description>Creates a checkbox input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="137" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="137" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="137" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="137" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="137" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="137" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="137" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="137" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="137" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="template">
        <name>text</name>
        <full_name>\PVForms::text()</full_name>
        <docblock line="177">
          <description>Creates a text input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="177" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="177" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="177" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="177" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="177" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="177" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="177" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="216" package="template">
        <name>file</name>
        <full_name>\PVForms::file()</full_name>
        <docblock line="216">
          <description>Creates a file input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="216" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="216" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="216" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="216" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="216" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="216" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="216" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="216" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="216" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="255" package="template">
        <name>date</name>
        <full_name>\PVForms::date()</full_name>
        <docblock line="255">
          <description>Creates a date input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="255" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="255" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="255" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="255" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="255" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="255" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="255" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="255" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="255" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="294" package="template">
        <name>hidden</name>
        <full_name>\PVForms::hidden()</full_name>
        <docblock line="294">
          <description>Creates a hidden input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="294" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="294" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="294" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="294" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="294" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="294" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="294" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="294" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="294" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="333" package="template">
        <name>image</name>
        <full_name>\PVForms::image()</full_name>
        <docblock line="333">
          <description>Creates a image input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="333" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="333" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="333" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="333" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="333" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="333" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="333" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="372" package="template">
        <name>search</name>
        <full_name>\PVForms::search()</full_name>
        <docblock line="372">
          <description>Creates a search input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="372" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="372" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="372" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="372" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="372" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="372" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="372" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="372" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="372" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="412" package="template">
        <name>submit</name>
        <full_name>\PVForms::submit()</full_name>
        <docblock line="412">
          <description>Creates a submit input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="412" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="412" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="412" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="412" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="412" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="412" description="&lt;p&gt;The display output of the button.&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="412" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="412" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="412" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="412" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default>'Submit'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="452" package="template">
        <name>textfield</name>
        <full_name>\PVForms::textfield()</full_name>
        <docblock line="452">
          <description>Creates a textfield input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="452" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="452" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="452" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="452" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="452" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="452" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="452" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="452" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="452" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="491" package="template">
        <name>radio</name>
        <full_name>\PVForms::radio()</full_name>
        <docblock line="491">
          <description>Creates a radio button input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="491" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="491" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="491" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="491" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="491" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="491" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="491" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="491" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="491" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="530" package="template">
        <name>time</name>
        <full_name>\PVForms::time()</full_name>
        <docblock line="530">
          <description>Creates a time input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="530" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="530" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="530" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="530" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="530" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="530" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="530" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="530" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="530" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="569" package="template">
        <name>url</name>
        <full_name>\PVForms::url()</full_name>
        <docblock line="569">
          <description>Creates a url input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="569" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="569" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="569" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="569" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="569" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="569" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="569" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="569" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="569" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="608" package="template">
        <name>range</name>
        <full_name>\PVForms::range()</full_name>
        <docblock line="608">
          <description>Creates a range input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="608" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="608" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="608" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="608" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="608" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="608" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="608" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="608" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="608" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="647" package="template">
        <name>reset</name>
        <full_name>\PVForms::reset()</full_name>
        <docblock line="647">
          <description>Creates a reset input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="647" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="647" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="647" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="647" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="647" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="647" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="647" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="647" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="647" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="686" package="template">
        <name>color</name>
        <full_name>\PVForms::color()</full_name>
        <docblock line="686">
          <description>Creates a color input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="686" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="686" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="686" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="686" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="686" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="686" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="686" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="686" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="686" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="725" package="template">
        <name>password</name>
        <full_name>\PVForms::password()</full_name>
        <docblock line="725">
          <description>Creates a password input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="725" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="725" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="725" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="725" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="725" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="725" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="725" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="725" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="725" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="764" package="template">
        <name>number</name>
        <full_name>\PVForms::number()</full_name>
        <docblock line="764">
          <description>Creates a number input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="764" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="764" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="764" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="764" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="764" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="764" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="764" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="764" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="764" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="803" package="template">
        <name>email</name>
        <full_name>\PVForms::email()</full_name>
        <docblock line="803">
          <description>Creates a number input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="803" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="803" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="803" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="803" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="803" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="803" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="803" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="803" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="803" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="842" package="template">
        <name>label</name>
        <full_name>\PVForms::label()</full_name>
        <docblock line="842">
          <description>Creates a label input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="842" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="842" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="842" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="842" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="842" description="&lt;p&gt;The text to appear in the label&lt;/p&gt;" type="string" variable="$text">
            <type>string</type>
          </tag>
          <tag name="param" line="842" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="842" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="842" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="842" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$text</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="889" package="template">
        <name>fieldset</name>
        <full_name>\PVForms::fieldset()</full_name>
        <docblock line="889">
          <description>Creates a fieldset,&lt;fieldset&gt;&lt;/feildset&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="889" description="" link="self::getEventAttributes()"/>
          <tag name="see" line="889" description="" link="self::getStandardAttributes()"/>
          <tag name="param" line="889" description="&lt;p&gt;The information that will be displayed inside the fieldset tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="889" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="889" description="$strong The strong element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="889" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="918" package="template">
        <name>legend</name>
        <full_name>\PVForms::legend()</full_name>
        <docblock line="918">
          <description>Creates a legend tag ,&lt;legend&gt;&lt;/legend&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="918" description="" link="self::getEventAttributes()"/>
          <tag name="see" line="918" description="" link="self::getStandardAttributes()"/>
          <tag name="param" line="918" description="&lt;p&gt;The information that will be displayed inside the legend tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="918" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="918" description="$header The legend element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="918" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="956" package="template">
        <name>select</name>
        <full_name>\PVForms::select()</full_name>
        <docblock line="956">
          <description>Creates a checkbox input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="956" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="956" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="956" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="956" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="956" description="&lt;p&gt;The name of the input being generated. Will be the select fields name.&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="956" description="&lt;p&gt;The data that will create the options. The key in the array will be the options value and the value&#10;&#9;&#9;&#9;&#9;in the array will be the options display.&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="956" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="956" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="956" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="956" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1043" package="template">
        <name>getFormAttributes</name>
        <full_name>\PVForms::getFormAttributes()</full_name>
        <docblock line="1043">
          <description>Form attributes that are present in many form elements. This functionisused for assigning those attribute by passing
them in as an array and returning them as a string. Contains both html and html5 elements</description>
          <long-description></long-description>
          <tag name="param" line="1043" description="&lt;p&gt;Attribues that will be assigned if they match&#10;-'accept' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'autocomplete' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'autofocus' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'chcked' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'disabled' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'form' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'formaction' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'formenctype' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'formmethod' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'formnovalidation' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'formtarget' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'height' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'list' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'max' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'maxlength' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'min' &lt;em&gt;string&lt;/em&gt;: The class attribute&lt;/p&gt;" type="array" variable="$attributes">
            <type>array</type>
          </tag>
          <tag name="return" line="1043" description="$attributes Returns the matched attributes as a string" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="1043" description="public"/>
          <tag name="todo" line="1043" description="complete documentation"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$attributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1085" package="template">
        <name>textarea</name>
        <full_name>\PVForms::textarea()</full_name>
        <docblock line="1085">
          <description>Creates a checkbox input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="1085" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="1085" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="1085" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="1085" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="1085" description="&lt;p&gt;The name of the input being generated. Will be the input field's name&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="1085" description="&lt;p&gt;The value in the textarea&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="1085" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$attributes">
            <type>array</type>
          </tag>
          <tag name="param" line="1085" description="&lt;p&gt;Options than can define how the CSS is styled around the form the div around the element.&#10;Options will be passed to PVHTML::getStandardAttributes() and PVHTML::getEventAttributes(). Have the option&#10;'disable_css' will disable the div surrouding the element.&lt;/p&gt;" type="array" variable="$css_options">
            <type>array</type>
          </tag>
          <tag name="return" line="1085" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="1085" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$attributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$css_options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1133" package="template">
        <name>form</name>
        <full_name>\PVForms::form()</full_name>
        <docblock line="1133">
          <description>Gets the tags for display s form with the data inside of it.</description>
          <long-description></long-description>
          <tag name="see" line="1133" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="1133" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="1133" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="1133" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="1133" description="&lt;p&gt;The name of the form&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="1133" description="&lt;p&gt;The content to go instead the form&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="1133" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1168" package="template">
        <name>formBegin</name>
        <full_name>\PVForms::formBegin()</full_name>
        <docblock line="1168">
          <description>Outputs the beginning of a form</description>
          <long-description></long-description>
          <tag name="see" line="1168" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="1168" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="1168" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="1168" description="" link="\PVForms::getFormAttributes()"/>
          <tag name="param" line="1168" description="&lt;p&gt;The name of the form&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="1168" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1168" description="" type=""/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1221" package="template">
        <name>formEnd</name>
        <full_name>\PVForms::formEnd()</full_name>
        <docblock line="1221">
          <description>Outputs the end of the form</description>
          <long-description></long-description>
          <tag name="param" line="1221" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="1043">complete documentation</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="util/PVLog.php" generated-path="util.PVLog.html" hash="328a6d72c96ec02cf7f2e010a8c24fa8" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="23" package="util">
      <extends>\PVStaticObject</extends>
      <name>PVLog</name>
      <full_name>\PVLog</full_name>
      <docblock line="23">
        <description>PVLog is used to write information to a log for record keeping.</description>
        <long-description>The logs that can be recorded is up to the developer. The class can be overridden with Adapters to do things like write to syslog or external logging services.

Example:
```php
//Initialize The class
PVLog::init();

//Write various logs with different priority levels
PVLog::writeLog('Warning', 'Illegal Access By User');
PVLog::writeLog('High Alert', 'System Almost Out Of Memory');
PVLog::writeLog('Low', 'Page Not Found');

//Get the logs with a high priority level
$logs = PVLog::readLog('High Alert');
```</long-description>
        <tag name="package" line="23" description="util"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="28" package="util">
        <name>$_logDirectory</name>
        <full_name>\PVLog::$_logDirectory</full_name>
        <default></default>
        <docblock line="28">
          <description>The directory the logs will be written too</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="33" package="util">
        <name>$_timestampFormat</name>
        <full_name>\PVLog::$_timestampFormat</full_name>
        <default></default>
        <docblock line="33">
          <description>The format of the timestamp for the logs</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="38" package="util">
        <name>$_logFile</name>
        <full_name>\PVLog::$_logFile</full_name>
        <default></default>
        <docblock line="38">
          <description>The name of the file the logs are being saved too</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="43" package="util">
        <name>$_logFormat</name>
        <full_name>\PVLog::$_logFormat</full_name>
        <default></default>
        <docblock line="43">
          <description>The format for saving logs, in terms of priorty, message and date</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="60" package="util">
        <name>init</name>
        <full_name>\PVLog::init()</full_name>
        <docblock line="60">
          <description>Initialize the log class and set the options for how the logger will write
and read logs.</description>
          <long-description></long-description>
          <tag name="param" line="60" description="&lt;p&gt;An array of configuration options&#10;-'directory' &lt;em&gt;string&lt;/em&gt;: The directory to place the logged file. Default location is '/tmp/' folder&#10;-'file' &lt;em&gt;string&lt;/em&gt;: The file name to save the log in. Default is a blank string. If left empty, the default&#10;will be the priorioty name. If the priority is 'alert', the file will be named alert.log.&#10;-'timestamp_format' &lt;em&gt;string&lt;/em&gt;: The date/time format to save the log file as. Default is 'Y-m-d H:i:s'&#10;-'log_format' &lt;em&gt;string&lt;/em&gt;: The format to save the log in. Values will be replaced with passed in values.&#10;Default values are '{priority} {timestamp} {message}\n'&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="60" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="60" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="util">
        <name>writeLog</name>
        <full_name>\PVLog::writeLog()</full_name>
        <docblock line="99">
          <description>Write a message to the log.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;The priority should be a string. Keep in mind that if no 'file' was set in the config, the priority will be the log file name&lt;/p&gt;" type="string" variable="$priority">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The message to write to the log&lt;/p&gt;" type="string" variable="$message">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options to configure writing to the log&#10;-'directory' &lt;em&gt;string&lt;/em&gt;: The directory to place the logged file. Default set in the init.&#10;-'file' &lt;em&gt;string&lt;/em&gt;: The file name to save the log in. Default is set in the init&#10;-'timestamp_format' &lt;em&gt;string&lt;/em&gt;: The date/time format to save the log file as. Default is set in the init&#10;-'log_format' &lt;em&gt;string&lt;/em&gt;: The format to save the log in. Default is set in the init&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="Returns true if the file is successfully written" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="99" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$priority</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$message</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="137" package="util">
        <name>readLog</name>
        <full_name>\PVLog::readLog()</full_name>
        <docblock line="137">
          <description>Read a log file.</description>
          <long-description></long-description>
          <tag name="param" line="137" description="&lt;p&gt;The priority to be read&lt;/p&gt;" type="string" variable="$priority">
            <type>string</type>
          </tag>
          <tag name="param" line="137" description="&lt;p&gt;Options that can configure what file to read&#10;-'directory' &lt;em&gt;string&lt;/em&gt;: The directory to place the logged file. Default set in the init.&#10;-'file' &lt;em&gt;string&lt;/em&gt;: The file name to save the log in. Default is set in the init&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="137" description="$log Returns the log if readable and exist. Otherwise returns false" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="137" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$priority</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="168" package="util">
        <name>_getLogDefaults</name>
        <full_name>\PVLog::_getLogDefaults()</full_name>
        <docblock line="168">
          <description>Get the defaults set in the initalization that configure the class.</description>
          <long-description></long-description>
          <tag name="param" line="168" description="&lt;p&gt;The priority to use. Default is null&lt;/p&gt;" type="string" variable="$priority">
            <type>string</type>
          </tag>
          <tag name="return" line="168" description="$defaults" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="168" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$priority</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="_BootMinusDatabase.php" generated-path="_BootMinusDatabase.html" hash="2f055fa2b951f317768c5fed65733dfc" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="network/PVRequest.php" generated-path="network.PVRequest.html" hash="7a03008282fdb33668fae3b58282381c" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="25" package="network">
      <extends>\PVStaticInstance</extends>
      <name>PVRequest</name>
      <full_name>\PVRequest</full_name>
      <docblock line="25">
        <description>PVRequest is responsible for receiving and parsing income HTTP requests.</description>
        <long-description>Built for receiving communication from other sources, PVRequest has the ability to take a request, parse the headers, get the data, determine what kind of requests, and other features.

Example:
```php
$request = new PVRequest();

if($request -&gt; isAjaxRequest()) {
	echo "AJAX REQUEST\n";
}

if(strtolower($request -&gt; getRequestMethod()) =='post') {
    echo "A Post Request was send\n";
}

$data = getRequestData();
print_r($data);
```</long-description>
        <tag name="package" line="25" description="network"/>
        <tag name="inherited_from" description="\PVStaticInstance" refers="\PVStaticInstance" link="/classes/PVStaticInstance.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="" line="30" package="network">
        <name>$_request_data</name>
        <full_name>\PVRequest::$_request_data</full_name>
        <default></default>
        <docblock line="30">
          <description>The data recieved from the request</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="35" package="network">
        <name>$_request_method</name>
        <full_name>\PVRequest::$_request_method</full_name>
        <default></default>
        <docblock line="35">
          <description>The method used to how the request was sent. Normally, GET, POST, PUT, DELETE but others request types are available.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="40" package="network">
        <name>$_http_request</name>
        <full_name>\PVRequest::$_http_request</full_name>
        <default></default>
        <docblock line="40">
          <description>The information recieved from the HTTP REQUEST</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="45" package="network">
        <name>$_mobile_devices</name>
        <full_name>\PVRequest::$_mobile_devices</full_name>
        <default></default>
        <docblock line="45">
          <description>The kinds of mobile devices</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="34" package="Default">
        <name>$_collection</name>
        <full_name>\PVStaticInstance::$_collection</full_name>
        <default>null</default>
        <docblock line="34">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="39" package="Default">
        <name>$_methods</name>
        <full_name>\PVStaticInstance::$_methods</full_name>
        <default>array()</default>
        <docblock line="39">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="54" package="network">
        <name>__construct</name>
        <full_name>\PVRequest::__construct()</full_name>
        <docblock line="54">
          <description>Set up the default variables for the Request class.</description>
          <long-description></long-description>
          <tag name="param" line="54" description="&lt;p&gt;An array of options that can be used to customize the class.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="54" description="instance" type="\PVRequest">
            <type>\PVRequest</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="98" package="network">
        <name>processRequest</name>
        <full_name>\PVRequest::processRequest()</full_name>
        <docblock line="98">
          <description>Process the request by breaking down the variables and adding it to the protected variable
$_request_data. This method is ran automatically by the constructor but can be dispable in the
constructor. If it is disabled, it should be ran before using other methods of this class.</description>
          <long-description></long-description>
          <tag name="return" line="98" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="98" description="public"/>
          <tag name="todo" line="98" description="make ability to handle 'head', 'delete' and 'continue'"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="137" package="network">
        <name>setRequestData</name>
        <full_name>\PVRequest::setRequestData()</full_name>
        <docblock line="137">
          <description>Sets the data that will act as the data for a request.</description>
          <long-description></long-description>
          <tag name="param" line="137" description="&lt;p&gt;Data to set as the request&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="137" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="137" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="158" package="network">
        <name>getRequestData</name>
        <full_name>\PVRequest::getRequestData()</full_name>
        <docblock line="158">
          <description>Returns the request data. The data can be return in certain formats if neccesary.</description>
          <long-description></long-description>
          <tag name="param" line="158" description="&lt;p&gt;The default format will return the data as set in the class. If set to json, the data will be return in a json format&lt;/p&gt;" type="string" variable="$format">
            <type>string</type>
          </tag>
          <tag name="return" line="158" description="$data The data return in a certain format" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="158" description="public"/>
          <tag name="todo" line="158" description="add ability to format data in xml and to serialize"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$format</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="186" package="network">
        <name>getRequestMethod</name>
        <full_name>\PVRequest::getRequestMethod()</full_name>
        <docblock line="186">
          <description>Returns the request method, where it is get, put, post or another form.</description>
          <long-description></long-description>
          <tag name="return" line="186" description="$method The method that was sent in a header" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="186" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="207" package="network">
        <name>setRequestMethod</name>
        <full_name>\PVRequest::setRequestMethod()</full_name>
        <docblock line="207">
          <description>Sets the request method to a certain type.</description>
          <long-description></long-description>
          <tag name="param" line="207" description="&lt;p&gt;The method to set as the request method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="207" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="207" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="224" package="network">
        <name>isMobile</name>
        <full_name>\PVRequest::isMobile()</full_name>
        <docblock line="224">
          <description>Returns a boolean that determines if the request was made by a mobile device.</description>
          <long-description></long-description>
          <tag name="return" line="224" description="$ismobile Returns true if the device is mobile, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="224" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="238" package="network">
        <name>getMobileDevice</name>
        <full_name>\PVRequest::getMobileDevice()</full_name>
        <docblock line="238">
          <description>Returns the mobile device that is currently being used</description>
          <long-description></long-description>
          <tag name="return" line="238" description="$device Returns the mobile device and if none, returns false" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="238" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="259" package="network">
        <name>isAjaxRequest</name>
        <full_name>\PVRequest::isAjaxRequest()</full_name>
        <docblock line="259">
          <description>Determines if the request is an ajax request.</description>
          <long-description></long-description>
          <tag name="return" line="259" description="$isAjax Returns true if the request is ajax, otherwise false" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="259" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="52" package="Default">
        <name>__set</name>
        <full_name>\PVStaticInstance::__set()</full_name>
        <docblock line="52">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="52" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="52" description="&lt;p&gt;A mixed value that can be any type&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="52" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="52" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="77" package="Default">
        <name>__get</name>
        <full_name>\PVStaticInstance::__get()</full_name>
        <docblock line="77">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="77" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="77" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="107" package="Default">
        <name>__call</name>
        <full_name>\PVStaticInstance::__call()</full_name>
        <docblock line="107">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="107" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="107" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="107" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="107" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="136" package="Default">
        <name>addToCollection</name>
        <full_name>\PVStaticInstance::addToCollection()</full_name>
        <docblock line="136">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="136" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="136" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="136" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="161" package="Default">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticInstance::addToCollectionWithName()</full_name>
        <docblock line="161">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="161" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="161" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="161" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="161" description="public"/>
          <tag name="todo" line="161" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="183" package="Default">
        <name>getIterator</name>
        <full_name>\PVStaticInstance::getIterator()</full_name>
        <docblock line="183">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="183" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="203" package="Default">
        <name>addMethod</name>
        <full_name>\PVStaticInstance::addMethod()</full_name>
        <docblock line="203">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="203" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="203" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="203" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="203" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="98">make ability to handle 'head', 'delete' and 'continue'</todo>
      <todo line="158">add ability to format data in xml and to serialize</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="system/PVDatabase.php" generated-path="system.PVDatabase.html" hash="90104a5d0c8596dbece8ee2650bf884d" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <constant namespace="" line="4" package="Default">
      <name>MYSQLI_REPORT_ERROR</name>
      <full_name>\MYSQLI_REPORT_ERROR</full_name>
      <value>null</value>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
    </constant>
    <class final="false" abstract="false" namespace="" line="58" package="system">
      <extends>\PVStaticObject</extends>
      <name>PVDatabase</name>
      <full_name>\PVDatabase</full_name>
      <docblock line="58">
        <description>PVDatabase controls the connections to various databases ranging from Mysql to MongoDB.</description>
        <long-description>For future development, the class needs to be written, but it offers a lot of powerful features that including prepared statements, schema manipulation, sanitization, and other features.

Example:
```php
//Initialize the class
PVDatabase::init();

//Two Different Configurations
$mysql_options = array(
	'dbhost' =&gt; 'localhost',
	'dbuser' =&gt; 'jondoe',
	'dbpass'=&gt;'abc123',
	'dbtype'=&gt;'mysql',
	'dbname'=&gt;'example1',
	'dbport'=&gt;3306
);

//Add The Connection
PVDatabase::addConnection('connection1', $mysql_options);

$postgres_options = array(
    'dbhost' =&gt; 'localhost',
    'dbuser' =&gt; 'janedoe',
    'dbpass'=&gt;'doeraeme',
    'dbtype'=&gt;'postgresql',
    'dbname'=&gt;'example2',
    'dbport'=&gt;5432
);

//Add The Connection
PVDatabase::addConnection('connection2', $postgres_options);

//Connect To the Mysql Database
PVDatabase::setDatabase('connection1');

//Sanitize input
$value = PVDatabase::makeSafe('SELECT ItemName, ItemDescription FROM Items WHERE ItemNumber = 999; DROP TABLE USERS ');

//Execute A Query
PVDatabase::query("INSERT INTO users(name) VALUES(${value})");

//Change the Database connection
PVDatabase::setDatabase('connection2');
```</long-description>
        <tag name="todo" line="58" description="break apart class into seperate database handlers"/>
        <tag name="package" line="58" description="system"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="private" namespace="" line="63" package="system">
        <name>$theQuery</name>
        <full_name>\PVDatabase::$theQuery</full_name>
        <default></default>
        <docblock line="63">
          <description>The current query being executed</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="68" package="system">
        <name>$link</name>
        <full_name>\PVDatabase::$link</full_name>
        <default></default>
        <docblock line="68">
          <description>The connection to the datbase</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="73" package="system">
        <name>$version</name>
        <full_name>\PVDatabase::$version</full_name>
        <default></default>
        <docblock line="73">
          <description>Not sure what this was for</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="81" package="system">
        <name>$mySQLConnection</name>
        <full_name>\PVDatabase::$mySQLConnection</full_name>
        <default>'mysql'</default>
        <docblock line="81">
          <description>MYSQL Connection indicator</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="86" package="system">
        <name>$postgreSQLConnection</name>
        <full_name>\PVDatabase::$postgreSQLConnection</full_name>
        <default>'postgresql'</default>
        <docblock line="86">
          <description>Postgresql Connection Indicator</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="91" package="system">
        <name>$oracleConnection</name>
        <full_name>\PVDatabase::$oracleConnection</full_name>
        <default>'oracle'</default>
        <docblock line="91">
          <description>Oracle connection indicator</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="96" package="system">
        <name>$msSQLConnection</name>
        <full_name>\PVDatabase::$msSQLConnection</full_name>
        <default>'mssql'</default>
        <docblock line="96">
          <description>MSSQL connection indicator</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="101" package="system">
        <name>$sqLiteConnection</name>
        <full_name>\PVDatabase::$sqLiteConnection</full_name>
        <default>'sqlite'</default>
        <docblock line="101">
          <description>SQL Light connection indicatir</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="106" package="system">
        <name>$mongoConnection</name>
        <full_name>\PVDatabase::$mongoConnection</full_name>
        <default>'mongo'</default>
        <docblock line="106">
          <description>MongoDB connection dicator</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="111" package="system">
        <name>$connections</name>
        <full_name>\PVDatabase::$connections</full_name>
        <default>array()</default>
        <docblock line="111">
          <description>An array of possible connections that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="116" package="system">
        <name>$mysql_error_report</name>
        <full_name>\PVDatabase::$mysql_error_report</full_name>
        <default>MYSQLI_REPORT_ERROR</default>
        <docblock line="116">
          <description>Ability to execute myself connections</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="122" package="system">
        <name>$dbhost</name>
        <full_name>\PVDatabase::$dbhost</full_name>
        <default>''</default>
        <docblock line="122">
          <description>The host of the current datbase</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="127" package="system">
        <name>$dbname</name>
        <full_name>\PVDatabase::$dbname</full_name>
        <default>''</default>
        <docblock line="127">
          <description>The name of the current database</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="132" package="system">
        <name>$dbuser</name>
        <full_name>\PVDatabase::$dbuser</full_name>
        <default>''</default>
        <docblock line="132">
          <description>The user to login to the current datbase</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="137" package="system">
        <name>$dbpass</name>
        <full_name>\PVDatabase::$dbpass</full_name>
        <default>''</default>
        <docblock line="137">
          <description>The password to access the current database</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="142" package="system">
        <name>$dbtype</name>
        <full_name>\PVDatabase::$dbtype</full_name>
        <default>''</default>
        <docblock line="142">
          <description>The type of DB being accessed(Postgresql, Mysql, ETC)</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="147" package="system">
        <name>$dbschema</name>
        <full_name>\PVDatabase::$dbschema</full_name>
        <default>''</default>
        <docblock line="147">
          <description>A schema to be accessed, if any</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="152" package="system">
        <name>$dbprefix</name>
        <full_name>\PVDatabase::$dbprefix</full_name>
        <default>''</default>
        <docblock line="152">
          <description>Optional prefixes for the tables</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="157" package="system">
        <name>$dbport</name>
        <full_name>\PVDatabase::$dbport</full_name>
        <default>''</default>
        <docblock line="157">
          <description>The port for the current database</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="162" package="system">
        <name>$current_connecton</name>
        <full_name>\PVDatabase::$current_connecton</full_name>
        <default>''</default>
        <docblock line="162">
          <description>The current database connection being referenced</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="167" package="system">
        <name>$row</name>
        <full_name>\PVDatabase::$row</full_name>
        <default></default>
        <docblock line="167">
          <description>A row of data</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="176" package="system">
        <name>init</name>
        <full_name>\PVDatabase::init()</full_name>
        <docblock line="176">
          <description>Initializes the class.</description>
          <long-description></long-description>
          <tag name="param" line="176" description="&lt;p&gt;Configuration options to pass into the class&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="176" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="217" package="system">
        <name>addConnection</name>
        <full_name>\PVDatabase::addConnection()</full_name>
        <docblock line="217">
          <description>Add a connection to the database class. The connection can be later
used by calling the function PVDatabase::setDatbase().</description>
          <long-description>Example

$connection=array(
	'dbhost'=&gt;'localhost',
	'dbuser'=&gt;'admin',
	'dbpass'=&gt;'abc123'
	'dbname'=&gt;'mydb',
	'dbtype'=&gt;'postgresql'
);

PVDatabase::addConnection('connection_1',$connection);</long-description>
          <tag name="param" line="217" description="&lt;p&gt;Connection name can either be a string or integer.&lt;/p&gt;" type="mixed" variable="$connection_name">
            <type>mixed</type>
          </tag>
          <tag name="param" line="217" description="&lt;p&gt;And array that contains the information for connecting to the database.&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;'dbhost' &lt;em&gt;string&lt;/em&gt;: The host or ip the database is on&lt;/li&gt;&#10;&lt;li&gt;'dbuser' &lt;em&gt;string&lt;/em&gt;: The username to connected to the database&lt;/li&gt;&#10;&lt;li&gt;'dbpass' &lt;em&gt;string&lt;/em&gt;: The password the user uses to connect to the database&lt;/li&gt;&#10;&lt;li&gt;'dbtype' &lt;em&gt;string&lt;/em&gt;: The type of database. Options are mysql - postgresql -mssql&lt;/li&gt;&#10;&lt;li&gt;'dbname' &lt;em&gt;string&lt;/em&gt;: The name of the database on the host&lt;/li&gt;&#10;&lt;li&gt;'dbport' &lt;em&gt;string&lt;/em&gt;: Optional. The port that is used to connect to the database&lt;/li&gt;&#10;&lt;li&gt;'dbschema' &lt;em&gt;string&lt;/em&gt;: Optional. The schema the database is on (generally used in PostgreSQL)&lt;/li&gt;&#10;&lt;li&gt;'dbprefix' &lt;em&gt;string&lt;/em&gt;: Optional. A prefix that will be placed in front of every table.&lt;/li&gt;&#10;&lt;/ul&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="217" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="217" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$connection_name</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="261" package="system">
        <name>setDatabase</name>
        <full_name>\PVDatabase::setDatabase()</full_name>
        <docblock line="261">
          <description>Set the database to one in the configuration file or to one passed used the
PVDatabase::addConnection method(). Will close the other database link if open
and create a new one.</description>
          <long-description>Example:
PVDatabase::setDatabase(0);</long-description>
          <tag name="param" line="261" description="&lt;p&gt;profile_id: The ID of the profile set in the config.php file&lt;/p&gt;" type="integer" variable="$profile_id">
            <type>integer</type>
          </tag>
          <tag name="return" line="261" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="261" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$profile_id</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="291" package="system">
        <name>connect</name>
        <full_name>\PVDatabase::connect()</full_name>
        <docblock line="291">
          <description>Connect the that database based on the creditionals
in the PHP file.</description>
          <long-description></long-description>
          <tag name="return" line="291" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="291" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="344" package="system">
        <name>query</name>
        <full_name>\PVDatabase::query()</full_name>
        <docblock line="344">
          <description>Executes a SQL Query.passed to the function. The query passed
should be sanitized for malicous code before being processed.</description>
          <long-description>Example:
$query='Select * FROM TABLE';
$result=PVDatabase::query($query);</long-description>
          <tag name="param" line="344" description="&lt;p&gt;A SQL query&lt;/p&gt;" type="string" variable="$query">
            <type>string</type>
          </tag>
          <tag name="return" line="344" description="$result Returns an object result related to the query passed" type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="344" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$query</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="390" package="system">
        <name>return_last_insert_query</name>
        <full_name>\PVDatabase::return_last_insert_query()</full_name>
        <docblock line="390">
          <description>Returns the id of the last inserted string into the databse.</description>
          <long-description>returnField and returnTable are generally optional but required
for databases such as PostgreSQL and MSSSQL

Example:
$query="INSERT INTO TABLE('Test Data') VALUES('abc', '123')";
$id=PVDatabase::return_last_insert_query($query, 'id', 'TABLE');</long-description>
          <tag name="param" line="390" description="&lt;p&gt;The query thing to be executed&lt;/p&gt;" type="string" variable="$query">
            <type>string</type>
          </tag>
          <tag name="param" line="390" description="&lt;p&gt;The field that is auto incremented and will be returned&lt;/p&gt;" type="string" variable="$returnField">
            <type>string</type>
          </tag>
          <tag name="param" line="390" description="&lt;p&gt;The table the auto-incremented value exist in&lt;/p&gt;" type="string" variable="$returnTable">
            <type>string</type>
          </tag>
          <tag name="return" line="390" description="$id The id of the last inserted field" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="390" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$query</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$returnField</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$returnTable</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="443" package="system">
        <name>resultRowCount</name>
        <full_name>\PVDatabase::resultRowCount()</full_name>
        <docblock line="443">
          <description>Get the number of rows return in a SELECT sql
statement. Function with automatically decide which
database to use.</description>
          <long-description>Example:
$result=PVDatabase::query("SELECT * FROM TABLE");
$count=PVDatabase::resultRowCount($result);</long-description>
          <tag name="param" line="443" description="&lt;p&gt;A result from a query&lt;/p&gt;" type="object" variable="$result">
            <type>object</type>
          </tag>
          <tag name="return" line="443" description="$count The number of rows in that result." type="integer">
            <type>integer</type>
          </tag>
          <tag name="access" line="443" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="483" package="system">
        <name>fetchArray</name>
        <full_name>\PVDatabase::fetchArray()</full_name>
        <docblock line="483">
          <description>Fetches the data in each row retrieved from a
result. Results are retuned as array</description>
          <long-description>Example:
$result=PVDatabase::query('SELECT title, description FROM TABLE');
while($row=PVDatabase::fetchArray($result)){
		echo $row['title'];
}</long-description>
          <tag name="param" line="483" description="&lt;p&gt;result: A result from a query object&lt;/p&gt;" type="object" variable="$result">
            <type>object</type>
          </tag>
          <tag name="return" line="483" description="row: An assoctive array of a row from a table" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="533" package="system">
        <name>fetchFields</name>
        <full_name>\PVDatabase::fetchFields()</full_name>
        <docblock line="533">
          <description>Fetches the data in each row retrieved from a
result. The results are compiled into an object
and returned.</description>
          <long-description>Example:
$result=PVDatabase::query('SELECT title, description FROM TABLE');
while($row=PVDatabase::fetchArray($result)){
		echo $row['title'];
}</long-description>
          <tag name="param" line="533" description="&lt;p&gt;A result from a query object&lt;/p&gt;" type="object" variable="$result">
            <type>object</type>
          </tag>
          <tag name="return" line="533" description="$row An assoctive array of a row from a table" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$result</name>
          <default></default>
          <type>object</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="595" package="system">
        <name>makeSafe</name>
        <full_name>\PVDatabase::makeSafe()</full_name>
        <docblock line="595">
          <description>Sanitizes information before it is inserted into the database. Should be
used on all user input to ensure security. Can sanitize a single string or
an array of data.</description>
          <long-description>Example::
$name=PVDatabase::makeSafe($_POST['name']);
$number=PVDatabase::makeSafe($_POST['number']);
PVDatabase::query("INSERT INTO TABLE(name, number) VALES('$name', '$number');</long-description>
          <tag name="param" line="595" description="&lt;p&gt;String can either be a string or an array of data&lt;/p&gt;" type="mixed" variable="$string">
            <type>mixed</type>
          </tag>
          <tag name="return" line="595" description="$sanitized_data If the input is a string, a string will be return&#10;if the input is an array, an array will be returned/" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="595" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="656" package="system">
        <name>closeDB</name>
        <full_name>\PVDatabase::closeDB()</full_name>
        <docblock line="656">
          <description>Closes a database connection depending on the connection
that has been set</description>
          <long-description></long-description>
          <tag name="return" line="656" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="656" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="692" package="system">
        <name>getSchema</name>
        <full_name>\PVDatabase::getSchema()</full_name>
        <docblock line="692">
          <description>Returns the schema that is being used for this database connection. A
'.' will be appended to the name of the schema if one exist. Schemas
are only necessary for postgresql and db2</description>
          <long-description>Example:
$table_name=PVDatabase::getSchema.'contacts';
$query="INSERT INTO $table_name(name, phone) VALUES('John Smith', '999-9999')";
PVDatabase::query($query);</long-description>
          <tag name="param" line="692" description="&lt;p&gt;Will appaned a period to the schema name&lt;/p&gt;" type="boolean" variable="$append_period">
            <type>boolean</type>
          </tag>
          <tag name="return" line="692" description="$schema Returns the name of the current schema." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="692" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$append_period</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="720" package="system">
        <name>clearTableData</name>
        <full_name>\PVDatabase::clearTableData()</full_name>
        <docblock line="720">
          <description>Truncates/Removes all information from a table.</description>
          <long-description></long-description>
          <tag name="param" line="720" description="&lt;p&gt;The name of the table to clear&lt;/p&gt;" type="string" variable="$tablename">
            <type>string</type>
          </tag>
          <tag name="param" line="720" description="&lt;p&gt;Options to be added at the end of the SQL query&lt;/p&gt;" type="string" variable="$options">
            <type>string</type>
          </tag>
          <tag name="return" line="720" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="720" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tablename</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="752" package="system">
        <name>tableExist</name>
        <full_name>\PVDatabase::tableExist()</full_name>
        <docblock line="752">
          <description>Checks to see of a certain table exist within a database.</description>
          <long-description>Example:
if(!PVDatabase::tableExist('contacts')){
		//Create table code
}</long-description>
          <tag name="param" line="752" description="&lt;p&gt;The name of the table being checked if it exist&lt;/p&gt;" type="string" variable="$tablename">
            <type>string</type>
          </tag>
          <tag name="param" line="752" description="&lt;p&gt;Add a schema to check against&lt;/p&gt;" type="string" variable="$schema">
            <type>string</type>
          </tag>
          <tag name="return" line="752" description="$exist Will be true if the tabe exist, else false;" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="752" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tablename</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$schema</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="800" package="system">
        <name>columnExist</name>
        <full_name>\PVDatabase::columnExist()</full_name>
        <docblock line="800">
          <description>Checkes if a column exist with a table. Make sure to enter
the schema.table_name if needed.</description>
          <long-description>Example:
if(!PVDatabase::columnExist('test.contacts', 'first_name' )){
		//Code to create table
}</long-description>
          <tag name="param" line="800" description="&lt;p&gt;The name of the table to be checked&lt;/p&gt;" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="800" description="&lt;p&gt;The name of the column to check if exist&lt;/p&gt;" type="string" variable="$field_name">
            <type>string</type>
          </tag>
          <tag name="return" line="800" description="$exist Returns true if exist, otherwise return false" type="boolean">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$field_name</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="841" package="system">
        <name>getSQLRandomOperator</name>
        <full_name>\PVDatabase::getSQLRandomOperator()</full_name>
        <docblock line="841">
          <description>Returns the function for getting a random variable. The
function returned is dependent on the database that
is set.</description>
          <long-description>Example:
$query="SELECT * TABLE ORDER BY ".PVDATABASE::getSQLRandomOperator;</long-description>
          <tag name="return" line="841" description="$avg_function" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="841" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="874" package="system">
        <name>formatData</name>
        <full_name>\PVDatabase::formatData()</full_name>
        <docblock line="874">
          <description>Data entered into the database sometimes has characters such as
'/' added to it. This function will remove those characters</description>
          <long-description>Example:
$name=PVDatabase::formatData($row['name']);
OR
$row=PVDatabase::formatData($row);</long-description>
          <tag name="param" line="874" description="&lt;p&gt;string: Either a string or array to format&lt;/p&gt;" type="mixed" variable="$string">
            <type>mixed</type>
          </tag>
          <tag name="return" line="874" description="data: Data with database characters removed" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="910" package="system">
        <name>dbAverageFunction</name>
        <full_name>\PVDatabase::dbAverageFunction()</full_name>
        <docblock line="910">
          <description>The average function is a function used to get the averge
of fields in a database. This function returns the AVG function
for the set database.</description>
          <long-description>Example:
$query="SELECT ".PVDatabase:::dbAverageFunction('age')." as average_age FROM Table</long-description>
          <tag name="param" line="910" description="&lt;p&gt;field: The Field whose average value will be returned&lt;/p&gt;" type="string" variable="$field">
            <type>string</type>
          </tag>
          <tag name="return" line="910" description="string average_function: The function needed to get the average value ina SQL string" type="\:">
            <type>\:</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="938" package="system">
        <name>getDatabaseType</name>
        <full_name>\PVDatabase::getDatabaseType()</full_name>
        <docblock line="938">
          <description>Returns the current databse being used.</description>
          <long-description></long-description>
          <tag name="return" line="938" description="database: The database being used" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="955" package="system">
        <name>getConnectionName</name>
        <full_name>\PVDatabase::getConnectionName()</full_name>
        <docblock line="955">
          <description>Returns the name of the current connection being used in the database.</description>
          <long-description></long-description>
          <tag name="return" line="955" description="$connection_name The name of the current connect" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="955" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="979" package="system">
        <name>getPagininationOffset</name>
        <full_name>\PVDatabase::getPagininationOffset()</full_name>
        <docblock line="979">
          <description>Returns paginate values. This function handles pagination depending on the database
being used.</description>
          <long-description></long-description>
          <tag name="param" line="979" description="&lt;p&gt;The main table to call pagination from&lt;/p&gt;" type="string" variable="$table">
            <type>string</type>
          </tag>
          <tag name="param" line="979" description="&lt;p&gt;Any tables that are joined in this query&lt;/p&gt;" type="string" variable="$join_clause">
            <type>string</type>
          </tag>
          <tag name="param" line="979" description="&lt;p&gt;Where SQL statement&lt;/p&gt;" type="string" variable="$where_clause">
            <type>string</type>
          </tag>
          <tag name="param" line="979" description="&lt;p&gt;The current page. All pages or done by pageNumber-1. 0 is the first page&lt;/p&gt;" type="integer" variable="$current_page">
            <type>integer</type>
          </tag>
          <tag name="param" line="979" description="&lt;p&gt;The number of results to return per page&lt;/p&gt;" type="integer" variable="$results_per_page">
            <type>integer</type>
          </tag>
          <tag name="param" line="979" description="&lt;p&gt;How to order the results.&lt;/p&gt;" type="string" variable="$order_by">
            <type>string</type>
          </tag>
          <tag name="param" line="979" description="&lt;p&gt;How to count the results, default is 'COUNT(*) as count'&lt;/p&gt;" type="string" variable="$fields">
            <type>string</type>
          </tag>
          <tag name="return" line="979" description="results: Returns the" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$join_clause</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$where_clause</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$current_page</name>
          <default>0</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$results_per_page</name>
          <default>20</default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$order_by</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$fields</name>
          <default>'COUNT(*) as count'</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1070" package="system">
        <name>getDatabaseLink</name>
        <full_name>\PVDatabase::getDatabaseLink()</full_name>
        <docblock line="1070">
          <description>Every connection to a database has what is known as a link to that database.</description>
          <long-description>For external madification  of the link, this method will retun the current link.</long-description>
          <tag name="return" line="1070" description="link: Connection to the set database." type="\dbojbect">
            <type>\dbojbect</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1092" package="system">
        <name>insertStatement</name>
        <full_name>\PVDatabase::insertStatement()</full_name>
        <docblock line="1092">
          <description>Insert information into the databas without explicitly writing the
query.Does not use a prepared statement.</description>
          <long-description></long-description>
          <tag name="param" line="1092" description="&lt;p&gt;table_name: The name of the information is being inserted into.&lt;/p&gt;" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="1092" description="&lt;p&gt;data: Information to be inserted into that table.The key is the column and the key's value is the colums value.&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="1092" description="&lt;p&gt;options: Options that can be used for altering the connection.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1092" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="1092" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1165" package="system">
        <name>updateStatement</name>
        <full_name>\PVDatabase::updateStatement()</full_name>
        <docblock line="1165">
          <description>Update record(s) in the database depending on the arguements specified in the wherelist</description>
          <long-description></long-description>
          <tag name="param" line="1165" description="&lt;p&gt;The name of the table to update&lt;/p&gt;" type="string" variable="$table">
            <type>string</type>
          </tag>
          <tag name="param" line="1165" description="&lt;p&gt;The data to update in key =&gt; value ( column =&gt; value ) format&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="1165" description="&lt;p&gt;Options defined on where to update the value&lt;/p&gt;" type="array" variable="$wherelist">
            <type>array</type>
          </tag>
          <tag name="param" line="1165" description="&lt;p&gt;Extra options when updating a table&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1165" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="1165" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$wherelist</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1241" package="system">
        <name>selectStatement</name>
        <full_name>\PVDatabase::selectStatement()</full_name>
        <docblock line="1241">
          <description>Creates a select statement to query data in the database.</description>
          <long-description></long-description>
          <tag name="param" line="1241" description="&lt;p&gt;An array of arguement that define the select statement&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="param" line="1241" description="&lt;p&gt;Options to alter the select statement&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1241" description="$results" type="\$mixed">
            <type>\$mixed</type>
          </tag>
          <tag name="access" line="1241" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1366" package="system">
        <name>deleteStatement</name>
        <full_name>\PVDatabase::deleteStatement()</full_name>
        <docblock line="1366">
          <description>Deletes an item from the database</description>
          <long-description></long-description>
          <tag name="param" line="1366" description="&lt;p&gt;Arguements that define how the query will be created&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="param" line="1366" description="&lt;p&gt;Options that define how the query will run&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1366" description="$result The result of the query" type="object">
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1449" package="system">
        <name>preparedQuery</name>
        <full_name>\PVDatabase::preparedQuery()</full_name>
        <docblock line="1449">
          <description>Executes a prepared Query that will be inserted into the database. Function still needs
work before being used.</description>
          <long-description></long-description>
          <tag name="param" line="1449" description="" type="string" variable="$query">
            <type>string</type>
          </tag>
          <tag name="param" line="1449" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="1449" description="" type="string" variable="$formats">
            <type>string</type>
          </tag>
          <tag name="todo" line="1449" description="fix"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$query</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$formats</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1487" package="system">
        <name>preparedInsert</name>
        <full_name>\PVDatabase::preparedInsert()</full_name>
        <docblock line="1487">
          <description>Function needs improvment.</description>
          <long-description></long-description>
          <tag name="param" line="1487" description="" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="1487" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="1487" description="" type="array" variable="$formats">
            <type>array</type>
          </tag>
          <tag name="access" line="1487" description="public"/>
          <tag name="todo" line="1487" description="write better code"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$formats</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1590" package="system">
        <name>preparedReturnLastInsert</name>
        <full_name>\PVDatabase::preparedReturnLastInsert()</full_name>
        <docblock line="1590">
          <description>Inserts a query into the database and returns the id of the field that was last inserted.</description>
          <long-description>The query will be a prepared statement.</long-description>
          <tag name="param" line="1590" description="&lt;p&gt;table_name The name of the table the information will be inserted into.&lt;/p&gt;" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="1590" description="&lt;p&gt;returnField The field that will be returned as the ID. Used in postgresql..&lt;/p&gt;" type="string" variable="$returnField">
            <type>string</type>
          </tag>
          <tag name="param" line="1590" description="&lt;p&gt;returnTable The table the returnField is in. Used for MSSQL.&lt;/p&gt;" type="string" variable="$returnTable">
            <type>string</type>
          </tag>
          <tag name="param" line="1590" description="&lt;p&gt;The data to be inserted in the format of the key being the column and the&#10;key's value being the data.&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="1590" description="&lt;p&gt;Still in progress. Formats a preparted statemet.&lt;/p&gt;" type="array" variable="$formats">
            <type>array</type>
          </tag>
          <tag name="param" line="1590" description="&lt;p&gt;Options mainly used for Mongo&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="access" line="1590" description="public"/>
          <tag name="todo" line="1590" description="write better code"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$returnField</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$returnTable</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$formats</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1730" package="system">
        <name>preparedSelect</name>
        <full_name>\PVDatabase::preparedSelect()</full_name>
        <docblock line="1730">
          <description>Executes a prepared select statement. Complex statements are complex enough that the data must be
formated outside. The passed query should already have the ? inserted for values. The data array passed should
correspond to that values.Futures version will have a select statement that handles the data in a better way.</description>
          <long-description></long-description>
          <tag name="param" line="1730" description="&lt;p&gt;A query of formatted data to be inserted into the database.&lt;/p&gt;" type="string" variable="$query">
            <type>string</type>
          </tag>
          <tag name="param" line="1730" description="&lt;p&gt;Data to be inserted into the database. The key should be the column name and the value&#10;should be the column's value.&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="1730" description="&lt;p&gt;The formats for a prepared statement&lt;/p&gt;" type="array" variable="$formats">
            <type>array</type>
          </tag>
          <tag name="param" line="1730" description="&lt;p&gt;Options than can be used to alter the query and its function&#10;-prequery   &lt;em&gt;string&lt;/em&gt;: SQL to add before the query&#10;-postquery &lt;em&gt;string&lt;/em&gt;: Additonal information to add at the end of the normal&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1730" description="result: Retuns a result that will need to be run through fetch process." type="\data">
            <type>\data</type>
          </tag>
          <tag name="access" line="1730" description="public"/>
          <tag name="todo" line="1730" description="write better code"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$query</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$formats</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1796" package="system">
        <name>selectPreparedStatement</name>
        <full_name>\PVDatabase::selectPreparedStatement()</full_name>
        <docblock line="1796">
          <description>A SELECT query that will run as a prepared statement</description>
          <long-description></long-description>
          <tag name="param" line="1796" description="" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="param" line="1796" description="" type="array" variable="$options">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1925" package="system">
        <name>preparedUpdate</name>
        <full_name>\PVDatabase::preparedUpdate()</full_name>
        <docblock line="1925">
          <description>Updates a tables data using a prepared query.</description>
          <long-description></long-description>
          <tag name="param" line="1925" description="&lt;p&gt;The name of the table to be updated.&lt;/p&gt;" type="string" variable="$table">
            <type>string</type>
          </tag>
          <tag name="param" line="1925" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="1925" description="" type="array" variable="$wherelist">
            <type>array</type>
          </tag>
          <tag name="param" line="1925" description="" type="array" variable="$formats">
            <type>array</type>
          </tag>
          <tag name="param" line="1925" description="" type="array" variable="$whereformats">
            <type>array</type>
          </tag>
          <tag name="param" line="1925" description="" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="access" line="1925" description="public"/>
          <tag name="todo" line="1925" description="write better code"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$wherelist</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$formats</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$whereformats</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="2034" package="system">
        <name>preparedDelete</name>
        <full_name>\PVDatabase::preparedDelete()</full_name>
        <docblock line="2034">
          <description>Deletes a row in the database spcefied by parameters passed. Use this function
with caution.</description>
          <long-description></long-description>
          <tag name="param" line="2034" description="&lt;p&gt;The table the information will be deleted from.&lt;/p&gt;" type="string" variable="$table">
            <type>string</type>
          </tag>
          <tag name="param" line="2034" description="&lt;p&gt;An array of whats fields to use when deleting the data. The key of the array should be the column name and the array's key value should be the value present in the column.&lt;/p&gt;" type="array" variable="$wherelist">
            <type>array</type>
          </tag>
          <tag name="param" line="2034" description="&lt;p&gt;Formats for the where.&lt;/p&gt;" type="array" variable="$whereformats">
            <type>array</type>
          </tag>
          <tag name="param" line="2034" description="&lt;p&gt;Options mainly for MongoDB&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="2034" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$wherelist</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$whereformats</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="2120" package="system">
        <name>getPreparedPlaceHolder</name>
        <full_name>\PVDatabase::getPreparedPlaceHolder()</full_name>
        <docblock line="2120">
          <description>The placeholder is a value in preared statements that is suppose to represent a value
to replaced at exection. Placeholder change depending on the database.</description>
          <long-description></long-description>
          <tag name="param" line="2120" description="&lt;p&gt;The placeholder spot. Used for postgresql&lt;/p&gt;" type="integer" variable="$count">
            <type>integer</type>
          </tag>
          <tag name="return" line="2120" description="The placeholder for the current database" type="\$string">
            <type>\$string</type>
          </tag>
          <tag name="access" line="2120" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$count</name>
          <default>1</default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="2155" package="system">
        <name>formatTableName</name>
        <full_name>\PVDatabase::formatTableName()</full_name>
        <docblock line="2155">
          <description>Formats a table to the names conventions used by the current database set up. If the table prefix
is set for the current connection, it will be appened to the name of the database. If the schema
is set, that will be appeneded also.</description>
          <long-description></long-description>
          <tag name="param" line="2155" description="&lt;p&gt;The name of the table to be formated&lt;/p&gt;" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="2155" description="&lt;p&gt;Will append the schema to the table name&lt;/p&gt;" type="boolean" variable="$append_schema">
            <type>boolean</type>
          </tag>
          <tag name="param" line="2155" description="&lt;p&gt;Will append a prefix to the tablee, but behind the schema&lt;/p&gt;" type="boolean" variable="$append_prefix">
            <type>boolean</type>
          </tag>
          <tag name="return" line="2155" description="$table_name The name of the table with the values appened in front of it" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="2155" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$append_schema</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$append_prefix</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="2188" package="system">
        <name>parseOperators</name>
        <full_name>\PVDatabase::parseOperators()</full_name>
        <docblock line="2188">
          <description>Takes in an array of values that is formated like a query, and parse it to become a SQL query. For example:</description>
          <long-description>array('&gt;' = '5') will become column &gt; 5</long-description>
          <tag name="param" line="2188" description="&lt;p&gt;The name of column to do the comparison operation&lt;/p&gt;" type="string" variable="$column">
            <type>string</type>
          </tag>
          <tag name="param" line="2188" description="&lt;p&gt;The args in key value and subkey value. The keys are conditionals and the value are what te conditio is being compparied too&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="param" line="2188" description="&lt;p&gt;They conditional, either AND or OR for the query&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="2188" description="&lt;p&gt;How to compare values&lt;/p&gt;" type="string" variable="$operator">
            <type>string</type>
          </tag>
          <tag name="param" line="2188" description="&lt;p&gt;For recursive operation, is this the first value&lt;/p&gt;" type="boolean" variable="$first">
            <type>boolean</type>
          </tag>
          <tag name="return" line="2188" description="$query A query to execute" type="string">
            <type>string</type>
          </tag>
          <tag name="todo" line="2188" description="Rewrite this function and description for clarity"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$column</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default>'AND'</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$operator</name>
          <default>'='</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$first</name>
          <default>true</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="2238" package="system">
        <name>bindParameters</name>
        <full_name>\PVDatabase::bindParameters()</full_name>
        <docblock line="2238">
          <description>For prepared statements, binds the parameters with placeholders.</description>
          <long-description></long-description>
          <tag name="param" line="2238" description="&lt;p&gt;The sql statement&lt;/p&gt;" type="string" variable="$statement">
            <type>string</type>
          </tag>
          <tag name="param" line="2238" description="&lt;p&gt;The parameters to bind with&lt;/p&gt;" type="array" variable="$params">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$statement</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$params</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="2259" package="system">
        <name>stmt_bind_assoc</name>
        <full_name>\PVDatabase::stmt_bind_assoc()</full_name>
        <docblock line="2259">
          <description>For prepared statements, binds an associatve array. Used for myql.</description>
          <long-description></long-description>
          <tag name="param" line="2259" description="&lt;p&gt;The mysql statement&lt;/p&gt;" type="string" variable="$stmt">
            <type>string</type>
          </tag>
          <tag name="param" line="2259" description="&lt;p&gt;The output&lt;/p&gt;" type="string" variable="$out">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="true">
          <name>$stmt</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="true">
          <name>$out</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="2295" package="system">
        <name>createTable</name>
        <full_name>\PVDatabase::createTable()</full_name>
        <docblock line="2295">
          <description>Create a table in the database in which the connection is currently set too.</description>
          <long-description></long-description>
          <tag name="param" line="2295" description="&lt;p&gt;The name of the to be created&lt;/p&gt;" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="2295" description="&lt;p&gt;The columns that are to be created with the table.&#10;The syntax for creating the columns are from @see formatColumn. The&#10;column name is the key and parameters that create the column is the array that&#10;will be passed to formatColumns&lt;/p&gt;" type="array" variable="$columns">
            <type>array</type>
          </tag>
          <tag name="param" line="2295" description="&lt;p&gt;Options that control the creation of a table.&#10;-'format_table' &lt;em&gt;boolean&lt;/em&gt;: Formats the table by adding the table prefix set in the database configuration. Default is false.&#10;-'execute' &lt;em&gt;boolean&lt;/em&gt;: Execute the query to create the table. Default is true.&#10;-'return_query' &lt;em&gt;boolean&lt;/em&gt;: Returns the query that would create the table. Default is true&#10;-'primary_key' &lt;em&gt;string&lt;/em&gt;: The primary key(s) of the table&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="2295" description="$query The return query to create the table or false" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="2295" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$columns</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="2360" package="system">
        <name>addColumn</name>
        <full_name>\PVDatabase::addColumn()</full_name>
        <docblock line="2360">
          <description>Adds a columns to a table that already exist.</description>
          <long-description></long-description>
          <tag name="param" line="2360" description="&lt;p&gt;The name of the table that the column will be added too&lt;/p&gt;" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="2360" description="&lt;p&gt;The name of the column to be adding to the table&lt;/p&gt;" type="string" variable="$column_name">
            <type>string</type>
          </tag>
          <tag name="param" line="2360" description="&lt;p&gt;The data that will define the column to be created. The array should contain&#10;the same information would would be passed too formatColumn (@see formatColumn).&lt;/p&gt;" type="array" variable="$column_data">
            <type>array</type>
          </tag>
          <tag name="param" line="2360" description="&lt;p&gt;Options that define how adding a column operates.&#10;-'format_table' &lt;em&gt;boolean&lt;/em&gt;: Formats the table name by adding the prefix set in the database config. Default is false.&#10;-'execute' &lt;em&gt;boolean&lt;/em&gt;: Execute the query to create the table. Default is true.&#10;-'return_query' &lt;em&gt;bolean&lt;/em&gt;: Return the generated query. Default is true;&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="2360" description="$query Returns the query for creating the table name" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="2360" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$column_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$column_data</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="2416" package="system">
        <name>formatColumn</name>
        <full_name>\PVDatabase::formatColumn()</full_name>
        <docblock line="2416">
          <description>Formats a column based up passed parameters. The formated column will be ready to enter in a SQL
database.</description>
          <long-description></long-description>
          <tag name="param" line="2416" description="&lt;p&gt;The name of the column to be formated&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="2416" description="&lt;p&gt;Options that define the column being created&#10;-'primary_key' &lt;em&gt;boolean&lt;/em&gt; : Is the passed option a primary key. Default is false.&#10;-'unique' &lt;em&gt;boolean&lt;/em&gt;: Is the passed column considered to be unique. Default is false.&#10;-'not_null' &lt;em&gt;boolean&lt;/em&gt;: Does the column have a not null set. Default is true.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of column this is. Default is string but there are many options&#10;and the options are database dependent on what will be created. For a list of types that will&#10;create a value, see function mapColumnType&#10;-'precision' &lt;em&gt;int&lt;/em&gt;: How price the column will be. For example if the type is varchar and the precision is 10,&#10;then varchar(10) will be used.&#10;-'default' &lt;em&gt;string&lt;/em&gt;: The default value for the column&#10;-'auto_increment' &lt;em&gt;boolean&lt;/em&gt;: Is this column auto incremented. Default is false.&#10;-'execute_default' &lt;em&gt;boolean&lt;/em&gt;: If the default is a sql executable function, set to true so that the funciton will be executed&lt;/p&gt;" type="\options" variable="$options">
            <type>\options</type>
          </tag>
          <tag name="return" line="2416" description="$format The column will be returned with arguements formatted to the set database." type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="2416" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="2475" package="system">
        <name>getAutoIncrement</name>
        <full_name>\PVDatabase::getAutoIncrement()</full_name>
        <docblock line="2475">
          <description>Returns the method auto incremented based on the database that is set.</description>
          <long-description></long-description>
          <tag name="return" line="2475" description="$increment The auto increment method with is database dependent" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="2475" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="2504" package="system">
        <name>columnTypeMap</name>
        <full_name>\PVDatabase::columnTypeMap()</full_name>
        <docblock line="2504">
          <description>Maps the column type depending on which database is set. For example, is the database is mysql
and the type string is passed through, the return value is varchar. If the database is postgresql,
the return type would be character varying.</description>
          <long-description></long-description>
          <tag name="param" line="2504" description="&lt;p&gt;The type of variabel to be matched&lt;/p&gt;" type="string" variable="$type">
            <type>string</type>
          </tag>
          <tag name="return" line="2504" description="$match The matched type found" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="2504" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$type</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="2591" package="system">
        <name>dropColumn</name>
        <full_name>\PVDatabase::dropColumn()</full_name>
        <docblock line="2591">
          <description>Remove a column from a table in the database.</description>
          <long-description></long-description>
          <tag name="param" line="2591" description="&lt;p&gt;The name of the table to remove the column from&lt;/p&gt;" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="2591" description="&lt;p&gt;The name name of the column to be removed&lt;/p&gt;" type="string" variable="$column_name">
            <type>string</type>
          </tag>
          <tag name="param" line="2591" description="&lt;p&gt;Options that define how removing a column operates.&#10;-'format_table' &lt;em&gt;boolean&lt;/em&gt;: Formats the table name by adding the prefix set in the database config. Default is false.&#10;-'execute' &lt;em&gt;boolean&lt;/em&gt;: Execute the query to remove the column. Default is true.&#10;-'return_query' &lt;em&gt;bolean&lt;/em&gt;: Return the generated query. Default is true;&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="2591" description="$query Returns the query for removing the column" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="2591" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$column_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="2637" package="system">
        <name>dropTable</name>
        <full_name>\PVDatabase::dropTable()</full_name>
        <docblock line="2637">
          <description>Drops a table in the database</description>
          <long-description></long-description>
          <tag name="param" line="2637" description="&lt;p&gt;The name of the table to be dropped&lt;/p&gt;" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="2637" description="&lt;p&gt;Options that define how to remove the table&#10;-'format_table' &lt;em&gt;boolean&lt;/em&gt;: Formats the table name by adding the prefix set in the database config. Default is false.&#10;-'execute' &lt;em&gt;boolean&lt;/em&gt;: Execute the query to the table. Default is true.&#10;-'return_query' &lt;em&gt;bolean&lt;/em&gt;: Return the generated query. Default is true;&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="2637" description="$query Returns the query for dropping the stable" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="2637" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="2678" package="system">
        <name>_setMongoCollection</name>
        <full_name>\PVDatabase::_setMongoCollection()</full_name>
        <docblock line="2678">
          <description>Sets the current MongoDB collection to use</description>
          <long-description></long-description>
          <tag name="param" line="2678" description="&lt;p&gt;Not really a table but a collection in a Mongo Database&lt;/p&gt;" type="string" variable="$table_name">
            <type>string</type>
          </tag>
          <tag name="param" line="2678" description="&lt;p&gt;Options to pass to Mongo collection&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;boolean gridFS Default is false, but if set to true, will use gridFS&lt;/li&gt;&#10;&lt;/ul&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="2678" description="The collection" type="object">
            <type>object</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$table_name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="2706" package="system">
        <name>catchDBError</name>
        <full_name>\PVDatabase::catchDBError()</full_name>
        <docblock line="2706">
          <description>Not sure what this function does</description>
          <long-description></long-description>
          <tag name="todo" line="2706" description="dig into the function and redo"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="58">break apart class into seperate database handlers</todo>
      <todo line="1449">fix</todo>
      <todo line="1487">write better code</todo>
      <todo line="1590">write better code</todo>
      <todo line="1730">write better code</todo>
      <todo line="1925">write better code</todo>
      <todo line="2188">Rewrite this function and description for clarity</todo>
      <todo line="2706">dig into the function and redo</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="network/PVResponse.php" generated-path="network.PVResponse.html" hash="a4d13fad8610e22e08b9d6d9d098c41e" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="21" package="network">
      <extends>\PVStaticObject</extends>
      <name>PVResponse</name>
      <full_name>\PVResponse</full_name>
      <docblock line="21">
        <description>PVResponse is responsible for sending HTTP responses back to a client.</description>
        <long-description>The class takes into consideration the many generic responses HTTP has ranging from 200 to 500, and helps make it easy to output the correct response with headers.

Example:
```php
//Init the class
PVResponse::init();

//Successful Response
PVResponse::createResponse(200, 'Hello Word!');

//Page Not Found
PVResponse::createResponse(404, 'The page you are looking for cannot be found');
```</long-description>
        <tag name="package" line="21" description="network"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="26" package="network">
        <name>$_statusMessages</name>
        <full_name>\PVResponse::$_statusMessages</full_name>
        <default></default>
        <docblock line="26">
          <description>A list of generic HTTP Statuses</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="34" package="network">
        <name>init</name>
        <full_name>\PVResponse::init()</full_name>
        <docblock line="34">
          <description>The initalizer for the static class</description>
          <long-description></long-description>
          <tag name="param" line="34" description="&lt;p&gt;A list of options for initalizing the class&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;array 'status_messages' This is the ability to add in custom status messages&lt;/li&gt;&#10;&lt;/ul&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="62" package="network">
        <name>createResponse</name>
        <full_name>\PVResponse::createResponse()</full_name>
        <docblock line="62">
          <description>Creates an html response to display to the. The response can be override by setting the body
to a value other than an empty string.</description>
          <long-description></long-description>
          <tag name="param" line="62" description="&lt;p&gt;The status is the status code that will be sent as a header&lt;/p&gt;" type="integer" variable="$status">
            <type>integer</type>
          </tag>
          <tag name="param" line="62" description="&lt;p&gt;The content of that will be displayed to the user. If no body is set, a default html template will be display with the status code&lt;/p&gt;" type="string" variable="$content">
            <type>string</type>
          </tag>
          <tag name="param" line="62" description="&lt;p&gt;An array of options that define how content will be displayed&#10;-'content_type' &lt;em&gt;string&lt;/em&gt;: The type of content that will be displayed. Default is text/html&#10;-'message' &lt;em&gt;string&lt;/em&gt;: A message that can be displayed us no body is set. Default is empty string.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="62" description="$response A response generated based on the variables" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="62" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$status</name>
          <default></default>
          <type>integer</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$content</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="118" package="network">
        <name>setStatusMessages</name>
        <full_name>\PVResponse::setStatusMessages()</full_name>
        <docblock line="118">
          <description>Set message to be used. This will ovveride the default ones that are currently
being used.</description>
          <long-description></long-description>
          <tag name="param" line="118" description="&lt;p&gt;An array that the key is the interger that is a status and the value the description of the code&lt;/p&gt;" type="array" variable="$messages">
            <type>array</type>
          </tag>
          <tag name="param" line="118" description="&lt;p&gt;An array that can be used to define how the status codes are added&#10;-'use_message_defaults' &lt;em&gt;boolean&lt;/em&gt;: Default is true and if set to true, will be the status codes that come with the class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="118" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="118" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$messages</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="145" package="network">
        <name>getStatusMessage</name>
        <full_name>\PVResponse::getStatusMessage()</full_name>
        <docblock line="145">
          <description>Returns the message to a status based on the code that is passed.</description>
          <long-description></long-description>
          <tag name="param" line="145" description="&lt;p&gt;An interger value representing the status code&lt;/p&gt;" type="integer" variable="$status">
            <type>integer</type>
          </tag>
          <tag name="return" line="145" description="$message Returns a message if found, otherwise returns false" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="145" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$status</name>
          <default></default>
          <type>integer</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="172" package="network">
        <name>writeHeader</name>
        <full_name>\PVResponse::writeHeader()</full_name>
        <docblock line="172">
          <description>Writes PHP headers.Should be called before any content is outputted.</description>
          <long-description></long-description>
          <tag name="param" line="172" description="&lt;p&gt;An array of headers in $key value format or an array of arrays. If array of arrays is passed,&#10;the values in the array should be this:&#10;-'header' &lt;em&gt;string&lt;/em&gt;: The string to be passed as the header.&#10;-'http_response_code' &lt;em&gt;int&lt;/em&gt;: The http response code, default value is null.&#10;-'replace' &lt;em&gt;boolean&lt;/em&gt;: Indicates if the header passed should replace a previously passed header. Default is true.&lt;/p&gt;" type="array" variable="$headers">
            <type>array</type>
          </tag>
          <tag name="return" line="172" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="172" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$headers</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="198" package="network">
        <name>getDefaultStatusMessages</name>
        <full_name>\PVResponse::getDefaultStatusMessages()</full_name>
        <docblock line="198">
          <description>Get the default status messages associated with a status.</description>
          <long-description></long-description>
          <tag name="return" line="198" description="$messages Return an array in wich the key is the status and the value is a message" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="198" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="data/PVPatterns.php" generated-path="data.PVPatterns.html" hash="69b67dd4956e22e974e53ebc536893a5" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="10" package="data">
      <extends/>
      <name>PVPatterns</name>
      <full_name>\PVPatterns</full_name>
      <docblock line="10">
        <description>PVPatterns is the parent class for implementing Adapters, Observers, Intercepting Filters and Singletons on instances.</description>
        <long-description>Prodgiyview comes with  4 design patterns that can be extended to any object: Adapters, Observers, Intercepting Filters and Singletons. By extending this class to any object that can be instantiated, they will have the capability of using these design patterns.</long-description>
        <tag name="package" line="10" description="data"/>
      </docblock>
      <property static="false" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been stored</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been stored</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Get stores instance f singletons</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Filters that have been stored</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>The boolean for following and printing out adapters as they are called</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and printing out filters as they are called</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>The Boolean for following and printing out observers as they are called</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="66" package="data">
        <name>addAdapter</name>
        <full_name>\PVPatterns::addAdapter()</full_name>
        <docblock line="66">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="66" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="66" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="66" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="96" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVPatterns::addClassAdapter()</full_name>
        <docblock line="96">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="96" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="96" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="96" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="96" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="96" description="public"/>
          <tag name="todo" line="96" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="135" package="data">
        <name>_callAdapter</name>
        <full_name>\PVPatterns::_callAdapter()</full_name>
        <docblock line="135">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="135" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="&lt;p&gt;The name of the method that is being adapted.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="&lt;p&gt;An infinite amout of parameters to passed to this method.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="135" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="135" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="171" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVPatterns::_hasAdapter()</full_name>
        <docblock line="171">
          <description>Checks if an adapter is set in a class, method combination.</description>
          <long-description></long-description>
          <tag name="param" line="171" description="&lt;p&gt;The associated class to check if it has an adapter&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="171" description="&lt;p&gt;The associated method to check if it has an adapter&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="171" description="$hasAdapter Returns true if it has an adapter or false if it does not" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="171" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="187" package="data">
        <name>removeAdapter</name>
        <full_name>\PVPatterns::removeAdapter()</full_name>
        <docblock line="187">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="187" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="187" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="199" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVPatterns::removeClassAdapter()</full_name>
        <docblock line="199">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="199" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="220" package="data">
        <name>addObserver</name>
        <full_name>\PVPatterns::addObserver()</full_name>
        <docblock line="220">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="220" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="220" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="220" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="242" package="data">
        <name>_notify</name>
        <full_name>\PVPatterns::_notify()</full_name>
        <docblock line="242">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="242" description="&lt;p&gt;The name of the event that will trigger notifiers&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="242" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="242" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="279" package="data">
        <name>clearObservers</name>
        <full_name>\PVPatterns::clearObservers()</full_name>
        <docblock line="279">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="279" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="279" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="279" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="301" package="data">
        <name>addFilter</name>
        <full_name>\PVPatterns::addFilter()</full_name>
        <docblock line="301">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interupt the normal flow within the method(IE: They should not be used as adapters).</description>
          <long-description></long-description>
          <tag name="param" line="301" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="301" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="301" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="333" package="data">
        <name>_applyFilter</name>
        <full_name>\PVPatterns::_applyFilter()</full_name>
        <docblock line="333">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="333" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="333" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="333" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="370" package="data">
        <name>_hasFilter</name>
        <full_name>\PVPatterns::_hasFilter()</full_name>
        <docblock line="370">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="370" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="370" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="385" package="data">
        <name>clearFilters</name>
        <full_name>\PVPatterns::clearFilters()</full_name>
        <docblock line="385">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="385" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="385" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="385" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="385" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="396" package="data">
        <name>getInstance</name>
        <full_name>\PVPatterns::getInstance()</full_name>
        <docblock line="396">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="396" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="396" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="418" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVPatterns::setAdapterTrace()</full_name>
        <docblock line="418">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="418" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="418" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="418" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="431" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVPatterns::setFilterTrace()</full_name>
        <docblock line="431">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="431" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="431" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="431" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="444" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVPatterns::setObserverTrace()</full_name>
        <docblock line="444">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="444" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="444" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="444" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="459" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVPatterns::_invokeMethod()</full_name>
        <docblock line="459">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="459" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="459" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="459" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="459" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="459" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="500" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVPatterns::_invokeStaticMethod()</full_name>
        <docblock line="500">
          <description>Calls a methods that is a method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="500" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="500" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="500" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="500" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="500" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="535" package="data">
        <name>_logAdapter</name>
        <full_name>\PVPatterns::_logAdapter()</full_name>
        <docblock line="535">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="535" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="535" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="535" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="548" package="data">
        <name>_logFilter</name>
        <full_name>\PVPatterns::_logFilter()</full_name>
        <docblock line="548">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="548" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="548" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="548" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="561" package="data">
        <name>_logObserver</name>
        <full_name>\PVPatterns::_logObserver()</full_name>
        <docblock line="561">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="561" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="561" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="561" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="574" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVPatterns::_prepareLogData()</full_name>
        <docblock line="574">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="574" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="574" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="574" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="96">Add ability to use singleton classes</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <notice line="135" code="PPC:ERR-50013">Parameter $args could not be found in _callAdapter()</notice>
      <notice line="242" code="PPC:ERR-50013">Parameter $args could not be found in _notify()</notice>
    </parse_markers>
  </file>
  <file path="data/PVObject.php" generated-path="data.PVObject.html" hash="3ea43fdda928b4fa71d270c319fbdd61" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="45" package="data">
      <extends>\PVPatterns</extends>
      <name>PVObject</name>
      <full_name>\PVObject</full_name>
      <docblock line="45">
        <description>PVObject is an extendable class used to enhance an object that can be instantiated.</description>
        <long-description>ProdigyView comes with the ability to implement adapters, intercepting filters and observers. Extending this class to a child class will give the child class the ability to use those design patterns along with a collection that can assign and retrieve values using magic functions.

Example:
```php
//Create the class
class Example extends PVObject {
  	public function testMe($string) {
			echo $string;

			//An observer
			$this-&gt;_notify(get_class() . '::' . __FUNCTION__, $string);
		}
	}

//Add to its collection
$example = new Example();
$example-&gt;foo='bar';
echo $example-&gt; foo;

//Add a dynamic method
$example -&gt; addMethod('fiz', function($text) {
		return 'fiz ' . $text;
});

echo $example -&gt; fizz('Bop');


//Add Observer
Example::addObserver('Example::testMe', 'test_closure', function($string) {
  	echo "\nLine 2 \n"
		echo $string;

}, array('type' =&gt; 'closure'));

//Will call the instance and the attached observer
$example-&gt;testMe('Testing String ');
```</long-description>
        <tag name="package" line="45" description="data"/>
        <tag name="inherited_from" description="\PVPatterns" refers="\PVPatterns" link="/classes/PVPatterns.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>Collection of items</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>Dynamically added methods</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been stored</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been stored</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Get stores instance f singletons</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Filters that have been stored</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>The boolean for following and printing out adapters as they are called</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and printing out filters as they are called</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>The Boolean for following and printing out observers as they are called</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="68" package="data">
        <name>__set</name>
        <full_name>\PVObject::__set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be any type&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="93" package="data">
        <name>__get</name>
        <full_name>\PVObject::__get()</full_name>
        <docblock line="93">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="93" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="93" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="93" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="123" package="data">
        <name>__call</name>
        <full_name>\PVObject::__call()</full_name>
        <docblock line="123">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="123" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="123" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="123" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="123" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="152" package="data">
        <name>addToCollection</name>
        <full_name>\PVObject::addToCollection()</full_name>
        <docblock line="152">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="152" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="152" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="152" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
          <tag name="access" line="199" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="66" package="data">
        <name>addAdapter</name>
        <full_name>\PVPatterns::addAdapter()</full_name>
        <docblock line="66">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="66" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="66" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="66" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="66" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="96" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVPatterns::addClassAdapter()</full_name>
        <docblock line="96">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="96" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="96" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="96" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="96" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="96" description="public"/>
          <tag name="todo" line="96" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="135" package="data">
        <name>_callAdapter</name>
        <full_name>\PVPatterns::_callAdapter()</full_name>
        <docblock line="135">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="135" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="&lt;p&gt;The name of the method that is being adapted.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="135" description="&lt;p&gt;An infinite amout of parameters to passed to this method.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="135" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="135" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="171" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVPatterns::_hasAdapter()</full_name>
        <docblock line="171">
          <description>Checks if an adapter is set in a class, method combination.</description>
          <long-description></long-description>
          <tag name="param" line="171" description="&lt;p&gt;The associated class to check if it has an adapter&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="171" description="&lt;p&gt;The associated method to check if it has an adapter&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="171" description="$hasAdapter Returns true if it has an adapter or false if it does not" type="boolean">
            <type>boolean</type>
          </tag>
          <tag name="access" line="171" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="187" package="data">
        <name>removeAdapter</name>
        <full_name>\PVPatterns::removeAdapter()</full_name>
        <docblock line="187">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="187" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="187" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="187" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="187" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="199" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVPatterns::removeClassAdapter()</full_name>
        <docblock line="199">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="199" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="199" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="199" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="220" package="data">
        <name>addObserver</name>
        <full_name>\PVPatterns::addObserver()</full_name>
        <docblock line="220">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="220" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="220" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="220" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="220" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="242" package="data">
        <name>_notify</name>
        <full_name>\PVPatterns::_notify()</full_name>
        <docblock line="242">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="242" description="&lt;p&gt;The name of the event that will trigger notifiers&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="242" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="242" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="242" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="279" package="data">
        <name>clearObservers</name>
        <full_name>\PVPatterns::clearObservers()</full_name>
        <docblock line="279">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="279" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="279" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="279" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="301" package="data">
        <name>addFilter</name>
        <full_name>\PVPatterns::addFilter()</full_name>
        <docblock line="301">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interupt the normal flow within the method(IE: They should not be used as adapters).</description>
          <long-description></long-description>
          <tag name="param" line="301" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="301" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="301" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="301" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="333" package="data">
        <name>_applyFilter</name>
        <full_name>\PVPatterns::_applyFilter()</full_name>
        <docblock line="333">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="333" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="333" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="333" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="333" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="370" package="data">
        <name>_hasFilter</name>
        <full_name>\PVPatterns::_hasFilter()</full_name>
        <docblock line="370">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="370" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="370" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="385" package="data">
        <name>clearFilters</name>
        <full_name>\PVPatterns::clearFilters()</full_name>
        <docblock line="385">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="385" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="385" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="385" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="385" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="396" package="data">
        <name>getInstance</name>
        <full_name>\PVPatterns::getInstance()</full_name>
        <docblock line="396">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="396" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="396" description="public"/>
        </docblock>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="418" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVPatterns::setAdapterTrace()</full_name>
        <docblock line="418">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="418" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="418" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="418" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="431" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVPatterns::setFilterTrace()</full_name>
        <docblock line="431">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="431" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="431" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="431" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="444" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVPatterns::setObserverTrace()</full_name>
        <docblock line="444">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="444" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="444" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="444" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="459" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVPatterns::_invokeMethod()</full_name>
        <docblock line="459">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="459" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="459" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="459" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="459" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="459" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="500" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVPatterns::_invokeStaticMethod()</full_name>
        <docblock line="500">
          <description>Calls a methods that is a method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="500" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="500" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="500" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="500" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="500" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="535" package="data">
        <name>_logAdapter</name>
        <full_name>\PVPatterns::_logAdapter()</full_name>
        <docblock line="535">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="535" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="535" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="535" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="548" package="data">
        <name>_logFilter</name>
        <full_name>\PVPatterns::_logFilter()</full_name>
        <docblock line="548">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="548" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="548" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="548" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="561" package="data">
        <name>_logObserver</name>
        <full_name>\PVPatterns::_logObserver()</full_name>
        <docblock line="561">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="561" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="561" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="561" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="" line="574" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVPatterns::_prepareLogData()</full_name>
        <docblock line="574">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="574" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="574" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="574" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="177">check the relevance of get and set</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="media/PVVideo.php" generated-path="media.PVVideo.html" hash="d77812164c6e128df8ee7b7098c69cf9" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="26" package="media">
      <extends>\PVStaticObject</extends>
      <name>PVVideo</name>
      <full_name>\PVVideo</full_name>
      <docblock line="26">
        <description>PVVideo is a class designed to manipulate video files and transcoding to various formats.</description>
        <long-description>PVVideo works with all kinds of audio files: mp4, mov, ogg, etc. It utilizes command tools like FFMPEG to do the transcoding and will return the results from the command line.

Example:
```php
//Set the file to be converted
$old_file = '/path/to/file/video.mov';

//Set the path of the new file
$new_file =  '/path/to/file/video.mp4';

//Options to pass to the FFmpeg or other conversion tools
//The following will place a -f infront of the input
$options = array('input_f' =&gt; '');

//Run the conversion
PVVideo::init();
PVVideo::convertAudioFile($old_file, $new_file , $options );
```</long-description>
        <tag name="package" line="26" description="media"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="31" package="media">
        <name>$converter</name>
        <full_name>\PVVideo::$converter</full_name>
        <default>'ffmpeg'</default>
        <docblock line="31">
          <description>The type of convet to use, default is ffmpeg</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="43" package="media">
        <name>init</name>
        <full_name>\PVVideo::init()</full_name>
        <docblock line="43">
          <description>Initialize the static class. Currently can be used for modifying the default converter
tool and its location, which is simply ffmpeg.</description>
          <long-description></long-description>
          <tag name="param" line="43" description="&lt;p&gt;An array of configurations&#10;-'converter' &lt;em&gt;string&lt;/em&gt;: The converter tool and its location. Default is ffmpeg&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="43" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="43" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="75" package="media">
        <name>convertVideoFile</name>
        <full_name>\PVVideo::convertVideoFile()</full_name>
        <docblock line="75">
          <description>Convert the video file using a converter to another format or a different settings of the same format.</description>
          <long-description></long-description>
          <tag name="param" line="75" description="&lt;p&gt;The location of the file that is going to be converted&lt;/p&gt;" type="string" variable="$current_file_location">
            <type>string</type>
          </tag>
          <tag name="param" line="75" description="&lt;p&gt;The location of the new file&lt;/p&gt;" type="string" variable="$new_file_location">
            <type>string</type>
          </tag>
          <tag name="param" line="75" description="&lt;p&gt;Options that can control how the conversion takes place.&#10;'conveter' &lt;em&gt;string&lt;/em&gt;: The convert to be used and the location. Default is ffmpeg. To further define&#10;either added the path to the converter + ffmpeg or path to another converter besides ffmpeg.&#10;'input&lt;em&gt;' array: Should be an array that of options for how to treat the input file. The options&#10;should be the same options passed through the setEncodingOptions except the prefix should have 'input&lt;/em&gt;'.&#10;For example if the option is 'ar' as in setEncodingOptions, add 'input&lt;em&gt;ar' as the option key.&#10;'output&lt;/em&gt;' array: Should be an array that of options for how to treat the output file. The options&#10;should be the same options passed through the setEncodingOptions except the prefix should have 'output_'.&#10;For example if the option is 'ar' as in setEncodingOptions, add 'input_ar' as the option key.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="75" description="The output is not returned but a new file will be created if the conversion succeeded" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="75" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$current_file_location</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$new_file_location</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="121" package="media">
        <name>setEncodingOptions</name>
        <full_name>\PVVideo::setEncodingOptions()</full_name>
        <docblock line="121">
          <description>The encoding options on how to encode a file using FFMPPEG. The options should be run in a command line
formated. The current formmating will only handle options passed through that deal with video manipulation</description>
          <long-description></long-description>
          <tag name="see" line="121" description="" link="http://www.ffmpeg.org/ffmpeg.html"/>
          <tag name="see" line="121" description="" link="http://www.ffmpeg.org/ffmpeg.html#Video-Options"/>
          <tag name="see" line="121" description="" link="http://www.ffmpeg.org/ffmpeg.html#Advanced-Video-Options"/>
          <tag name="param" line="121" description="&lt;p&gt;Defined options to be used in the conversion. Options relate to those passed in a normal&#10;&#9;&#9;  FFMPEG command line fashion.The key of the array corresponds the command and the value responds to the command&#10;&#9;&#9;  value.&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="param" line="121" description="&lt;p&gt;If the options have a prefix in front of the key, the prefix should be defined either.&lt;/p&gt;" type="string" variable="$input_type">
            <type>string</type>
          </tag>
          <tag name="return" line="121" description="$options A string of options that should be used on the command line with ffmpeg" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="121" description="public"/>
          <tag name="todo" line="121" description="find ffmpeg documentation and use isset to remove notices"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$input_type</name>
          <default>''</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="121">find ffmpeg documentation and use isset to remove notices</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="system/PVSecurity.php" generated-path="system.PVSecurity.html" hash="bf6b13d6972d2bcb69fc97df8909e9be" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <constant namespace="" line="4" package="Default">
      <name>MCRYPT_DES</name>
      <full_name>\MCRYPT_DES</full_name>
      <value>null</value>
      <docblock line="4">
        <description></description>
        <long-description></long-description>
        <tag name="package" line="4" description="Default"/>
      </docblock>
    </constant>
    <class final="false" abstract="false" namespace="" line="12" package="system">
      <extends>\PVStaticObject</extends>
      <name>PVSecurity</name>
      <full_name>\PVSecurity</full_name>
      <docblock line="12">
        <description>PVSecurity is a class designed to handle the security of your application ranging from encryption to hashing.</description>
        <long-description>ProdigyView comes with the ability to implement adapters, intercepting filters and observers. Extending this class to a child class will give the child class the ability to use those design patterns along with a collection that can assign and retrieve values using magic functions.
```php
Example:

//Create the class
class Example extends PVObject {
  	public static function testMe($string) {
			echo $string;

			//An observer
			$this-&gt;_notify(get_class() . '::' . __FUNCTION__, $string);
		}
	}

//Add to its collection
Example::set('foo','bar');
echo Example::get('foo');

//Add a dynamic method
Example::addMethod('fiz', function($text) {
		return 'fiz ' . $text;
});

echo Example::fizz('Bop');


//Add Observer
Example::addObserver('Example::testMe', 'test_closure', function($string) {
  	echo "\nLine 2 \n"
		echo $string;

}, array('type' =&gt; 'closure'));

//Will call test me and the observer attached
Example::testMe('Testing String ');
```</long-description>
        <tag name="TODO" line="12" description="rework classs"/>
        <tag name="package" line="12" description="system"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="private" namespace="" line="14" package="system">
        <name>$cipher</name>
        <full_name>\PVSecurity::$cipher</full_name>
        <default></default>
        <docblock line="14">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="15" package="system">
        <name>$mcrypt_algorithm</name>
        <full_name>\PVSecurity::$mcrypt_algorithm</full_name>
        <default></default>
        <docblock line="15">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="16" package="system">
        <name>$mcrypt_algorithm_directory</name>
        <full_name>\PVSecurity::$mcrypt_algorithm_directory</full_name>
        <default></default>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="17" package="system">
        <name>$mcrypt_mode</name>
        <full_name>\PVSecurity::$mcrypt_mode</full_name>
        <default></default>
        <docblock line="17">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="18" package="system">
        <name>$mcrypt_mode_directory</name>
        <full_name>\PVSecurity::$mcrypt_mode_directory</full_name>
        <default></default>
        <docblock line="18">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="19" package="system">
        <name>$mcrypt_key</name>
        <full_name>\PVSecurity::$mcrypt_key</full_name>
        <default></default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="20" package="system">
        <name>$mcrypt_iv</name>
        <full_name>\PVSecurity::$mcrypt_iv</full_name>
        <default></default>
        <docblock line="20">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="22" package="system">
        <name>$_salt</name>
        <full_name>\PVSecurity::$_salt</full_name>
        <default>null</default>
        <docblock line="22">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="23" package="system">
        <name>$_auth_table</name>
        <full_name>\PVSecurity::$_auth_table</full_name>
        <default>'users'</default>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="24" package="system">
        <name>$_auth_hashed_fields</name>
        <full_name>\PVSecurity::$_auth_hashed_fields</full_name>
        <default>array()</default>
        <docblock line="24">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="system">
        <name>$_auth_encrypted_fields</name>
        <full_name>\PVSecurity::$_auth_encrypted_fields</full_name>
        <default>array()</default>
        <docblock line="25">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="26" package="system">
        <name>$_save_cookie</name>
        <full_name>\PVSecurity::$_save_cookie</full_name>
        <default>true</default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="27" package="system">
        <name>$_save_session</name>
        <full_name>\PVSecurity::$_save_session</full_name>
        <default>true</default>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="28" package="system">
        <name>$_cookie_fields</name>
        <full_name>\PVSecurity::$_cookie_fields</full_name>
        <default>array()</default>
        <docblock line="28">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="29" package="system">
        <name>$_session_fields</name>
        <full_name>\PVSecurity::$_session_fields</full_name>
        <default>array()</default>
        <docblock line="29">
          <description></description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="53" package="system">
        <name>init</name>
        <full_name>\PVSecurity::init()</full_name>
        <docblock line="53">
          <description>Initializes the security class for using encryption and for authentication. Requires that
the package mcrypt be installed.</description>
          <long-description></long-description>
          <tag name="param" line="53" description="&lt;p&gt;An array of arguments to be passed into the security class.&#10;-'mcrypt_algorithm' &lt;em&gt;string&lt;/em&gt; : The algorthim to be used for encruption. MCRYPT_DES is default&#10;-'mcrypt_algorithm_directory' &lt;em&gt;string&lt;/em&gt;: The directory the algorithm&#10;-'mcrypt_mode' &lt;em&gt;string&lt;/em&gt; : The mode to set for mcrypt. Defaults of 'ofb'&#10;-'mcrypt_key' &lt;em&gt;string&lt;/em&gt;: The default key that will be used for encryption&#10;-'mcrypt_iv' &lt;em&gt;string&lt;/em&gt;: The iv the will be used for encryption&#10;-'salt' &lt;em&gt;string&lt;/em&gt;: The default value that will be applied as a salt when hashing&#10;-'auth_table' &lt;em&gt;string&lt;/em&gt;: The table name that will perform authorization of a user. Default name is users&#10;-'auth_hashed_fields' &lt;em&gt;array&lt;/em&gt;: An array of fields that will be hashed on authentication&#10;-'auth_encrypted_fields' &lt;em&gt;array&lt;/em&gt;: An array of fields that will be encryped on authentication&#10;-'save_cookie' &lt;em&gt;boolean&lt;/em&gt;: Enable the saving of variables to a cookie on save&#10;-'save_session' &lt;em&gt;boolean&lt;/em&gt;: Enable the saving the variables to a session on authentication&#10;-'cookie_fields' &lt;em&gt;array&lt;/em&gt;: An array of fields pulled from the auth table that will be saved to the cookie on authentication&#10;-'session_fields' &lt;em&gt;array&lt;/em&gt;: An array of fields pulled from the auth table that will be saved to the session on authentication&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="53" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="53" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="104" package="system">
        <name>encrypt</name>
        <full_name>\PVSecurity::encrypt()</full_name>
        <docblock line="104">
          <description>Encrypts a string of data and returns the encrypted string.</description>
          <long-description></long-description>
          <tag name="param" line="104" description="&lt;p&gt;The string to be encrypted&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="param" line="104" description="&lt;p&gt;An array of options to configure the encryption&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="104" description="$encrypted_string Returns an encryped string of data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="104" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="140" package="system">
        <name>decrypt</name>
        <full_name>\PVSecurity::decrypt()</full_name>
        <docblock line="140">
          <description>Decrypts a string of data.</description>
          <long-description></long-description>
          <tag name="param" line="140" description="&lt;p&gt;The string to be decrypted&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="140" description="&lt;p&gt;An array of options that defines how to perform the encryption&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="140" description="$decrypted_string The string decrypted" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="140" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="167" package="system">
        <name>_checkIv</name>
        <full_name>\PVSecurity::_checkIv()</full_name>
        <docblock line="167">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$iv</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="184" package="system">
        <name>_checkKey</name>
        <full_name>\PVSecurity::_checkKey()</full_name>
        <docblock line="184">
          <description></description>
          <long-description></long-description>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="208" package="system">
        <name>_getEncryptDefaults</name>
        <full_name>\PVSecurity::_getEncryptDefaults()</full_name>
        <docblock line="208">
          <description>Returns the default arguements for encryptions. The arguements returned are initial
set in the init.</description>
          <long-description></long-description>
          <tag name="return" line="208" description="$configuration Returns the configuration in an array" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="208" description="protected"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="246" package="system">
        <name>checkAuth</name>
        <full_name>\PVSecurity::checkAuth()</full_name>
        <docblock line="246">
          <description>Checks to the if the credentials passed match the credentials
stored in the database.</description>
          <long-description></long-description>
          <tag name="param" line="246" description="&lt;p&gt;An array of fields that will be checked against the fields in the database table&lt;/p&gt;" type="array" variable="$fields">
            <type>array</type>
          </tag>
          <tag name="param" line="246" description="&lt;p&gt;An array of options&#10;-'auth_table' &lt;em&gt;string&lt;/em&gt;: The table name to be checked against&#10;-'auth_hashed_fields' array: An array of fields that must be hashed before checking&#10;-'auth_encrypted_fields' array: An array of fields that must be encrypted before checking&#10;-'format_table' &lt;em&gt;boolean&lt;/em&gt;: Will formated the table with any prefixes or schemas. Default is false.&#10;-'save_cookie' &lt;em&gt;boolean&lt;/em&gt;: If authenticated save data into cookie. Default is true.&#10;-'save_session' &lt;em&gt;boolean&lt;/em&gt;: If authenticated, save data into session. Default is true&#10;-'cookie_fields' &lt;em&gt;array&lt;/em&gt;: The fields that will be saved into the cookie&#10;-'session_fields' &lt;em&gt;array&lt;/em&gt;: The fields that will be saved into the session&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="246" description="If authenticated, the return will be the row in the database. Otherwise false." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="246" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$fields</name>
          <default></default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="316" package="system">
        <name>hash</name>
        <full_name>\PVSecurity::hash()</full_name>
        <docblock line="316">
          <description>Performas a one way hash on a string with an optional salt
value.</description>
          <long-description></long-description>
          <tag name="param" line="316" description="&lt;p&gt;The string to be hashed&lt;/p&gt;" type="string" variable="$string">
            <type>string</type>
          </tag>
          <tag name="param" line="316" description="&lt;p&gt;A salt to add to the hash&lt;/p&gt;" type="string" variable="$salt">
            <type>string</type>
          </tag>
          <tag name="return" line="316" description="$hashed_string Returns the hashed string" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="316" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$string</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$salt</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <error line="140" code="PPC:ERR-50014">Name of argument $string does not match with the DocBlock's name $data in decrypt()</error>
      <notice line="140" code="PPC:ERR-50013">Parameter $data could not be found in decrypt()</notice>
      <error line="167" code="PPC:ERR-50015">Argument $iv is missing from the Docblock of _checkIv</error>
      <error line="167" code="PPC:ERR-50008">No summary for method _checkIv()</error>
      <error line="184" code="PPC:ERR-50015">Argument $key is missing from the Docblock of _checkKey</error>
      <error line="184" code="PPC:ERR-50008">No summary for method _checkKey()</error>
      <error line="14" code="PPC:ERR-50007">No summary for property $cipher</error>
      <error line="15" code="PPC:ERR-50007">No summary for property $mcrypt_algorithm</error>
      <error line="16" code="PPC:ERR-50007">No summary for property $mcrypt_algorithm_directory</error>
      <error line="17" code="PPC:ERR-50007">No summary for property $mcrypt_mode</error>
      <error line="18" code="PPC:ERR-50007">No summary for property $mcrypt_mode_directory</error>
      <error line="19" code="PPC:ERR-50007">No summary for property $mcrypt_key</error>
      <error line="20" code="PPC:ERR-50007">No summary for property $mcrypt_iv</error>
      <error line="22" code="PPC:ERR-50007">No summary for property $_salt</error>
      <error line="23" code="PPC:ERR-50007">No summary for property $_auth_table</error>
      <error line="24" code="PPC:ERR-50007">No summary for property $_auth_hashed_fields</error>
      <error line="25" code="PPC:ERR-50007">No summary for property $_auth_encrypted_fields</error>
      <error line="26" code="PPC:ERR-50007">No summary for property $_save_cookie</error>
      <error line="27" code="PPC:ERR-50007">No summary for property $_save_session</error>
      <error line="28" code="PPC:ERR-50007">No summary for property $_cookie_fields</error>
      <error line="29" code="PPC:ERR-50007">No summary for property $_session_fields</error>
    </parse_markers>
  </file>
  <file path="util/PVMail.php" generated-path="util.PVMail.html" hash="9e6530decb21f4fad6e1b67e78b639da" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="31" package="util">
      <extends>\PVStaticObject</extends>
      <name>PVMail</name>
      <full_name>\PVMail</full_name>
      <docblock line="31">
        <description>PVMail is responsible for sending email from the application.</description>
        <long-description>PVMail is a basic class for sending emails. The class either uses the default mail() function on the
server, or can be configured to send emails via SMTP.

Example:
```php
//Initialize The Class
PVMail::init(array(
            'smtp_host' =&gt; 'external.example.com',
            'smtp_username' =&gt; 'MyLogin',
            'smtp_password' =&gt; 'abc123',
            'smtp_port' =&gt; 582,
            'mailer' =&gt; 'smtp',
            'default_sender' =&gt; 'mydomain@example.com'
      ));

//Send An Email
PVMail::sendEmail(array(
	'receiver' =&gt; 'jane@example.com',
	'sender'=&gt;'jon@example.com',
	'subject'=&gt;'Hello World'
	'message'=&gt;'Dropping a line, saying hello'
));
```</long-description>
        <tag name="package" line="31" description="util"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="36" package="util">
        <name>$_smtp_host</name>
        <full_name>\PVMail::$_smtp_host</full_name>
        <default></default>
        <docblock line="36">
          <description>The SMTP Host</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="41" package="util">
        <name>$_smtp_username</name>
        <full_name>\PVMail::$_smtp_username</full_name>
        <default></default>
        <docblock line="41">
          <description>The login user for SMTP</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="46" package="util">
        <name>$_smtp_password</name>
        <full_name>\PVMail::$_smtp_password</full_name>
        <default></default>
        <docblock line="46">
          <description>The login password for SMTP</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="51" package="util">
        <name>$_smtp_port</name>
        <full_name>\PVMail::$_smtp_port</full_name>
        <default></default>
        <docblock line="51">
          <description>The port for SMTP. Normally is 587</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="56" package="util">
        <name>$_mailer</name>
        <full_name>\PVMail::$_mailer</full_name>
        <default>'php'</default>
        <docblock line="56">
          <description>Which mailer to use, default is php, other option is smtp</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="61" package="util">
        <name>$_default_sender</name>
        <full_name>\PVMail::$_default_sender</full_name>
        <default>''</default>
        <docblock line="61">
          <description>The default from email to when sending emails</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="78" package="util">
        <name>init</name>
        <full_name>\PVMail::init()</full_name>
        <docblock line="78">
          <description>Configure the mail class with default options to be used.</description>
          <long-description></long-description>
          <tag name="param" line="78" description="&lt;p&gt;The options that will configure the class&#10;-'smtp_host' &lt;em&gt;string&lt;/em&gt;: The stmp host for sending email over smtp&#10;-'smtp_username' &lt;em&gt;string&lt;/em&gt;: The username for sending email using smtp&#10;-'smtp_password' &lt;em&gt;string&lt;/em&gt;: The password for the user sending email over smtp&#10;-'smtp_port' &lt;em&gt;int&lt;/em&gt;: The port for sending email over smtp&#10;-'mailer' &lt;em&gt;string&lt;/em&gt;: The email client used for sending email. Default is 'php' but if the email&#10;client is smtp, the value should be 'smtp'&#10;-'default_sender '&lt;em&gt;string&lt;/em&gt;: The email address that will be used to send an email if none is defined.&lt;/p&gt;" type="array" variable="$config">
            <type>array</type>
          </tag>
          <tag name="return" line="78" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="78" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$config</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="126" package="util">
        <name>sendEmail</name>
        <full_name>\PVMail::sendEmail()</full_name>
        <docblock line="126">
          <description>Sends an email to a location. The is function uses the optionsset in the configuration file for determing how the
email will be sent.</description>
          <long-description></long-description>
          <tag name="param" line="126" description="&lt;p&gt;Arguements that define how the email be will be sent&#10;-'receiver' &lt;em&gt;string&lt;/em&gt;: The email address of the user that will recieve the email&#10;-'sender' &lt;em&gt;string&lt;/em&gt;: The email address of the user that sent the email&#10;-'subject' &lt;em&gt;string&lt;/em&gt;: The subject of the email that is being sent&#10;-'message' &lt;em&gt;string&lt;/em&gt;: The message in the email&#10;-'carboncopy' &lt;em&gt;string&lt;/em&gt;: Email addresses to send a carbon copy too. Optional.&#10;-'blindcopy' &lt;em&gt;string&lt;/em&gt;: Email address to send a blind copy too. Optional.&#10;-'attachment' &lt;em&gt;string&lt;/em&gt;: The location of a file to be attached to the email. Optional.&#10;-'reply_to' &lt;em&gt;string&lt;/em&gt;: The email to send a reply too. Optional&#10;-'message_id' &lt;em&gt;string&lt;/em&gt;: The header for the message id. Optional.&#10;-'errors_to' &lt;em&gt;string&lt;/em&gt;: The email addrss to send errors to. Optional.&#10;-'return_path': &lt;em&gt;string&lt;/em&gt;: Set the return path. Optional.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="126" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="126" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="164" package="util">
        <name>sendEmailPHP</name>
        <full_name>\PVMail::sendEmailPHP()</full_name>
        <docblock line="164">
          <description>Sends an email to a location. The is function uses the optionsset in the configuration file for determing how the
email will be sent.</description>
          <long-description></long-description>
          <tag name="param" line="164" description="&lt;p&gt;Arguements that define how the email be will be sent&#10;-'receiver' &lt;em&gt;string&lt;/em&gt;: The email address of the user that will recieve the email&#10;-'sender' &lt;em&gt;string&lt;/em&gt;: The email address of the user that sent the email&#10;-'subject' &lt;em&gt;string&lt;/em&gt;: The subject of the email that is being sent&#10;-'message' &lt;em&gt;string&lt;/em&gt;: The message in the email&#10;-'carboncopy' &lt;em&gt;string&lt;/em&gt;: Email addresses to send a carbon copy too. Optional.&#10;-'blindcopy' &lt;em&gt;string&lt;/em&gt;: Email address to send a blind copy too. Optional.&#10;-'attachment' &lt;em&gt;string&lt;/em&gt;: The location of a file to be attached to the email. Optional.&#10;-'reply_to' &lt;em&gt;string&lt;/em&gt;: The email to send a reply too. Optional&#10;-'message_id' &lt;em&gt;string&lt;/em&gt;: The header for the message id. Optional.&#10;-'errors_to' &lt;em&gt;string&lt;/em&gt;: The email addrss to send errors to. Optional.&#10;-'return_path': &lt;em&gt;string&lt;/em&gt;: Set the return path. Optional.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="164" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="164" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="296" package="util">
        <name>sendEMailSMTP</name>
        <full_name>\PVMail::sendEMailSMTP()</full_name>
        <docblock line="296">
          <description>Sends an email to a location. The is function uses the optionsset in the configuration file for determing how the
email will be sent.</description>
          <long-description></long-description>
          <tag name="param" line="296" description="&lt;p&gt;Arguements that define how the email be will be sent&#10;-'receiver' &lt;em&gt;string&lt;/em&gt;: The email address of the user that will recieve the email&#10;-'sender' &lt;em&gt;string&lt;/em&gt;: The email address of the user that sent the email&#10;-'subject' &lt;em&gt;string&lt;/em&gt;: The subject of the email that is being sent&#10;-'message' &lt;em&gt;string&lt;/em&gt;: The message in the email&#10;-'carboncopy' &lt;em&gt;string&lt;/em&gt;: Email addresses to send a carbon copy too. Optional.&#10;-'blindcopy' &lt;em&gt;string&lt;/em&gt;: Email address to send a blind copy too. Optional.&#10;-'attachment' &lt;em&gt;string&lt;/em&gt;: The location of a file to be attached to the email. Optional.&#10;-'reply_to' &lt;em&gt;string&lt;/em&gt;: The email to send a reply too. Optional&#10;-'message_id' &lt;em&gt;string&lt;/em&gt;: The header for the message id. Optional.&#10;-'errors_to' &lt;em&gt;string&lt;/em&gt;: The email addrss to send errors to. Optional.&#10;-'return_path': &lt;em&gt;string&lt;/em&gt;: Set the return path. Optional.&#10;-'smtp_username' &lt;em&gt;string&lt;/em&gt;: The user name for the host&#10;-'smtp_password' &lt;em&gt;string&lt;/em&gt;: The password for the smtp user&#10;-'smtp_host' &lt;em&gt;string&lt;/em&gt;: The hast the SMTP resides at&#10;-'smtp_port' &lt;em&gt;string&lt;/em&gt;: The port used to access the SMTP.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="296" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="296" description="public"/>
          <tag name="todo" line="296" description="allow for multiple attachments"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="411" package="util">
        <name>getEmailDefaults</name>
        <full_name>\PVMail::getEmailDefaults()</full_name>
        <docblock line="411">
          <description>Retrieves the default values that should go out with each email</description>
          <long-description></long-description>
          <tag name="return" line="411" description="" type="array">
            <type>array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="296">allow for multiple attachments</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="_BootCompleteSystem.php" generated-path="_BootCompleteSystem.html" hash="399f3009d1445b31c4bafa03bbc38e8c" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="network/PVCommunicator.php" generated-path="network.PVCommunicator.html" hash="ebc8e2a69fad84133e1f9c49c91dd5e0" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="26" package="network">
      <extends>\PVStaticInstance</extends>
      <name>PVCommunicator</name>
      <full_name>\PVCommunicator</full_name>
      <docblock line="26">
        <description>PVCommunicator opens up communication with other services via Curl, SOAP, or Sockets.</description>
        <long-description>With the rise of RESTFUL API and Microservices, this class was designed to allow easy communication with those services without having to rewrite the underlying commands.

Example:
```php
//CURL GET
$url = 'http://api.wunderground.com/api/Your_Key/conditions/q/CA/San_Francisco.json';

$communicator = new PVCommunicator();
$communicator-&gt;send('get',  $url);
print_r($communicator -&gt;getResponseBody());

//CURL POST
$url = 'http://api.example.com/createuser';
$data = array('name' =&gt;'John Doe', 'email' =&gt; 'johndoe@example.com')
$communicator = new PVCommunicator();
$communicator-&gt;send('POST',  $url, );
print_r($communicator -&gt;getResponseBody());
```</long-description>
        <tag name="package" line="26" description="network"/>
        <tag name="inherited_from" description="\PVStaticInstance" refers="\PVStaticInstance" link="/classes/PVStaticInstance.html"/>
      </docblock>
      <property static="false" visibility="protected" namespace="" line="31" package="network">
        <name>$_handler</name>
        <full_name>\PVCommunicator::$_handler</full_name>
        <default>null</default>
        <docblock line="31">
          <description>The handler for executing the communication and changes depending on type.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="36" package="network">
        <name>$_headers</name>
        <full_name>\PVCommunicator::$_headers</full_name>
        <default>array()</default>
        <docblock line="36">
          <description>Headers to pass to the destination</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="41" package="network">
        <name>$_files</name>
        <full_name>\PVCommunicator::$_files</full_name>
        <default>array()</default>
        <docblock line="41">
          <description>Files to send to the destination</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="46" package="network">
        <name>$_response_info</name>
        <full_name>\PVCommunicator::$_response_info</full_name>
        <default>''</default>
        <docblock line="46">
          <description>Detailed information about the destinations response</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="51" package="network">
        <name>$_response</name>
        <full_name>\PVCommunicator::$_response</full_name>
        <default>''</default>
        <docblock line="51">
          <description>The response body in fill</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="56" package="network">
        <name>$_protocol</name>
        <full_name>\PVCommunicator::$_protocol</full_name>
        <default>'curl'</default>
        <docblock line="56">
          <description>The protocol to use, default is curl but can use SOAP or sockets</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="61" package="network">
        <name>$_data</name>
        <full_name>\PVCommunicator::$_data</full_name>
        <default>null</default>
        <docblock line="61">
          <description>The data to send to send</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="66" package="network">
        <name>$_error</name>
        <full_name>\PVCommunicator::$_error</full_name>
        <default>null</default>
        <docblock line="66">
          <description>An error response if communication fales</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="71" package="network">
        <name>$connectionActive</name>
        <full_name>\PVCommunicator::$connectionActive</full_name>
        <default>false</default>
        <docblock line="71">
          <description>The check to see if the connection has already been opened to prevent multiple connections from opening</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="public" namespace="" line="76" package="network">
        <name>$hasError</name>
        <full_name>\PVCommunicator::$hasError</full_name>
        <default>false</default>
        <docblock line="76">
          <description>If the boolean set if the response has an error</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="34" package="Default">
        <name>$_collection</name>
        <full_name>\PVStaticInstance::$_collection</full_name>
        <default>null</default>
        <docblock line="34">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="false" visibility="protected" namespace="" line="39" package="Default">
        <name>$_methods</name>
        <full_name>\PVStaticInstance::$_methods</full_name>
        <default>array()</default>
        <docblock line="39">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="88" package="network">
        <name>__constrcut</name>
        <full_name>\PVCommunicator::__constrcut()</full_name>
        <docblock line="88">
          <description>Sets the protocol, right now either being defaulting
to curl, but SOAP and SOCKET can be set</description>
          <long-description></long-description>
          <tag name="param" line="88" description="&lt;p&gt;The protocol, default is curl&lt;/p&gt;" type="string" variable="$protocol">
            <type>string</type>
          </tag>
          <tag name="return" line="88" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$protocol</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="113" package="network">
        <name>send</name>
        <full_name>\PVCommunicator::send()</full_name>
        <docblock line="113">
          <description>Sends data over to an api endpoint</description>
          <long-description></long-description>
          <tag name="param" line="113" description="&lt;p&gt;For curl, should either be POST, PUT, GET or DELETE. For soap, this should be the name of the method being called.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="113" description="&lt;p&gt;The endpoint of the api for REST or the wsdl for SOAP&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="param" line="113" description="&lt;p&gt;The data to be passed to the end endpoint&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="param" line="113" description="&lt;p&gt;Speciaized options to configure the sending client&lt;/p&gt;&#10;&lt;ul&gt;&#10;&lt;li&gt;timeout: The timeout in seconds&lt;/li&gt;&#10;&lt;li&gt;secure: Will require ssl for secure connection&lt;/li&gt;&#10;&lt;li&gt;enable_proxy : Will utilize a proxy for connecting to the endpoint&lt;/li&gt;&#10;&lt;li&gt;verbose: Display detailed bug log&lt;/li&gt;&#10;&lt;/ul&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="113" description="" type="\$response">
            <type>\$response</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="174" package="network">
        <name>addHeader</name>
        <full_name>\PVCommunicator::addHeader()</full_name>
        <docblock line="174">
          <description>Adds a customer header to the request being sent. For example sending in TOKEN and 1234
will produce the customer header- 'TOKEN : 1234'</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;The identifer for header, ie TOKEN&lt;/p&gt;" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The value corresponding with the identfier, ie 1234&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="189" package="network">
        <name>addFile</name>
        <full_name>\PVCommunicator::addFile()</full_name>
        <docblock line="189">
          <description>The location of the file LOCALLY to be send</description>
          <long-description></long-description>
          <tag name="param" line="189" description="&lt;p&gt;The location of the file&lt;/p&gt;" type="string" variable="$file_location">
            <type>string</type>
          </tag>
          <tag name="return" line="189" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$file_location</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="205" package="network">
        <name>openConnection</name>
        <full_name>\PVCommunicator::openConnection()</full_name>
        <docblock line="205">
          <description>Opens the connection for sending</description>
          <long-description></long-description>
          <tag name="param" line="205" description="&lt;p&gt;The endpoint or url of the $wsdl&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="param" line="205" description="&lt;p&gt;Optional parameters for the soap client&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="205" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="231" package="network">
        <name>_post</name>
        <full_name>\PVCommunicator::_post()</full_name>
        <docblock line="231">
          <description>Sends a POST to an endpoint using curl</description>
          <long-description></long-description>
          <tag name="param" line="231" description="&lt;p&gt;Data to be sent&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="243" package="network">
        <name>_put</name>
        <full_name>\PVCommunicator::_put()</full_name>
        <docblock line="243">
          <description>Sends a PUT to an endpoint using curl</description>
          <long-description></long-description>
          <tag name="param" line="243" description="&lt;p&gt;Data to be sent&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="258" package="network">
        <name>_get</name>
        <full_name>\PVCommunicator::_get()</full_name>
        <docblock line="258">
          <description>Sends a GET to an endpoint using curl</description>
          <long-description></long-description>
          <tag name="param" line="258" description="&lt;p&gt;The url to curl&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="param" line="258" description="&lt;p&gt;Data to be sent&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="269" package="network">
        <name>_delete</name>
        <full_name>\PVCommunicator::_delete()</full_name>
        <docblock line="269">
          <description>Sends a DELETE to an endpoint using curl</description>
          <long-description></long-description>
          <tag name="param" line="269" description="&lt;p&gt;Data to be sent&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="284" package="network">
        <name>_prepareData</name>
        <full_name>\PVCommunicator::_prepareData()</full_name>
        <docblock line="284">
          <description>Prepares the data to be sent to the client, including file ata</description>
          <long-description></long-description>
          <tag name="param" line="284" description="&lt;p&gt;The data to send&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="284" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="319" package="network">
        <name>setAuthentication</name>
        <full_name>\PVCommunicator::setAuthentication()</full_name>
        <docblock line="319">
          <description>Adds any special authentication required.</description>
          <long-description></long-description>
          <tag name="param" line="319" description="" type="string" variable="$username">
            <type>string</type>
          </tag>
          <tag name="param" line="319" description="" type="string" variable="$password">
            <type>string</type>
          </tag>
          <tag name="return" line="319" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$username</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$password</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="335" package="network">
        <name>secureSendingOnly</name>
        <full_name>\PVCommunicator::secureSendingOnly()</full_name>
        <docblock line="335">
          <description>Will require all communication to be secure over ssl</description>
          <long-description></long-description>
          <tag name="param" line="335" description="&lt;p&gt;Setting to true forces security protocals to be enabled&lt;/p&gt;" type="boolean" variable="$secure">
            <type>boolean</type>
          </tag>
          <tag name="return" line="335" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$secure</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="347" package="network">
        <name>setTimeout</name>
        <full_name>\PVCommunicator::setTimeout()</full_name>
        <docblock line="347">
          <description>Set any timeouts for long request or responses</description>
          <long-description></long-description>
          <tag name="param" line="347" description="&lt;p&gt;The timeout in milliseconds&lt;/p&gt;" type="" variable="$timeout"/>
          <tag name="return" line="347" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$timeout</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="361" package="network">
        <name>enableProxy</name>
        <full_name>\PVCommunicator::enableProxy()</full_name>
        <docblock line="361">
          <description>Enable/Disable the usage of a proxy in the curl call</description>
          <long-description></long-description>
          <tag name="param" line="361" description="" type="boolean" variable="$proxy">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$proxy</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="371" package="network">
        <name>debug</name>
        <full_name>\PVCommunicator::debug()</full_name>
        <docblock line="371">
          <description>Enable verbose dislpay for debugging</description>
          <long-description></long-description>
          <tag name="param" line="371" description="&lt;p&gt;Enable Debugging features&lt;/p&gt;" type="boolean" variable="$debug">
            <type>boolean</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$debug</name>
          <default></default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="380" package="network">
        <name>_sendCurl</name>
        <full_name>\PVCommunicator::_sendCurl()</full_name>
        <docblock line="380">
          <description>Takes the compiled data and sends a curl request</description>
          <long-description></long-description>
          <tag name="return" line="380" description="$response" type="mixed">
            <type>mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="419" package="network">
        <name>_sendSoap</name>
        <full_name>\PVCommunicator::_sendSoap()</full_name>
        <docblock line="419">
          <description>Sends the request via SOAP protocoal</description>
          <long-description></long-description>
          <tag name="param" line="419" description="&lt;p&gt;The function to call via soap&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="419" description="&lt;p&gt;The data being passed to that function&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="419" description="" type="\$string">
            <type>\$string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="" line="434" package="network">
        <name>_sendSocket</name>
        <full_name>\PVCommunicator::_sendSocket()</full_name>
        <docblock line="434">
          <description>Sends the communication over a socket</description>
          <long-description></long-description>
          <tag name="param" line="434" description="&lt;p&gt;The method to send&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="todo" line="434" description="work on a test socket communication"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="451" package="network">
        <name>getResponse</name>
        <full_name>\PVCommunicator::getResponse()</full_name>
        <docblock line="451">
          <description>Retrieves the full response</description>
          <long-description></long-description>
          <tag name="param" line="451" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="464" package="network">
        <name>getResponseInfo</name>
        <full_name>\PVCommunicator::getResponseInfo()</full_name>
        <docblock line="464">
          <description>Gets information about the response</description>
          <long-description></long-description>
          <tag name="return" line="464" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="476" package="network">
        <name>getResponseHeader</name>
        <full_name>\PVCommunicator::getResponseHeader()</full_name>
        <docblock line="476">
          <description>Gets the headers that came back in a response</description>
          <long-description></long-description>
          <tag name="param" line="476" description="" type="string" variable="">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="490" package="network">
        <name>getResponseBody</name>
        <full_name>\PVCommunicator::getResponseBody()</full_name>
        <docblock line="490">
          <description>Retrieves a response body</description>
          <long-description></long-description>
          <tag name="return" line="490" description="" type="\$string">
            <type>\$string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="503" package="network">
        <name>getError</name>
        <full_name>\PVCommunicator::getError()</full_name>
        <docblock line="503">
          <description>Gets the error response</description>
          <long-description></long-description>
          <tag name="return" line="503" description="" type="string">
            <type>string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="52" package="Default">
        <name>__set</name>
        <full_name>\PVStaticInstance::__set()</full_name>
        <docblock line="52">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="52" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="52" description="&lt;p&gt;A mixed value that can be any type&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="52" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="52" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="77" package="Default">
        <name>__get</name>
        <full_name>\PVStaticInstance::__get()</full_name>
        <docblock line="77">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="77" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="77" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="77" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="107" package="Default">
        <name>__call</name>
        <full_name>\PVStaticInstance::__call()</full_name>
        <docblock line="107">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="107" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="107" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="107" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="107" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="136" package="Default">
        <name>addToCollection</name>
        <full_name>\PVStaticInstance::addToCollection()</full_name>
        <docblock line="136">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="136" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="136" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="136" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="161" package="Default">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticInstance::addToCollectionWithName()</full_name>
        <docblock line="161">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="161" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="161" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="161" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="161" description="public"/>
          <tag name="todo" line="161" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="183" package="Default">
        <name>getIterator</name>
        <full_name>\PVStaticInstance::getIterator()</full_name>
        <docblock line="183">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="183" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="" line="203" package="Default">
        <name>addMethod</name>
        <full_name>\PVStaticInstance::addMethod()</full_name>
        <docblock line="203">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="203" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="203" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="203" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="203" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticInstance</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="434">work on a test socket communication</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="util/PVCli.php" generated-path="util.PVCli.html" hash="22413f34f833fbb8b1e0755ae54a11ff" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="17" package="util">
      <extends>\PVStaticObject</extends>
      <name>PVCli</name>
      <full_name>\PVCli</full_name>
      <docblock line="17">
        <description>Command Line Interface (CLI) utility class.</description>
        <long-description>This is an adaptation of Patrick Fisher command line parser for PHP. The class has been modified
to utilizes adapters, filter and observers natively present in ProdigyView.</long-description>
        <tag name="author" line="17" description="Patrick Fisher" link="mailto:patrick@pwfisher.com"/>
        <tag name="since" line="17" description="August 21, 2009"/>
        <tag name="see" line="17" description="This work is licensed under the Creative Commons Attribution License.&#10;http://creativecommons.org/licenses/by/3.0/" link="https://github.com/pwfisher/CommandLine.php"/>
        <tag name="package" line="17" description="util"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="public" namespace="" line="22" package="util">
        <name>$args</name>
        <full_name>\PVCli::$args</full_name>
        <default></default>
        <docblock line="22">
          <description>Args parsed from command linke entry</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="31" package="util">
        <name>parse</name>
        <full_name>\PVCli::parse()</full_name>
        <docblock line="31">
          <description>Parse the command line arguements</description>
          <long-description></long-description>
          <tag name="param" line="31" description="&lt;p&gt;Arguements from teh command line&lt;/p&gt;" type="string" variable="$argv">
            <type>string</type>
          </tag>
          <tag name="return" line="31" description="An array of items to output" type="array">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$argv</name>
          <default>null</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="118" package="util">
        <name>getBoolean</name>
        <full_name>\PVCli::getBoolean()</full_name>
        <docblock line="118">
          <description>GET BOOLEAN</description>
          <long-description></long-description>
          <tag name="param" line="118" description="" type="string" variable="$key">
            <type>string</type>
          </tag>
          <tag name="param" line="118" description="" type="string" variable="$default">
            <type>string</type>
          </tag>
          <tag name="todo" line="118" description="Revist for figure out what this function was for."/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$key</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$default</name>
          <default>false</default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="118">Revist for figure out what this function was for.</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="system/PVSession.php" generated-path="system.PVSession.html" hash="192360e15812121fb29ec60f3cc41f65" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="23" package="system">
      <extends>\PVStaticObject</extends>
      <name>PVSession</name>
      <full_name>\PVSession</full_name>
      <docblock line="23">
        <description>PVSession is the class for handling the cookie session information related to the system.</description>
        <long-description>The class offers a variety of tools for how to set up basic session control within your application. These features can be used in conjunction with other session handling methodologies.

Example:
```php
//Initialize the class
PVSession::init();

//Write data to a cookie
PVSession::writeCookie('foo', 'bar');
echo PVSession::readCookie('foo');

//Encrypt the  value
PVSession::writeCookie('foo', 'bar', array('hash_cookie' =&gt; true));
echo PVSession::readCookie('foo', array('hash_cookie' =&gt; true);
```</long-description>
        <tag name="package" line="23" description="system"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="private" namespace="" line="28" package="system">
        <name>$cookie_lifetime</name>
        <full_name>\PVSession::$cookie_lifetime</full_name>
        <default>5000</default>
        <docblock line="28">
          <description>The lifetime of the cookie</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="33" package="system">
        <name>$cookie_path</name>
        <full_name>\PVSession::$cookie_path</full_name>
        <default>'/'</default>
        <docblock line="33">
          <description>The cookie path</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="38" package="system">
        <name>$cookie_domain</name>
        <full_name>\PVSession::$cookie_domain</full_name>
        <default>''</default>
        <docblock line="38">
          <description>The cookie domain</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="43" package="system">
        <name>$cookie_secure</name>
        <full_name>\PVSession::$cookie_secure</full_name>
        <default>false</default>
        <docblock line="43">
          <description>Access the cookie only over an secure connection</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="48" package="system">
        <name>$cookie_httponly</name>
        <full_name>\PVSession::$cookie_httponly</full_name>
        <default>false</default>
        <docblock line="48">
          <description>Write to the cookie only over an http(s) connection</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="53" package="system">
        <name>$hash_cookie</name>
        <full_name>\PVSession::$hash_cookie</full_name>
        <default>false</default>
        <docblock line="53">
          <description>Encrypt the cookie</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="59" package="system">
        <name>$session_lifetime</name>
        <full_name>\PVSession::$session_lifetime</full_name>
        <default>5000</default>
        <docblock line="59">
          <description>The lifetime of the session</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="64" package="system">
        <name>$session_path</name>
        <full_name>\PVSession::$session_path</full_name>
        <default>'/'</default>
        <docblock line="64">
          <description>The tmp path for the session</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="69" package="system">
        <name>$session_domain</name>
        <full_name>\PVSession::$session_domain</full_name>
        <default>''</default>
        <docblock line="69">
          <description>The domain for the session</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="74" package="system">
        <name>$session_secure</name>
        <full_name>\PVSession::$session_secure</full_name>
        <default>false</default>
        <docblock line="74">
          <description>Access the session only over a secure connection</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="79" package="system">
        <name>$session_httponly</name>
        <full_name>\PVSession::$session_httponly</full_name>
        <default>false</default>
        <docblock line="79">
          <description>Writes to the session only over an http connection</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="84" package="system">
        <name>$hash_session</name>
        <full_name>\PVSession::$hash_session</full_name>
        <default>false</default>
        <docblock line="84">
          <description>Encrypt the session data</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="107" package="system">
        <name>init</name>
        <full_name>\PVSession::init()</full_name>
        <docblock line="107">
          <description>Initializes the static class PVSession. Values passed can be
used to set the default cookie options and the default session
options.</description>
          <long-description></long-description>
          <tag name="param" line="107" description="&lt;p&gt;An array of values that set how the class functions.&#10;-'cookie_path' &lt;em&gt;string&lt;/em&gt;: The path where the cookie is to be stored&#10;-'cookie_domain' &lt;em&gt;string&lt;/em&gt;: The domain the that the cookie resides on&#10;-'cookie_secure' &lt;em&gt;boolean&lt;/em&gt;: Access the cookie only over an secure connection&#10;-'cookie_httponly' &lt;em&gt;boolean&lt;/em&gt;: Write to the cookie only over an http(s) connection&#10;-'cookie_lifetime' &lt;em&gt;int&lt;/em&gt;: The amount of time the cookie is active for&#10;-'hash_cookie' &lt;em&gt;boolean&lt;/em&gt; :Hash the cookie to its value is not easily readable&#10;-'hash_session' _boolean: Has a season so its value is not easily readable&#10;-'session_name' &lt;em&gt;string&lt;/em&gt; : Name of the current session&#10;-'session_lifetime' &lt;em&gt;int&lt;/em&gt;: The life time of the session, in seconds&#10;-'session_path' &lt;em&gt;string&lt;/em&gt;: The path of the session.&#10;-'session_domain' &lt;em&gt;string&lt;/em&gt;: The domain of the session. Default is current.&#10;-'session_secure'&lt;em&gt;boolean&lt;/em&gt;: Access the session only over a secure connection&#10;-'session_httponly' _boolean: Writes to the session only over an http connection&lt;/p&gt;" type="array" variable="$session_vars">
            <type>array</type>
          </tag>
          <tag name="return" line="107" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$session_vars</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="175" package="system">
        <name>writeCookie</name>
        <full_name>\PVSession::writeCookie()</full_name>
        <docblock line="175">
          <description>Write a cookie. Will use default options set in the init. Otherwise
cookie parameters can be defined. Objects and arrays passed as values
will be serialized.</description>
          <long-description></long-description>
          <tag name="param" line="175" description="&lt;p&gt;Key for the value to be written as a cookie&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="175" description="&lt;p&gt;The value to be stored in a cookie.&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="175" description="&lt;p&gt;Options that can change how the cookie is stored.&#10;The options passed will override the default options passed in the init&#10;-'cookie_path' &lt;em&gt;string&lt;/em&gt;: The path where the cookie is to be stored&#10;-'cookie_domain' &lt;em&gt;string&lt;/em&gt;: The domain the that the cookie resides on&#10;-'cookie_secure' &lt;em&gt;boolean&lt;/em&gt;: If the cookie is only writable over a secure connection&#10;-'cookie_httponly' &lt;em&gt;boolean&lt;/em&gt;: If the cookie is only accesible over an http connection&#10;-'cookie_lifetime' &lt;em&gt;int&lt;/em&gt;: The amount of time the cookie is active for in seconds&#10;-'hash_cookie' &lt;em&gt;boolean&lt;/em&gt; :Hash the cookie key and its value is not easily readable&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="175" description="" type="void">
            <type>void</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="211" package="system">
        <name>readCookie</name>
        <full_name>\PVSession::readCookie()</full_name>
        <docblock line="211">
          <description>Read a value set in a cookie. Objects and arrays thats were
serilizaed will be unserialzed and returned.</description>
          <long-description></long-description>
          <tag name="param" line="211" description="&lt;p&gt;The key the cookie was saved as&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="211" description="&lt;p&gt;Options thats configure reading the cookie&#10;-hash_cookie &lt;em&gt;boolean&lt;/em&gt;: If the cookie was hashed, set the value to true&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="211" description="$value The value retrieved from the cookie. Arrays and objects serialized will be unseralized and returned." type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="211" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="253" package="system">
        <name>deleteCookie</name>
        <full_name>\PVSession::deleteCookie()</full_name>
        <docblock line="253">
          <description>Removes a cookie from the system,</description>
          <long-description></long-description>
          <tag name="param" line="253" description="&lt;p&gt;The name/key of the current cookie&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="253" description="&lt;p&gt;Options than can be defined to customize the cookie deletion process&#10;-'hash_session' _boolean: If the cookie is hashed, use this to delete it.&#10;-'cookie_path' &lt;em&gt;string&lt;/em&gt;: The path where the cookie is to be stored&#10;-'cookie_domain' &lt;em&gt;string&lt;/em&gt;: The domain the that the cookie resides on&#10;-'cookie_secure' &lt;em&gt;boolean&lt;/em&gt;:&#10;-'cookie_httponly' &lt;em&gt;boolean&lt;/em&gt;:&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="287" package="system">
        <name>writeSession</name>
        <full_name>\PVSession::writeSession()</full_name>
        <docblock line="287">
          <description>Write a cookie. Will use default options set in class. otherwise
cookie parameters can be defined. Objects and arrays passed as values
will be serialized.</description>
          <long-description></long-description>
          <tag name="param" line="287" description="&lt;p&gt;The key for the session&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="287" description="&lt;p&gt;value The value that will be stored in the session&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="287" description="&lt;p&gt;options Options that can be changed that will ovveride the&#10;values passed in the init&#10;-'hash_session' _boolean: Hash a session so its value is not easily readable&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="287" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="287" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="324" package="system">
        <name>readSession</name>
        <full_name>\PVSession::readSession()</full_name>
        <docblock line="324">
          <description>Read a value set in a cookie. Objects and arrays thats were
serilizaed will be unserialzed and returned.</description>
          <long-description></long-description>
          <tag name="param" line="324" description="&lt;p&gt;The key to access the session variable&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="324" description="&lt;p&gt;Options to define how the information is acccessed&#10;-'hash_session' _boolean: Hash a session so its value is not easily readable&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="324" description="$stored_value" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="324" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="365" package="system">
        <name>deleteSession</name>
        <full_name>\PVSession::deleteSession()</full_name>
        <docblock line="365">
          <description>Remove a session</description>
          <long-description></long-description>
          <tag name="param" line="365" description="&lt;p&gt;Key for the session&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="365" description="&lt;p&gt;Options used for deleting the key&#10;-'hash_session' _boolean: Hash a session so its value is not easily readable&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="365" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="365" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="392" package="system">
        <name>getCookieDefaults</name>
        <full_name>\PVSession::getCookieDefaults()</full_name>
        <docblock line="392">
          <description>Get the cookie default options</description>
          <long-description></long-description>
          <tag name="return" line="392" description="default_cookie_options" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="392" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="412" package="system">
        <name>getSessionDefaults</name>
        <full_name>\PVSession::getSessionDefaults()</full_name>
        <docblock line="412">
          <description>Get the session default options</description>
          <long-description></long-description>
          <tag name="return" line="412" description="default_session_options" type="array">
            <type>array</type>
          </tag>
          <tag name="access" line="412" description="private"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="data/PVStaticObject.php" generated-path="data.PVStaticObject.html" hash="5322d1d616f13be4839f77f1ff1e62fc" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="45" package="data">
      <extends>\PVStaticPatterns</extends>
      <name>PVStaticObject</name>
      <full_name>\PVStaticObject</full_name>
      <docblock line="45">
        <description>PVStaticObjectt is an extendable class used to enhance an object with static methods.</description>
        <long-description>ProdigyView comes with the ability to implement adapters, intercepting filters and observers. Extending this class to a child class will give the child class the ability to use those design patterns along with a collection that can assign and retrieve values using magic functions.
```php
Example:

//Create the class
class Example extends PVObject {
  	public static function testMe($string) {
			echo $string;

			//An observer
			$this-&gt;_notify(get_class() . '::' . __FUNCTION__, $string);
		}
	}

//Add to its collection
Example::set('foo','bar');
echo Example::get('foo');

//Add a dynamic method
Example::addMethod('fiz', function($text) {
		return 'fiz ' . $text;
});

echo Example::fizz('Bop');


//Add Observer
Example::addObserver('Example::testMe', 'test_closure', function($string) {
  	echo "\nLine 2 \n"
		echo $string;

}, array('type' =&gt; 'closure'));

//Will call test me and the observer attached
Example::testMe('Testing String ');
```</long-description>
        <tag name="package" line="45" description="data"/>
        <tag name="inherited_from" description="\PVStaticPatterns" refers="\PVStaticPatterns" link="/classes/PVStaticPatterns.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="177">check the relevance of get and set</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="template/PVHtml.php" generated-path="template.PVHtml.html" hash="014832e9a8bdba2a2dff16b1465e28be" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="36" package="template">
      <extends>\PVStaticObject</extends>
      <name>PVHtml</name>
      <full_name>\PVHtml</full_name>
      <docblock line="36">
        <description>PVHTML is a class designed for generating HTML elements to display to the user.</description>
        <long-description>The class takes in basic HTML forms with options. The functionality can be used with dynamic form generation tools.

Example:
```php
//Create array of links
$links = array('Google', 'http://www.google.com', 'Facebook', 'http://www.facebook.com');

$html = '';
$li = '';

foreach($links as $key =&gt; $value):
	 $li .= PVHtml::li(PVHtml::ahref($key, $value));
endforeach;

$html = PVHtml::ul($li);

$html = PVHtml::div($html, array('class' =&gt; 'container'));
echo $html;

//The following will be printed
&lt;div class="container"&gt;
	 &lt;ul&gt;
		&lt;li&gt;&lt;a href="http://www.google.com"&gt;Google&lt;/a&gt;&lt;li&gt;
		&lt;li&gt;&lt;a href="http://www.facebook.com"&gt;Facebook&lt;/a&gt;&lt;li&gt;
	 &lt;/ul&gt;
&lt;/div&gt;
```</long-description>
        <tag name="package" line="36" description="template"/>
        <tag name="todo" line="36" description="Add more HTML5 form elements"/>
        <tag name="inherited_from" description="\PVStaticObject" refers="\PVStaticObject" link="/classes/PVStaticObject.html"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="50" package="data">
        <name>$_collection</name>
        <full_name>\PVStaticObject::$_collection</full_name>
        <default>null</default>
        <docblock line="50">
          <description>A collection of items that belong to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="55" package="data">
        <name>$_methods</name>
        <full_name>\PVStaticObject::$_methods</full_name>
        <default>array()</default>
        <docblock line="55">
          <description>A collection of dynamically added methods that below to this class</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="58" package="template">
        <name>image</name>
        <full_name>\PVHtml::image()</full_name>
        <docblock line="58">
          <description>Displays an image in the &lt;img /&gt; tags. By default the location can be either an image
in an url or the image location referenced will be from the PV_IMAGE define set.</description>
          <long-description></long-description>
          <tag name="see" line="58" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="58" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="58" description="&lt;p&gt;Either a url of the image or the path to the image in the PV_IMAGE define location&lt;/p&gt;" type="string" variable="$location">
            <type>string</type>
          </tag>
          <tag name="param" line="58" description="&lt;p&gt;Attributes that can be added to the image. includes self::getStandardAttributes and self::getEventAttributes&#10;-'image_width' &lt;em&gt;double&lt;/em&gt;: The width of the image&#10;-'image_height' &lt;em&gt;double&lt;/em&gt;: The height of the image&#10;-'width' &lt;em&gt;double&lt;/em&gt;: The width of the image&#10;-'height' &lt;em&gt;double&lt;/em&gt;: The height of the image&#10;-'alt' &lt;em&gt;string&lt;/em&gt;: Value to go in the alt tag of the image&#10;-'longdesc' &lt;em&gt;string&lt;/em&gt;: Value to go in the longdesc tag of the image&#10;-'usemap' &lt;em&gt;string&lt;/em&gt;: Value to go in the usemap tag of an image&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="58" description="$image The image tag returned as a string" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="58" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$location</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="133" package="template">
        <name>time</name>
        <full_name>\PVHtml::time()</full_name>
        <docblock line="133">
          <description>Display a time passed in the HTML5 time field.</description>
          <long-description></long-description>
          <tag name="see" line="133" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="133" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="133" description="&lt;p&gt;A time value&lt;/p&gt;" type="string" variable="$time">
            <type>string</type>
          </tag>
          <tag name="param" line="133" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&#10;-'datetime' &lt;em&gt;string&lt;/em&gt;: Tags to go in the datetime tags&#10;-'pubdate' &lt;em&gt;string&lt;/em&gt;: Tags to go in the pubdate&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="133" description="$time The time taged returned a time" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="133" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$time</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="182" package="template">
        <name>iframe</name>
        <full_name>\PVHtml::iframe()</full_name>
        <docblock line="182">
          <description>Generate an html element for displaying an iframe.</description>
          <long-description></long-description>
          <tag name="see" line="182" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="182" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="182" description="&lt;p&gt;The source of the iframe&lt;/p&gt;" type="string" variable="$src">
            <type>string</type>
          </tag>
          <tag name="param" line="182" description="&lt;p&gt;The data to inside the iframe take&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="182" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&#10;-'frameborder' &lt;em&gt;string&lt;/em&gt;: Tags to go in the frameborder&#10;-'marginheight' &lt;em&gt;string&lt;/em&gt;: Tags to go in the marginheight&#10;-'marginwidth' &lt;em&gt;string&lt;/em&gt;: Tags to go in the marginweidth&#10;-'scrolling' &lt;em&gt;string&lt;/em&gt;: Tags to go in the scrolling&#10;-'longdesc' &lt;em&gt;string&lt;/em&gt;: Tags to go in the longdesc&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="182" description="$iframe The iframe taged returned a time" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="182" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$src</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="246" package="template">
        <name>alink</name>
        <full_name>\PVHtml::alink()</full_name>
        <docblock line="246">
          <description>Display an ahref links</description>
          <long-description></long-description>
          <tag name="see" line="246" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="246" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="see" line="246" description="" link="\PVRouter::url()"/>
          <tag name="param" line="246" description="&lt;p&gt;The title of link that the user will see&lt;/p&gt;" type="string" variable="$title">
            <type>string</type>
          </tag>
          <tag name="param" line="246" description="&lt;p&gt;A url that the link will point too. If the url is an array or not a valid url, it will be passed to PVRouter::url.&lt;/p&gt;" type="mixed" variable="$url">
            <type>mixed</type>
          </tag>
          <tag name="param" line="246" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&#10;-'charset' &lt;em&gt;string&lt;/em&gt;: Value to go in the charset tag.&#10;-'hreflang' &lt;em&gt;string&lt;/em&gt;: Value to go in the hreflang tag.&#10;-'name' &lt;em&gt;string&lt;/em&gt;: Value tog go in the name attribute&#10;-'rel' &lt;em&gt;string&lt;/em&gt;: Value to go in the rel attribute&#10;-'shape' &lt;em&gt;string&lt;/em&gt;: Value to o in the shape attribute&#10;-'target' &lt;em&gt;string&lt;/em&gt;: Value to in the target attribute&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="246" description="$link The link tag returned as a string" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="246" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$title</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="321" package="template">
        <name>link</name>
        <full_name>\PVHtml::link()</full_name>
        <docblock line="321">
          <description>Display a link</description>
          <long-description></long-description>
          <tag name="see" line="321" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="321" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="see" line="321" description="" link="\PVRouter::url()"/>
          <tag name="param" line="321" description="&lt;p&gt;A url that the link will point too. If the url is an array or not a valid url, it will be passed to PVRouter::url.&lt;/p&gt;" type="mixed" variable="$url">
            <type>mixed</type>
          </tag>
          <tag name="param" line="321" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&#10;-'hreflang' &lt;em&gt;string&lt;/em&gt;: Value to go in the hreflang tag.&#10;-'name' &lt;em&gt;string&lt;/em&gt;: Value tog go in the name attribute&#10;-'rel' &lt;em&gt;string&lt;/em&gt;: Value to go in the rel attribute&#10;-'media' &lt;em&gt;string&lt;/em&gt;: Value to go in the media attribute.&#10;-'sizes' &lt;em&gt;string&lt;/em&gt;: Value to in the sizes attribute&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="321" description="$link The link tag returned as a string" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="321" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="387" package="template">
        <name>meta</name>
        <full_name>\PVHtml::meta()</full_name>
        <docblock line="387">
          <description>Generate a meta tag.</description>
          <long-description></long-description>
          <tag name="see" line="387" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="387" description="&lt;p&gt;The name of the meta tag being generated&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="387" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&#10;-'charset' &lt;em&gt;string&lt;/em&gt;: Value to go in the charset tag.&#10;-'content' &lt;em&gt;string&lt;/em&gt;: Value to go in the content attribute.&#10;-'name' &lt;em&gt;string&lt;/em&gt;: Value tog go in the name attribute&#10;-'http-equiv' &lt;em&gt;string&lt;/em&gt;: Value to go in the http-equiv attribute&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="387" description="$meta The meta tag returned as a string" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="387" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="444" package="template">
        <name>video</name>
        <full_name>\PVHtml::video()</full_name>
        <docblock line="444">
          <description>Displays a video using the HTML5 video component. For best usage, pass through a mp4, ogv and webm file.</description>
          <long-description></long-description>
          <tag name="param" line="444" description="&lt;p&gt;The location of the video file to be played. Will be rendered by self::videoContentURL() function&lt;/p&gt;" type="string" variable="$src">
            <type>string</type>
          </tag>
          <tag name="param" line="444" description="&lt;p&gt;Options that can be used to define attributes in the elements tag&#10;-'height' &lt;em&gt;double&lt;/em&gt;: The height of the video&#10;-'width' &lt;em&gt;width&lt;/em&gt;: The width of the video&#10;-'controls' &lt;em&gt;string&lt;/em&gt;: The controls attributes.&#10;-'audio' '&lt;em&gt;string&lt;/em&gt;: THe audio attribute&#10;-'autoplay' &lt;em&gt;string&lt;/em&gt;: Automatically play the video&#10;-'loop' &lt;em&gt;string&lt;/em&gt; : Loop to play automatically&#10;-'poster' &lt;em&gt;string&lt;/em&gt; : Poster attribute&#10;-'preload' &lt;em&gt;string&lt;/em&gt;: Preload attribute&#10;-'mp4_file' &lt;em&gt;string&lt;/em&gt;: Location of the mp4 file&#10;-'webm_file' &lt;em&gt;string&lt;/em&gt;: The location of the webm file&#10;-'ogv_file' &lt;em&gt;string&lt;/em&gt;: Location of the ogv file&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="444" description="$video Returns the video tag" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="444" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$src</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="535" package="template">
        <name>audio</name>
        <full_name>\PVHtml::audio()</full_name>
        <docblock line="535">
          <description>Displays an audio clip using the HTML5 audio component. For best usage, pass through a wav, mp3 and oga file.</description>
          <long-description></long-description>
          <tag name="param" line="535" description="&lt;p&gt;The location of the audio file to be played. Will be rendered by self::audioContentURL() function&lt;/p&gt;" type="string" variable="$src">
            <type>string</type>
          </tag>
          <tag name="param" line="535" description="&lt;p&gt;Options that can be used to define attributes in the elements tag&#10;-'controls' &lt;em&gt;string&lt;/em&gt;: The controls attributes.&#10;-'audio' '&lt;em&gt;string&lt;/em&gt;: THe audio attribute&#10;-'autoplay' &lt;em&gt;string&lt;/em&gt;: Automatically play the video&#10;-'loop' &lt;em&gt;string&lt;/em&gt; : Loop to play automatically&#10;-'poster' &lt;em&gt;string&lt;/em&gt; : Poster attribute&#10;-'preload' &lt;em&gt;string&lt;/em&gt;: Preload attribute&#10;-'wav_file' &lt;em&gt;string&lt;/em&gt;: Location of the wav file&#10;-'mp3_file' &lt;em&gt;string&lt;/em&gt;: The location of the mp3 file&#10;-'oga_file' &lt;em&gt;string&lt;/em&gt;: Location of the oga file&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="535" description="$audio Returns the audio tag" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="535" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$src</name>
          <default>''</default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="608" package="template">
        <name>div</name>
        <full_name>\PVHtml::div()</full_name>
        <docblock line="608">
          <description>Creates a div to display.</description>
          <long-description></long-description>
          <tag name="see" line="608" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="608" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="608" description="&lt;p&gt;The information thatwill be displayed inside the div&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="608" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="608" description="$div The div element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="608" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="636" package="template">
        <name>h1</name>
        <full_name>\PVHtml::h1()</full_name>
        <docblock line="636">
          <description>Creates a &lt;h1&gt;&lt;/h1&gt; to display.</description>
          <long-description></long-description>
          <tag name="see" line="636" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="636" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="636" description="&lt;p&gt;The information that will be displayed inside the heaader tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="636" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="636" description="$header The header element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="636" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="665" package="template">
        <name>h2</name>
        <full_name>\PVHtml::h2()</full_name>
        <docblock line="665">
          <description>Creates a &lt;h2&gt;&lt;/h2&gt; to display.</description>
          <long-description></long-description>
          <tag name="see" line="665" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="665" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="665" description="&lt;p&gt;The information that will be displayed inside the heaader tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="665" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="665" description="$header The header element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="665" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="694" package="template">
        <name>h3</name>
        <full_name>\PVHtml::h3()</full_name>
        <docblock line="694">
          <description>Creates a &lt;h3&gt;&lt;/h3&gt; to display.</description>
          <long-description></long-description>
          <tag name="see" line="694" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="694" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="694" description="&lt;p&gt;The information that will be displayed inside the heaader tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="694" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="694" description="$header The header element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="694" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="723" package="template">
        <name>h4</name>
        <full_name>\PVHtml::h4()</full_name>
        <docblock line="723">
          <description>Creates a &lt;h4&gt;&lt;/h4&gt; to display.</description>
          <long-description></long-description>
          <tag name="see" line="723" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="723" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="723" description="&lt;p&gt;The information that will be displayed inside the heaader tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="723" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="723" description="$header The header element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="723" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="752" package="template">
        <name>h5</name>
        <full_name>\PVHtml::h5()</full_name>
        <docblock line="752">
          <description>Creates a &lt;h5&gt;&lt;/h5&gt; to display.</description>
          <long-description></long-description>
          <tag name="see" line="752" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="752" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="752" description="&lt;p&gt;The information that will be displayed inside the heaader tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="752" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="752" description="$header The header element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="752" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="781" package="template">
        <name>h6</name>
        <full_name>\PVHtml::h6()</full_name>
        <docblock line="781">
          <description>Creates a &lt;h6&gt;&lt;/h6&gt; to display.</description>
          <long-description></long-description>
          <tag name="see" line="781" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="781" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="781" description="&lt;p&gt;The information that will be displayed inside the heaader tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="781" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="781" description="$header The header element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="781" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="810" package="template">
        <name>p</name>
        <full_name>\PVHtml::p()</full_name>
        <docblock line="810">
          <description>Creates a paragraph tag ,&lt;p&gt;&lt;/p&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="810" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="810" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="810" description="&lt;p&gt;The information that will be displayed inside the paragraph tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="810" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="810" description="$header The paragraph element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="810" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="839" package="template">
        <name>span</name>
        <full_name>\PVHtml::span()</full_name>
        <docblock line="839">
          <description>Creates a span tag ,&lt;span&gt;&lt;/span&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="839" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="839" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="839" description="&lt;p&gt;The information that will be displayed inside the span tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="839" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="839" description="$header The span element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="839" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="868" package="template">
        <name>article</name>
        <full_name>\PVHtml::article()</full_name>
        <docblock line="868">
          <description>Creates a article tag ,&lt;article&gt;&lt;/article&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="868" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="868" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="868" description="&lt;p&gt;The information that will be displayed inside the article tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="868" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="868" description="$article The article element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="868" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="897" package="template">
        <name>address</name>
        <full_name>\PVHtml::address()</full_name>
        <docblock line="897">
          <description>Creates a address tag ,&lt;address&gt;&lt;/address&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="897" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="897" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="897" description="&lt;p&gt;The information that will be displayed inside the address tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="897" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="897" description="$address The address element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="897" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="926" package="template">
        <name>strong</name>
        <full_name>\PVHtml::strong()</full_name>
        <docblock line="926">
          <description>Creates a strong tag ,&lt;strong&gt;&lt;/strong&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="926" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="926" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="926" description="&lt;p&gt;The information that will be displayed inside the strong tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="926" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="926" description="$strong The strong element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="926" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="955" package="template">
        <name>summary</name>
        <full_name>\PVHtml::summary()</full_name>
        <docblock line="955">
          <description>Creates a summary tag ,&lt;summary&gt;&lt;/ssummary&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="955" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="955" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="955" description="&lt;p&gt;The information that will be displayed inside the strong tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="955" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="955" description="$summary The summary element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="955" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="984" package="template">
        <name>details</name>
        <full_name>\PVHtml::details()</full_name>
        <docblock line="984">
          <description>Creates a details tag ,&lt;details&gt;&lt;/details&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="984" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="984" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="984" description="&lt;p&gt;The information that will be displayed inside the details tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="984" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="984" description="$details The details element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="984" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1013" package="template">
        <name>aside</name>
        <full_name>\PVHtml::aside()</full_name>
        <docblock line="1013">
          <description>Creates a aside tag ,&lt;aside&gt;&lt;/aside&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="1013" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="1013" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="1013" description="&lt;p&gt;The information that will be displayed inside the aside tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="1013" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1013" description="$aside The aside element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="1013" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1042" package="template">
        <name>canvas</name>
        <full_name>\PVHtml::canvas()</full_name>
        <docblock line="1042">
          <description>Creates a canvas tag ,&lt;canvas&gt;&lt;/canvas&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="1042" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="1042" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="1042" description="&lt;p&gt;The information that will be displayed inside the canvas tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="1042" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1042" description="$aside The canvas element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="1042" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1071" package="template">
        <name>li</name>
        <full_name>\PVHtml::li()</full_name>
        <docblock line="1071">
          <description>Creates a strong li ,&lt;li&gt;&lt;/li&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="1071" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="1071" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="1071" description="&lt;p&gt;The information that will be displayed inside the li tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="1071" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1071" description="$strong The strong element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="1071" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1100" package="template">
        <name>ul</name>
        <full_name>\PVHtml::ul()</full_name>
        <docblock line="1100">
          <description>Creates a strong ul ,&lt;ul&gt;&lt;/ul&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="1100" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="1100" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="1100" description="&lt;p&gt;The information that will be displayed inside the ul tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="1100" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1100" description="$strong The strong element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="1100" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1129" package="template">
        <name>ol</name>
        <full_name>\PVHtml::ol()</full_name>
        <docblock line="1129">
          <description>Creates a strong ol ,&lt;ol&gt;&lt;/ol&gt;, to display.</description>
          <long-description></long-description>
          <tag name="see" line="1129" description="" link="\PVHtml::getEventAttributes()"/>
          <tag name="see" line="1129" description="" link="\PVHtml::getStandardAttributes()"/>
          <tag name="param" line="1129" description="&lt;p&gt;The information that will be displayed inside the ol tag&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="1129" description="&lt;p&gt;Attributes that can be added to the element. includes self::getStandardAttributes and self::getEventAttributes&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1129" description="$strong The strong element that was generated" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="1129" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1163" package="template">
        <name>progress</name>
        <full_name>\PVHtml::progress()</full_name>
        <docblock line="1163">
          <description>Creates a progress input element with options passed too it.</description>
          <long-description></long-description>
          <tag name="see" line="1163" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="1163" description="" link="\PVHTML::getEventAttributes()"/>
          <tag name="see" line="1163" description="" link="\PVHTML::getStandardAttributes()"/>
          <tag name="see" line="1163" description="" link="self::getFormAttributes()"/>
          <tag name="param" line="1163" description="&lt;p&gt;The current value for the progress bar&lt;/p&gt;" type="string" variable="$value">
            <type>string</type>
          </tag>
          <tag name="param" line="1163" description="&lt;p&gt;The max value for the progress bar&lt;/p&gt;" type="string" variable="$max">
            <type>string</type>
          </tag>
          <tag name="param" line="1163" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="1163" description="$element The string that creates the element" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="1163" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$max</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1214" package="template">
        <name>getStandardAttributes</name>
        <full_name>\PVHtml::getStandardAttributes()</full_name>
        <docblock line="1214">
          <description>Standard attributes that are present in many html tags. This functionisused for assigning those attribute by passing
them in as an array and returning them as a string. Contains both html and html5 elements</description>
          <long-description></long-description>
          <tag name="param" line="1214" description="&lt;p&gt;Attribues that will be assigned if they match&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'id' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'dir' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'lang' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'style' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'title' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'title' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'xml:lang' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'accesskey' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'contenteditable' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'contextmenu' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'draggable' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'dropzone' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'hidden' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'spellcheck' &lt;em&gt;string&lt;/em&gt;: The class attribute&#10;-'title' &lt;em&gt;string&lt;/em&gt;: The class attribute&lt;/p&gt;" type="array" variable="$attributes">
            <type>array</type>
          </tag>
          <tag name="return" line="1214" description="$attributes Returns the matched attributes as a string" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="1214" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$attributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1243" package="template">
        <name>getEventAttributes</name>
        <full_name>\PVHtml::getEventAttributes()</full_name>
        <docblock line="1243">
          <description>Matches options pased with javascript event actions such as onabort, onclick, etc.</description>
          <long-description></long-description>
          <tag name="param" line="1243" description="&lt;p&gt;An array of attributes check if its an event&lt;/p&gt;" type="array" variable="$attributes">
            <type>array</type>
          </tag>
          <tag name="return" line="1243" description="Html attributes if any matched" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$attributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1272" package="template">
        <name>getMediaEventAttributes</name>
        <full_name>\PVHtml::getMediaEventAttributes()</full_name>
        <docblock line="1272">
          <description>Searches for media attributes that go with media tags like video/audio.</description>
          <long-description></long-description>
          <tag name="param" line="1272" description="&lt;p&gt;An array of attributes to assign&lt;/p&gt;" type="array" variable="$attributes">
            <type>array</type>
          </tag>
          <tag name="return" line="1272" description="Html attributes if any matched" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$attributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1301" package="template">
        <name>getWindowAttributes</name>
        <full_name>\PVHtml::getWindowAttributes()</full_name>
        <docblock line="1301">
          <description>Searches for media attributes that go with window javascript events.</description>
          <long-description></long-description>
          <tag name="param" line="1301" description="&lt;p&gt;An array of attributes to assign&lt;/p&gt;" type="array" variable="$attributes">
            <type>array</type>
          </tag>
          <tag name="return" line="1301" description="Html attributes if any matched" type="string">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$attributes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="1331" package="template">
        <name>generateHtmlTag</name>
        <full_name>\PVHtml::generateHtmlTag()</full_name>
        <docblock line="1331">
          <description>Creates an html tag.</description>
          <long-description></long-description>
          <tag name="param" line="1331" description="&lt;p&gt;The name of the tag, such as div, main, etc.&lt;/p&gt;" type="string" variable="$tag">
            <type>string</type>
          </tag>
          <tag name="param" line="1331" description="&lt;p&gt;The content that will go instead the element&lt;/p&gt;" type="string" variable="$data">
            <type>string</type>
          </tag>
          <tag name="param" line="1331" description="&lt;p&gt;Options than can be used to further distinguish the element. The options are&#10;&#9;&#9;&#9;&#9;the same values that will be passed through PVHTML::getStandardAttributes, PVHTML::getEventAttributes&#10;&#9;&#9;&#9;&#9;and get the self::getFormAttributes funtions&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$tag</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="1361" package="template">
        <name>audioContentURL</name>
        <full_name>\PVHtml::audioContentURL()</full_name>
        <docblock line="1361">
          <description>Not sure if the function is needed or still make sense</description>
          <long-description></long-description>
          <tag name="param" line="1361" description="&lt;p&gt;url of the file&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="param" line="1361" description="&lt;p&gt;Appends the PV_AUDIo tage&lt;/p&gt;" type="boolean" variable="$append_location">
            <type>boolean</type>
          </tag>
          <tag name="return" line="1361" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="todo" line="1361" description="check if function is still valid"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$append_location</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="1383" package="template">
        <name>videoContentURL</name>
        <full_name>\PVHtml::videoContentURL()</full_name>
        <docblock line="1383">
          <description>Not sure if the function is needed or still make sense</description>
          <long-description></long-description>
          <tag name="param" line="1383" description="&lt;p&gt;url of the file&lt;/p&gt;" type="string" variable="$url">
            <type>string</type>
          </tag>
          <tag name="param" line="1383" description="&lt;p&gt;Appends the PV_AUDIo tage&lt;/p&gt;" type="boolean" variable="$append_location">
            <type>boolean</type>
          </tag>
          <tag name="return" line="1383" description="" type="string">
            <type>string</type>
          </tag>
          <tag name="todo" line="1383" description="check if function is still valid"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$url</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$append_location</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>set</name>
        <full_name>\PVStaticObject::set()</full_name>
        <docblock line="68">
          <description>Adds a value to the classes Collection. By default the collection is stored
in the public collection. The stored instance can be retrieved later by called
in it's key value.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The key or index to store the value at&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;A mixed value that can be anytype&lt;/p&gt;" type="mixed" variable="$value">
            <type>mixed</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$value</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="94" package="data">
        <name>get</name>
        <full_name>\PVStaticObject::get()</full_name>
        <docblock line="94">
          <description>Retrieves a value that is in the public data collection or was pass through
by the set method.</description>
          <long-description></long-description>
          <tag name="param" line="94" description="&lt;p&gt;The index to retrieve a value from&lt;/p&gt;" type="string" variable="$index">
            <type>string</type>
          </tag>
          <tag name="return" line="94" description="$data The data that was stored at that index" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="94" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$index</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="124" package="data">
        <name>__callStatic</name>
        <full_name>\PVStaticObject::__callStatic()</full_name>
        <docblock line="124">
          <description>Uses the magic method __call and executes a closure/anonymous function that has been added
to the classes $_methods using the addMethod()  method.</description>
          <long-description></long-description>
          <tag name="param" line="124" description="&lt;p&gt;The key/name assigned to the method when added&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="124" description="&lt;p&gt;Arguements to pass to the annoymous function. The function is called using&#10;&#9;&#9;&#9;&#9;call_user_func_array.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="124" description="$value The value returned is the value the stored function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="124" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default>array()</default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="153" package="data">
        <name>addToCollection</name>
        <full_name>\PVStaticObject::addToCollection()</full_name>
        <docblock line="153">
          <description>Adds a data to the public collection, index will be assigned automatically. Primarily used for adding
launch quanties of data to the collection</description>
          <long-description></long-description>
          <tag name="param" line="153" description="&lt;p&gt;Any data type( Object, Array, int, etc) to add to the public data collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="153" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="153" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="177" package="data">
        <name>addToCollectionWithName</name>
        <full_name>\PVStaticObject::addToCollectionWithName()</full_name>
        <docblock line="177">
          <description>Adds data to the public collection. The data is assigned a key/index. If the key/index is already set, new information
will override the old one.</description>
          <long-description></long-description>
          <tag name="param" line="177" description="&lt;p&gt;The key/index to assign the value to&lt;/p&gt;" type="string" variable="$name">
            <type>string</type>
          </tag>
          <tag name="param" line="177" description="&lt;p&gt;Data to be stored in the collection&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="return" line="177" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="177" description="public"/>
          <tag name="todo" line="177" description="check the relevance of get and set"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$name</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="199" package="data">
        <name>getIterator</name>
        <full_name>\PVStaticObject::getIterator()</full_name>
        <docblock line="199">
          <description>Returns the iterator for iterating through the values stored in the classes collection.</description>
          <long-description></long-description>
          <tag name="return" line="199" description="$iterator The classes collection in an iteratable form&#10;#access public" type="\PVIterator">
            <type>\PVIterator</type>
          </tag>
        </docblock>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="219" package="data">
        <name>addMethod</name>
        <full_name>\PVStaticObject::addMethod()</full_name>
        <docblock line="219">
          <description>Adds a closure/anonymous function to the object that can be called.</description>
          <long-description></long-description>
          <tag name="param" line="219" description="&lt;p&gt;The key/value that will be used to call the function&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="219" description="&lt;p&gt;The anonymous function/closure to be added&lt;/p&gt;" type="\function" variable="$closure">
            <type>\function</type>
          </tag>
          <tag name="return" line="219" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="219" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$closure</name>
          <default></default>
          <type>\function</type>
        </argument>
        <inherited_from>\PVStaticObject</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
        <inherited_from>\PVStaticPatterns</inherited_from>
      </method>
    </class>
    <markers>
      <todo line="36">Add more HTML5 form elements</todo>
      <todo line="1361">check if function is still valid</todo>
      <todo line="1383">check if function is still valid</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
    </parse_markers>
  </file>
  <file path="data/PVStaticPatterns.php" generated-path="data.PVStaticPatterns.html" hash="2e8f80992cf325e1a7dee4c5c1f43ced" package="Default">
    <docblock line="0">
      <description></description>
      <long-description></long-description>
      <tag name="package" line="0" description="Default"/>
    </docblock>
    <class final="false" abstract="false" namespace="" line="10" package="data">
      <extends/>
      <name>PVStaticPatterns</name>
      <full_name>\PVStaticPatterns</full_name>
      <docblock line="10">
        <description>PVPatterns is the parent class for implementing Adapters, Observers, Intercepting Filters and Singletons on static methods.</description>
        <long-description>Prodgiyview comes with  4 design patterns that can be extended to any object: Adapters, Observers, Intercepting Filters and Singletons. By extending this class to any object that uses static methods, they will have the capability of using these design patterns.</long-description>
        <tag name="package" line="10" description="data"/>
      </docblock>
      <property static="true" visibility="protected" namespace="" line="15" package="data">
        <name>$_adapters</name>
        <full_name>\PVStaticPatterns::$_adapters</full_name>
        <default>array()</default>
        <docblock line="15">
          <description>The adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="20" package="data">
        <name>$_observers</name>
        <full_name>\PVStaticPatterns::$_observers</full_name>
        <default>array()</default>
        <docblock line="20">
          <description>Observers that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="25" package="data">
        <name>$_instances</name>
        <full_name>\PVStaticPatterns::$_instances</full_name>
        <default>array()</default>
        <docblock line="25">
          <description>Instances for singleton that have added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="protected" namespace="" line="30" package="data">
        <name>$_filters</name>
        <full_name>\PVStaticPatterns::$_filters</full_name>
        <default>array()</default>
        <docblock line="30">
          <description>Intercepting filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="35" package="data">
        <name>$_traceAdapters</name>
        <full_name>\PVStaticPatterns::$_traceAdapters</full_name>
        <default>false</default>
        <docblock line="35">
          <description>Boolean for following and logging adapters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="40" package="data">
        <name>$_traceFilters</name>
        <full_name>\PVStaticPatterns::$_traceFilters</full_name>
        <default>false</default>
        <docblock line="40">
          <description>Boolean for following and logging filters that have been added</description>
          <long-description></long-description>
        </docblock>
      </property>
      <property static="true" visibility="private" namespace="" line="45" package="data">
        <name>$_traceObservers</name>
        <full_name>\PVStaticPatterns::$_traceObservers</full_name>
        <default>false</default>
        <docblock line="45">
          <description>Boolean for following and logging observers that have been added.</description>
          <long-description></long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="68" package="data">
        <name>addAdapter</name>
        <full_name>\PVStaticPatterns::addAdapter()</full_name>
        <docblock line="68">
          <description>Adapters allows a method to be completely overwritten by calling a different class
with the same method name. Adapters can also be used with closures. The adapter uses
a strategy/adapter design pattern.</description>
          <long-description></long-description>
          <tag name="param" line="68" description="&lt;p&gt;The class that contains the function the adapter will respond too&lt;/p&gt;" type="string" variable="$trigger_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The method called that will have the adapter to be called.&lt;/p&gt;" type="string" variable="$trigger_method">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;The new class to be called that has the same method name&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="68" description="&lt;p&gt;An array of options that be called&#10;-'object' &lt;em&gt;string&lt;/em&gt; : Assumes that default method in the class to be called is static. If called object&#10;needs to be instantiated, change to object to 'instance' and one will be created before the adapter calls the function&#10;-'call_method' &lt;em&gt;string&lt;/em&gt;: By default the method to be called to override the current one should be the&#10;same name. But this can be ovveridden to call a different method.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of method being called. Default is class_method but if the method is a closure,&#10;set the type to be 'closure' and make the $trigger_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="68" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="68" description="public"/>
          <tag name="todo" line="68" description="add ability to adapt singleton class"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$trigger_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="99" package="data">
        <name>addClassAdapter</name>
        <full_name>\PVStaticPatterns::addClassAdapter()</full_name>
        <docblock line="99">
          <description>Will add an adapter for every method in the trigger_class to another class. The method will only be adapted to another class
if the method in the trigger class has an adapter. This functionality can be very similiar to DI.</description>
          <long-description></long-description>
          <tag name="param" line="99" description="&lt;p&gt;This can either be the name of the class or an object whose methods will be adapted to another class.&#10;&#9;&#9;  The class should be included or be autoloaded by this point.&lt;/p&gt;" type="mixed" variable="$trigger_class">
            <type>mixed</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;The call class is the classes methods that will be called in place of the methods in the trigger_class.&#10;&#9;&#9;  These class does not have to be included as this point.&lt;/p&gt;" type="string" variable="$call_class">
            <type>string</type>
          </tag>
          <tag name="param" line="99" description="&lt;p&gt;Options that be used to further distinguish the behavior of the adapters added&#10;-'object' &lt;em&gt;string&lt;/em&gt;: Determines if the object being adapted to is static or an instance.Default is static&#10;-'call_class' &lt;em&gt;string&lt;/em&gt;: The name of the class that the methods will be adapted too.&#10;-'class' &lt;em&gt;string&lt;/em&gt;: The name of the whose methods will be adapted to another class&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="99" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="99" description="public"/>
          <tag name="todo" line="99" description="Add ability to use singleton classes"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trigger_class</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$call_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="138" package="data">
        <name>_callAdapter</name>
        <full_name>\PVStaticPatterns::_callAdapter()</full_name>
        <docblock line="138">
          <description>Calls an adapter for this class. The easiest way of implementing an adapter is by placing the
adapter at the top of the function that it is being called in. An infinite amout of parameters
can be passed to the adapter BUT the parameters should be the same as the parents.</description>
          <long-description></long-description>
          <tag name="param" line="138" description="&lt;p&gt;The name of the class the adapter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;THe name of the method the class is being called from.&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="138" description="&lt;p&gt;An infiniate amout of parameters to passed to this class.&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="138" description="$value A value that the adapter returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="138" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="174" package="data">
        <name>_hasAdapter</name>
        <full_name>\PVStaticPatterns::_hasAdapter()</full_name>
        <docblock line="174">
          <description>Checks if an adapter is set for the function.</description>
          <long-description></long-description>
          <tag name="param" line="174" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="174" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="174" description="$hasAdapter Returns true if it has an adapter or false if it doesn not" type="\boolea">
            <type>\boolea</type>
          </tag>
          <tag name="access" line="174" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="190" package="data">
        <name>removeAdapter</name>
        <full_name>\PVStaticPatterns::removeAdapter()</full_name>
        <docblock line="190">
          <description>Removes an adapter.</description>
          <long-description></long-description>
          <tag name="param" line="190" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="190" description="&lt;p&gt;The associated method&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="190" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="190" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="202" package="data">
        <name>removeClassAdapter</name>
        <full_name>\PVStaticPatterns::removeClassAdapter()</full_name>
        <docblock line="202">
          <description>Removes an adapter for an entire class.</description>
          <long-description></long-description>
          <tag name="param" line="202" description="&lt;p&gt;class The associated class the function is calling&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="return" line="202" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="202" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="223" package="data">
        <name>addObserver</name>
        <full_name>\PVStaticPatterns::addObserver()</full_name>
        <docblock line="223">
          <description>Adds an observer to the class. Observer events can fired in any method
to trigger a response.</description>
          <long-description></long-description>
          <tag name="param" line="223" description="&lt;p&gt;The name of the event that will cause a certain class and method to fire&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the class that contains the function that will be fired for this event&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;The name of the method that will be fired when the event occurs&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="223" description="&lt;p&gt;Options to further the define the firing of an event&#10;-'object' &lt;em&gt;string&lt;/em&gt; : If the method being called is static, should be set to static. Else set to instance&#10;-'class' &lt;em&gt;stinrg&lt;/em&gt; : The name of the class to be called. Default is the class that is passed in.&#10;-'method' &lt;em&gt;string&lt;/em&gt;: The name of the method to be called. Default is the method that is passed in.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="223" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="223" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="245" package="data">
        <name>_notify</name>
        <full_name>\PVStaticPatterns::_notify()</full_name>
        <docblock line="245">
          <description>Calls any functions that have been added to the observer if the event is present in the
observers array.</description>
          <long-description></long-description>
          <tag name="param" line="245" description="&lt;p&gt;The name of the even that occured that will trigger notifies&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="param" line="245" description="&lt;p&gt;An array of infinite arguements that will passed to each function related to the event&lt;/p&gt;" type="mixed" variable="$args">
            <type>mixed</type>
          </tag>
          <tag name="return" line="245" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="245" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="282" package="data">
        <name>clearObservers</name>
        <full_name>\PVStaticPatterns::clearObservers()</full_name>
        <docblock line="282">
          <description>Removes all the observers assoicated with an event.</description>
          <long-description></long-description>
          <tag name="param" line="282" description="&lt;p&gt;The event to remove all the observers from&lt;/p&gt;" type="string" variable="$event">
            <type>string</type>
          </tag>
          <tag name="return" line="282" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="282" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$event</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="304" package="data">
        <name>addFilter</name>
        <full_name>\PVStaticPatterns::addFilter()</full_name>
        <docblock line="304">
          <description>Adds a filter to the class. Filters are for modifying a value within a class and should not
interpet the normal flow within the method.</description>
          <long-description></long-description>
          <tag name="param" line="304" description="&lt;p&gt;The name of the class the filter is going in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The name of the method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The class that the filter resides in.&lt;/p&gt;" type="string" variable="$filter_class">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;The method in the class that the parameters will be passed too.&lt;/p&gt;" type="string" variable="$filter_method">
            <type>string</type>
          </tag>
          <tag name="param" line="304" description="&lt;p&gt;Options that can be set for further modifying the filter.&#10;-'object' &lt;em&gt;string&lt;/em&gt;: If the method being called is static, static should be inserted. If its in an instance, 'instance' should be set.&#10;Default is set to static.&#10;-'event' &lt;em&gt;string&lt;/em&gt;: Associate this filter with an event.&#10;-'type' &lt;em&gt;string&lt;/em&gt;: The type of function being called. Default is class_method but if the function is a closure,&#10;set the type to be 'closure' and make the $filter_method the closure&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="304" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="304" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$filter_method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="336" package="data">
        <name>_applyFilter</name>
        <full_name>\PVStaticPatterns::_applyFilter()</full_name>
        <docblock line="336">
          <description>Apply a fitler if filter is set.</description>
          <long-description></long-description>
          <tag name="param" line="336" description="&lt;p&gt;The name of the class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The method the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;The data that is being passed to the filter&lt;/p&gt;" type="mixed" variable="$data">
            <type>mixed</type>
          </tag>
          <tag name="param" line="336" description="&lt;p&gt;options to be passed to the filter. Passed options we be passed to the function.&#10;-'default_return' &lt;em&gt;mixed&lt;/em&gt;: If no filter is return, the data passed in by default will be return. Can be overriden&#10;-'event' &lt;em&gt;string&lt;/em&gt;: An event to associate with the filter. Default is null&lt;/p&gt;" type="array" variable="$options">
            <type>array</type>
          </tag>
          <tag name="return" line="336" description="$data The data the function returns" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="336" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>mixed</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="373" package="data">
        <name>_hasFilter</name>
        <full_name>\PVStaticPatterns::_hasFilter()</full_name>
        <docblock line="373">
          <description>Checks if a filter has been set.</description>
          <long-description></long-description>
          <tag name="param" line="373" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="373" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="388" package="data">
        <name>clearFilters</name>
        <full_name>\PVStaticPatterns::clearFilters()</full_name>
        <docblock line="388">
          <description>Remove all the filters from a class.</description>
          <long-description></long-description>
          <tag name="param" line="388" description="&lt;p&gt;The class the filter is in&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="388" description="&lt;p&gt;The method of the class that the filter is in&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="return" line="388" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="388" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="399" package="data">
        <name>getInstance</name>
        <full_name>\PVStaticPatterns::getInstance()</full_name>
        <docblock line="399">
          <description>Returns the instance of a class. Used for implementing the singleton design pattern. Class
will only be instantiated once.</description>
          <long-description></long-description>
          <tag name="return" line="399" description="$instance Returns the instance of a class." type="object">
            <type>object</type>
          </tag>
          <tag name="access" line="399" description="public"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="425" package="data">
        <name>setAdapterTrace</name>
        <full_name>\PVStaticPatterns::setAdapterTrace()</full_name>
        <docblock line="425">
          <description>Turn on/off the ability to trace an adapter.Turning on will log
an adapter using PVLog when adapter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="425" description="&lt;p&gt;Default is false. If set to true, will trace adatper.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="425" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="425" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="438" package="data">
        <name>setFilterTrace</name>
        <full_name>\PVStaticPatterns::setFilterTrace()</full_name>
        <docblock line="438">
          <description>Turn on/off the ability to trace an filter.Turning on will log
a filter using PVLog when filter is executed.</description>
          <long-description></long-description>
          <tag name="param" line="438" description="&lt;p&gt;Default is false. If set to true, will trace filter.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="438" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="438" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="" line="451" package="data">
        <name>setObserverTrace</name>
        <full_name>\PVStaticPatterns::setObserverTrace()</full_name>
        <docblock line="451">
          <description>Turn on/off the ability to trace an observer.Turning on will log
an observer using PVLog when the observer is executed.</description>
          <long-description></long-description>
          <tag name="param" line="451" description="&lt;p&gt;Default is false. If set to true, will trace observer.&lt;/p&gt;" type="boolean" variable="$trace">
            <type>boolean</type>
          </tag>
          <tag name="return" line="451" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="451" description="public"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$trace</name>
          <default>false</default>
          <type>boolean</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="466" package="data">
        <name>_invokeMethod</name>
        <full_name>\PVStaticPatterns::_invokeMethod()</full_name>
        <docblock line="466">
          <description>Calls a methods that is an instance of an class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="466" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="466" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="466" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="466" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="" line="507" package="data">
        <name>_invokeStaticMethod</name>
        <full_name>\PVStaticPatterns::_invokeStaticMethod()</full_name>
        <docblock line="507">
          <description>Calls a methods that is a static method of a class. This method is generally
faster than using user_call_func_array.</description>
          <long-description></long-description>
          <tag name="param" line="507" description="&lt;p&gt;The name of the class to be called&lt;/p&gt;" type="string" variable="$class">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;The name of the method in the class to be called&lt;/p&gt;" type="string" variable="$method">
            <type>string</type>
          </tag>
          <tag name="param" line="507" description="&lt;p&gt;An array of arguements. Arguements have to be embedded in an array to be called.&lt;/p&gt;" type="array" variable="$args">
            <type>array</type>
          </tag>
          <tag name="return" line="507" description="$data Data returned by the function called" type="mixed">
            <type>mixed</type>
          </tag>
          <tag name="access" line="507" description="protected"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$class</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$method</name>
          <default></default>
          <type>string</type>
        </argument>
        <argument line="0" by_reference="false">
          <name>$args</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="542" package="data">
        <name>_logAdapter</name>
        <full_name>\PVStaticPatterns::_logAdapter()</full_name>
        <docblock line="542">
          <description>Write out the contents of adapters used to a log</description>
          <long-description></long-description>
          <tag name="param" line="542" description="&lt;p&gt;The data in the adapter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="542" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="542" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="555" package="data">
        <name>_logFilter</name>
        <full_name>\PVStaticPatterns::_logFilter()</full_name>
        <docblock line="555">
          <description>Write out the contents of a filter used to a log</description>
          <long-description></long-description>
          <tag name="param" line="555" description="&lt;p&gt;The data in the filter&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="555" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="555" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="568" package="data">
        <name>_logObserver</name>
        <full_name>\PVStaticPatterns::_logObserver()</full_name>
        <docblock line="568">
          <description>Write out the contents of an observer to a log.</description>
          <long-description></long-description>
          <tag name="param" line="568" description="&lt;p&gt;The data in the observer&lt;/p&gt;" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="568" description="" type="void">
            <type>void</type>
          </tag>
          <tag name="access" line="568" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="private" namespace="" line="581" package="data">
        <name>_prepareLogData</name>
        <full_name>\PVStaticPatterns::_prepareLogData()</full_name>
        <docblock line="581">
          <description>Breaks down the data to be logged from an adapter, filter or observer.</description>
          <long-description></long-description>
          <tag name="param" line="581" description="" type="array" variable="$data">
            <type>array</type>
          </tag>
          <tag name="return" line="581" description="$message JSON encode message of information about the data" type="string">
            <type>string</type>
          </tag>
          <tag name="access" line="581" description="private"/>
        </docblock>
        <argument line="0" by_reference="false">
          <name>$data</name>
          <default></default>
          <type>array</type>
        </argument>
      </method>
    </class>
    <markers>
      <todo line="68">add ability to adapt singleton class</todo>
      <todo line="99">Add ability to use singleton classes</todo>
    </markers>
    <parse_markers>
      <error line="0" code="PPC:ERR-50000">No summary was found for this file</error>
      <notice line="138" code="PPC:ERR-50013">Parameter $args could not be found in _callAdapter()</notice>
      <notice line="245" code="PPC:ERR-50013">Parameter $args could not be found in _notify()</notice>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="data" full_name="data"/>
  <package name="global" full_name="global"/>
  <package name="media" full_name="media"/>
  <package name="network" full_name="network"/>
  <package name="system" full_name="system"/>
  <package name="template" full_name="template"/>
  <package name="util" full_name="util"/>
  <namespace name="global" full_name="global"/>
  <deprecated count="3"/>
</project>
